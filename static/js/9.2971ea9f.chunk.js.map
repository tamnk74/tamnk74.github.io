{"version":3,"sources":["components/NotFound/index.jsx","components/routers/AuthRouter/index.jsx","features/phrase/components/PhraseItem/index.js","features/category/components/NameInput/index.js","features/category/components/CategoryForm/index.js","features/category/components/CategoryModal/index.jsx","features/phrase/components/WordInput/index.js","features/phrase/components/AddPhrase/index.jsx","features/phrase/components/PhraseModal/index.js","features/phrase/components/PhraseList/index.js","features/phrase/pages/Main/index.js","features/phrase/pages/Add/index.js","features/phrase/index.js"],"names":["NotFound","AuthRoute","Component","component","rest","user","useSelector","selectUser","render","props","to","pathname","state","from","location","text","a","speechSyn","SpeechSynthesisUtterance","lang","window","speechSynthesis","speak","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","chip","padding","title","fontSize","pos","marginBottom","PhraseItem","phrase","isUpdate","categories","handleOpen","handleDelete","classes","React","useState","open","setOpen","handleClose","phraseCategories","filter","item","includes","id","Grid","Card","className","CardContent","length","map","Chip","label","name","color","Typography","variant","meaning","CardActions","Button","size","type","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogActions","autoFocus","NameInput","onChange","selectCategories","dispatch","useDispatch","options","setOptions","useEffect","getCategories","option","Autocomplete","fullWidth","freeSolo","e","disableClearable","renderInput","params","TextField","theme","form","width","spacing","input","CategoryForm","onSubmit","category","useForm","handleSubmit","errors","formState","control","setValue","reset","submit","data","description","stopPropagation","container","direction","justify","alignItems","xs","rules","required","defaultValue","placeholder","field","ref","fieldState","error","currentTarget","value","shouldValidate","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","getModalStyle","top","left","CategoryModal","modalStyle","Modal","style","addCategory","limit","WordInput","phrases","selectPhrases","getPhrases","inputGroup","marginTop","flexDirection","dropdown","addBtn","AddPhrase","addPhrase","userId","uid","multiple","getOptionLabel","find","_","Fab","aria-label","PhraseModal","updatePhrase","flexWrap","justifyContent","overflow","list","flexGrow","gridList","icon","PhraseList","isFilter","filteredCategories","selectFilteredCategories","setPhrase","currentPhrase","removePhrase","startAt","updatePhraseAction","phraseItem","body","MainPage","addPhraseAction","Phrase","match","useRouteMatch","exact","path","url"],"mappings":"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","file":"static/js/9.2971ea9f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NotFound() {\n  return <div>Oopss ... Not found</div>;\n}\n\nNotFound.propTypes = {};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../features/auth/authSlice';\n\nexport default function AuthRoute({ component: Component, ...rest }) {\n  const user = useSelector(selectUser);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/sign-in',\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport Chip from '@material-ui/core/Chip';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nasync function speak(text) {\n  const speechSyn = new SpeechSynthesisUtterance(text);\n  speechSyn.lang = 'en-US';\n  return window.speechSynthesis.speak(speechSyn);\n}\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  chip: {\n    padding: '5px 20px 0px 20px',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function PhraseItem({\n  phrase,\n  isUpdate,\n  categories,\n  handleOpen,\n  handleDelete,\n}) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const phraseCategories = categories.filter(\n    (item) => phrase.categories && phrase.categories.includes(item.id),\n  );\n  return (\n    <Grid item>\n      <Card className={classes.root}>\n        <CardContent className={classes.chip}>\n          {phraseCategories.length\n            ? phraseCategories.map((item) => (\n                <Chip key={item.id} label={item.name} color=\"primary\" />\n              ))\n            : 'Word of the Day'}\n        </CardContent>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {phrase.title}\n          </Typography>\n          <Typography className={classes.pos} color=\"textSecondary\" />\n          <Typography variant=\"body2\" component=\"p\">\n            {phrase.meaning}\n            <br />\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            size=\"small\"\n            type=\"button\"\n            onClick={() => speak(phrase.title)}\n          >\n            <VolumeUpIcon />\n          </Button>\n          {isUpdate && (\n            <Button\n              size=\"small\"\n              type=\"button\"\n              onClick={() => handleOpen(phrase)}\n            >\n              Edit\n            </Button>\n          )}\n          {isUpdate && (\n            <Button size=\"small\" type=\"button\" onClick={handleClickOpen}>\n              Delete\n            </Button>\n          )}\n        </CardActions>\n      </Card>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Are you sure to remove this phrase?\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button\n            onClick={() => handleDelete(phrase)}\n            color=\"secondary\"\n            autoFocus\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getCategories } from '../../categoryService';\nimport { selectCategories } from '../../categorySlice';\n\nexport default function NameInput({ onChange, ...props }) {\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const [options, setOptions] = React.useState([]);\n  React.useEffect(() => {\n    if (!categories.length) {\n      dispatch(getCategories());\n    }\n    setOptions(categories.map((option) => `${option.name}`));\n  }, [categories]);\n\n  return (\n    <Autocomplete\n      {...props}\n      fullWidth\n      freeSolo\n      onClose={(e) => onChange(e)}\n      disableClearable\n      id=\"category-input\"\n      options={options}\n      renderInput={(params) => <TextField {...params} label=\"Name\" />}\n    />\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useForm, Controller } from 'react-hook-form';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport NameInput from '../NameInput';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function CategoryForm({ onSubmit, category }) {\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    formState: { errors },\n    control,\n    setValue,\n    reset,\n  } = useForm();\n\n  const submit = async (data) => {\n    onSubmit(data, category);\n    reset({\n      name: '',\n      description: '',\n    });\n  };\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.stopPropagation();\n        handleSubmit(submit)(e);\n      }}\n      className={classes.form}\n    >\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={1}\n      >\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"name\"\n            fullWidth\n            control={control}\n            rules={{ required: true }}\n            defaultValue={category.name || ''}\n            placeholder=\"Name\"\n            // eslint-disable-next-line no-unused-vars\n            render={({ field: { ref, ...rest }, fieldState }) => (\n              <NameInput\n                {...rest}\n                {...fieldState}\n                error={errors.name}\n                onChange={(e) => {\n                  setValue('name', e.currentTarget.value, {\n                    shouldValidate: true,\n                  });\n                }}\n              />\n            )}\n          />\n          {errors.title && <span>Title is required</span>}\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"description\"\n            control={control}\n            defaultValue={category.description || ''}\n            render={({ field }) => (\n              <TextField {...field} fullWidth label=\"Description\" />\n            )}\n          />\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport CategoryForm from '../CategoryForm';\nimport { addCategory, getCategories } from '../../categoryService';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(${-top}%, ${-left}%)`,\n  };\n}\n\nexport default function CategoryModal({\n  category = {},\n  open = false,\n  handleClose,\n  title = 'Add new category',\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const handleSubmit = (data) => {\n    dispatch(addCategory(data));\n    handleClose();\n    return dispatch(\n      getCategories({\n        limit: 1000,\n      }),\n    );\n  };\n  const [modalStyle] = useState(getModalStyle);\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div style={modalStyle} className={classes.paper}>\n        <h2>{title}</h2>\n        <CategoryForm category={category} onSubmit={handleSubmit} />\n      </div>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getPhrases } from '../../phraseService';\nimport { selectPhrases } from '../../phraseSlice';\n\nexport default function WordInput({ onChange, ...props }) {\n  const phrases = useSelector(selectPhrases);\n  const dispatch = useDispatch();\n  const [options, setOptions] = React.useState([]);\n\n  React.useEffect(() => {\n    if (!phrases.length) {\n      dispatch(getPhrases());\n    }\n    setOptions(phrases.map((option) => `${option.title}`));\n  }, [phrases]);\n\n  return (\n    <Autocomplete\n      {...props}\n      fullWidth\n      freeSolo\n      onClose={(e) => onChange(e)}\n      disableClearable\n      id=\"phrase-input\"\n      options={options}\n      renderInput={(params) => <TextField {...params} label=\"Title\" />}\n    />\n  );\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport CategoryModal from 'features/category/components/CategoryModal';\nimport { selectCategories } from 'features/category/categorySlice';\nimport { selectUser } from 'features/auth/authSlice';\nimport WordInput from '../WordInput';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  inputGroup: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  dropdown: {\n    width: 'calc(100% - 56px)',\n  },\n  addBtn: {\n    width: '56px',\n    marginTop: 0,\n  },\n}));\n\nexport default function AddPhrase({ addPhrase, phrase = {} }) {\n  const classes = useStyles();\n  const categories = useSelector(selectCategories);\n  const user = useSelector(selectUser);\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const {\n    handleSubmit,\n    setValue,\n    formState: { errors },\n    control,\n    reset,\n  } = useForm();\n\n  const onSubmit = async (data) => {\n    addPhrase(\n      {\n        ...data,\n        userId: user.uid,\n      },\n      phrase,\n    );\n    reset({\n      title: '',\n      meaning: phrase.meaning || '',\n      categories: (phrase && phrase.meaning) || [],\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={1}\n      >\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"title\"\n            fullWidth\n            control={control}\n            rules={{ required: true }}\n            defaultValue={phrase.title || ''}\n            placeholder=\"Phrase\"\n            render={({ field: { ref, ...rest }, fieldState }) => (\n              <WordInput\n                {...rest}\n                {...fieldState}\n                error={errors.title}\n                onChange={(e) => {\n                  setValue('title', e.currentTarget.value, {\n                    shouldValidate: true,\n                  });\n                }}\n              />\n            )}\n          />\n          {errors.title && <span>Title is required</span>}\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"meaning\"\n            control={control}\n            defaultValue={phrase.meaning || ''}\n            render={({ field }) => (\n              <TextField {...field} fullWidth label=\"Meaning\" />\n            )}\n          />\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.inputGroup}>\n          <Controller\n            name=\"categories\"\n            render={({ field }) => (\n              <Autocomplete\n                {...field}\n                multiple\n                id=\"categories-input\"\n                options={categories.map((category) => category.id)}\n                getOptionLabel={(option) => {\n                  const item = categories.find(\n                    (category) => category.id === option,\n                  );\n                  return item && item.name;\n                }}\n                className={classes.dropdown}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Categories\"\n                    placeholder=\"Categories\"\n                  />\n                )}\n                onChange={(_, data) => field.onChange(data)}\n              />\n            )}\n            control={control}\n            defaultValue={phrase.categories || []}\n          />\n          <Fab\n            color=\"primary\"\n            aria-label=\"add\"\n            className={classes.addBtn}\n            onClick={handleOpen}\n          >\n            <AddIcon />\n          </Fab>\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {' '}\n            Submit{' '}\n          </Button>\n        </Grid>\n      </Grid>\n      <CategoryModal open={open} handleClose={handleClose} />\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport AddPhrase from '../AddPhrase';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(${-top}%, ${-left}%)`,\n  };\n}\n\nexport default function PhraseModal({\n  updatePhrase,\n  phrase = {},\n  open = false,\n  handleClose,\n}) {\n  const classes = useStyles();\n\n  const [modalStyle] = useState(getModalStyle);\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div style={modalStyle} className={classes.paper}>\n        <AddPhrase addPhrase={updatePhrase} phrase={phrase} />\n      </div>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getCategories } from 'features/category/categoryService';\nimport { selectCategories } from 'features/category/categorySlice';\nimport { selectUser } from 'features/auth/authSlice';\nimport PhraseItem from '../PhraseItem';\nimport { removePhrase, getPhrases, updatePhrase } from '../../phraseService';\nimport { selectPhrases, selectFilteredCategories } from '../../phraseSlice';\nimport PhraseModal from '../PhraseModal';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  list: {\n    flexGrow: 1,\n  },\n  gridList: {},\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function PhraseList({ limit, isFilter = true }) {\n  const phrases = useSelector(selectPhrases);\n  const user = useSelector(selectUser);\n  const filteredCategories = useSelector(selectFilteredCategories);\n  const categories = useSelector(selectCategories);\n  const [phrase, setPhrase] = useState();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = (currentPhrase) => {\n    setPhrase(currentPhrase);\n    setOpen(true);\n  };\n\n  const handleDelete = async (currentPhrase) => {\n    await dispatch(removePhrase(currentPhrase.id));\n    return dispatch(\n      getPhrases({\n        isFilter,\n        filteredCategories,\n        limit: limit || 100,\n        startAt: 0,\n      }),\n    );\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updatePhraseAction = async (data, currentPhrase) => {\n    await dispatch(\n      updatePhrase({\n        ...currentPhrase,\n        ...data,\n      }),\n    );\n    setOpen(false);\n    return dispatch(\n      getPhrases({\n        isFilter,\n        limit: limit || 100,\n        startAt: 0,\n      }),\n    );\n  };\n  useEffect(() => {\n    if (!phrases.length) {\n      dispatch(\n        getPhrases({\n          isFilter,\n          filteredCategories,\n          limit: limit || 100,\n          startAt: 0,\n        }),\n      );\n    }\n    if (!categories.length) {\n      dispatch(\n        getCategories({\n          limit: 1000,\n        }),\n      );\n    }\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Grid container className={classes.list} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\" spacing={2}>\n            {phrases.map((phraseItem) => (\n              <PhraseItem\n                phrase={phraseItem}\n                isUpdate={\n                  user && (user.uid === phraseItem.userId || !phraseItem.userId)\n                }\n                categories={categories}\n                key={phraseItem.id}\n                handleOpen={handleOpen}\n                handleDelete={handleDelete}\n              />\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n      <PhraseModal\n        open={open}\n        handleClose={handleClose}\n        phrase={phrase}\n        updatePhrase={updatePhraseAction}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport PhraseList from '../../components/PhraseList';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: theme.spacing(1, 0, 0, 0),\n  },\n  form: {\n    width: '100%',\n    padding: theme.spacing(0, 0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function MainPage() {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n      className={classes.body}\n    >\n      <PhraseList limit={-1} />\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AddPhrase from '../../components/AddPhrase';\nimport PhraseList from '../../components/PhraseList';\nimport { addPhrase } from '../../phraseService';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: theme.spacing(1, 0, 0, 0),\n  },\n  form: {\n    width: '100%',\n    padding: theme.spacing(0, 0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function MainPage() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const addPhraseAction = async (data) => dispatch(addPhrase(data));\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n      className={classes.body}\n    >\n      <Grid container item xs={12} className={classes.form}>\n        <AddPhrase addPhrase={addPhraseAction} />\n      </Grid>\n      <Grid container item xs={12} className={classes.form}>\n        <PhraseList limit=\"-1\" isFilter={false} />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport NotFound from '../../components/NotFound';\nimport AuthRouter from '../../components/routers/AuthRouter';\nimport MainPage from './pages/Main';\nimport AddPhrase from './pages/Add';\n\nfunction Phrase() {\n  const match = useRouteMatch();\n  return (\n    <Switch>\n      <Route exact path={match.url} component={MainPage} />\n      <AuthRouter path={`${match.url}/new`} component={AddPhrase} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nPhrase.propTypes = {};\n\nexport default Phrase;\n"],"sourceRoot":""}