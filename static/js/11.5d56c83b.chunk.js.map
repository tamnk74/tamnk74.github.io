{"version":3,"sources":["components/NotFound/index.jsx","components/routers/AuthRouter/index.jsx","features/category/components/NameInput/index.js","features/category/components/CategoryForm/index.js","features/category/components/CategoryModal/index.jsx","features/phrase/components/WordInput/index.js","features/phrase/components/AddPhrase/index.jsx","features/phrase/components/PhraseModal/index.js","features/phrase/components/PhraseItem/index.js","features/phrase/components/PhraseList/list.js","features/phrase/pages/Main/index.js","features/phrase/pages/Add/index.js","features/phrase/index.js"],"names":["NotFound","AuthRoute","Component","component","rest","user","useSelector","selectUser","render","props","to","pathname","state","from","location","NameInput","onChange","categories","selectCategories","dispatch","useDispatch","React","useState","options","setOptions","useEffect","length","getCategories","map","option","name","Autocomplete","fullWidth","freeSolo","onClose","e","disableClearable","id","renderInput","params","TextField","label","useStyles","makeStyles","theme","form","width","margin","spacing","input","padding","CategoryForm","onSubmit","category","classes","useForm","handleSubmit","errors","formState","control","setValue","reset","submit","data","a","defaultValue","description","stopPropagation","className","Grid","container","direction","justify","alignItems","item","xs","rules","required","placeholder","field","ref","fieldState","error","currentTarget","value","shouldValidate","title","Button","type","variant","color","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","getModalStyle","top","left","transform","CategoryModal","open","handleClose","modalStyle","Modal","style","addCategory","limit","WordInput","phrases","selectAllPhrases","inputGroup","marginTop","display","flexDirection","dropdown","addBtn","AddPhrase","addPhrase","phrase","setOpen","userId","uid","meaning","multiple","getOptionLabel","find","_","Fab","onClick","PhraseModal","updatePhrase","text","speechSyn","SpeechSynthesisUtterance","lang","window","speechSynthesis","speak","root","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","secondary","bullet","chip","pos","marginBottom","PhraseItem","panel","isUpdate","handleOpen","handleDelete","phraseCategories","filter","includes","expanded","setExpanded","Accordion","event","isExpanded","AccordionSummary","expandIcon","Typography","Chip","AccordionDetails","CardActions","size","Dialog","DialogTitle","DialogActions","autoFocus","flexWrap","justifyContent","overflow","list","flexGrow","gridList","icon","AccordionPhraseList","setPhrase","currentPhrase","removePhrase","getPhrases","updatePhraseAction","phraseItem","body","MainPage","selectOptions","selectPhrases","handleSearch","debounce","query","target","Pagination","count","totalPage","page","newOptions","showFirstButton","showLastButton","AddPage","addPhraseAction","Phrase","match","useRouteMatch","exact","path","url"],"mappings":"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","file":"static/js/11.5d56c83b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NotFound() {\n  return <div>Oopss ... Not found</div>;\n}\n\nNotFound.propTypes = {};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../../../features/auth/authSlice';\n\nexport default function AuthRoute({ component: Component, ...rest }) {\n  const user = useSelector(selectUser);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/sign-in',\n              state: { from: props.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getCategories } from '../../categoryService';\nimport { selectCategories } from '../../categorySlice';\n\nexport default function NameInput({ onChange, ...props }) {\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const [options, setOptions] = React.useState([]);\n  React.useEffect(() => {\n    if (!categories.length) {\n      dispatch(getCategories());\n    }\n    setOptions(categories.map((option) => `${option.name}`));\n  }, [categories]);\n\n  return (\n    <Autocomplete\n      {...props}\n      fullWidth\n      freeSolo\n      onClose={(e) => onChange(e)}\n      disableClearable\n      id=\"category-input\"\n      options={options}\n      renderInput={(params) => <TextField {...params} label=\"Name\" />}\n    />\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useForm, Controller } from 'react-hook-form';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport NameInput from '../NameInput';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function CategoryForm({ onSubmit, category }) {\n  const classes = useStyles();\n  const {\n    handleSubmit,\n    formState: { errors },\n    control,\n    setValue,\n    reset,\n  } = useForm();\n\n  const submit = async (data) => {\n    const defaultValue = {\n      name: '',\n      description: '',\n    };\n    onSubmit({ name: data.name, description: data.description ?? '' }, category);\n    reset(defaultValue);\n  };\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.stopPropagation();\n        handleSubmit(submit)(e);\n      }}\n      className={classes.form}\n    >\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1}>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"name\"\n            fullWidth\n            control={control}\n            rules={{ required: true }}\n            defaultValue={category.name ?? ''}\n            placeholder=\"Name\"\n            // eslint-disable-next-line no-unused-vars\n            render={({ field: { ref, ...rest }, fieldState }) => (\n              <NameInput\n                {...rest}\n                {...fieldState}\n                error={errors.name}\n                onChange={(e) => {\n                  setValue('name', e.currentTarget.value, {\n                    shouldValidate: true,\n                  });\n                }}\n              />\n            )}\n          />\n          {errors.title && <span>Title is required</span>}\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"description\"\n            control={control}\n            defaultValue={category.description ?? ''}\n            render={({ field }) => <TextField {...field} fullWidth label=\"Description\" />}\n          />\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport CategoryForm from '../CategoryForm';\nimport { addCategory, getCategories } from '../../categoryService';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(${-top}%, ${-left}%)`,\n  };\n}\n\nexport default function CategoryModal({\n  category = {},\n  open = false,\n  handleClose,\n  title = 'Add new category',\n}) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const handleSubmit = (data) => {\n    dispatch(addCategory(data));\n    handleClose();\n    return dispatch(\n      getCategories({\n        limit: 1000,\n      }),\n    );\n  };\n  const [modalStyle] = useState(getModalStyle);\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div style={modalStyle} className={classes.paper}>\n        <h2>{title}</h2>\n        <CategoryForm category={category} onSubmit={handleSubmit} />\n      </div>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { selectAllPhrases } from '../../phraseSlice';\n\nexport default function WordInput({ onChange, ...props }) {\n  const phrases = useSelector(selectAllPhrases);\n  const [options, setOptions] = React.useState([]);\n\n  React.useEffect(() => {\n    setOptions(phrases.map((option) => `${option.title}`));\n  }, [phrases]);\n\n  return (\n    <Autocomplete\n      {...props}\n      fullWidth\n      freeSolo\n      onClose={(e) => onChange(e)}\n      disableClearable\n      id=\"phrase-input\"\n      options={options}\n      renderInput={(params) => <TextField {...params} label=\"Title\" />}\n    />\n  );\n}\n","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { useForm, Controller } from 'react-hook-form';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport CategoryModal from 'features/category/components/CategoryModal';\nimport { selectCategories } from 'features/category/categorySlice';\nimport { selectUser } from 'features/auth/authSlice';\nimport WordInput from '../WordInput';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  inputGroup: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(3),\n    },\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  dropdown: {\n    width: 'calc(100% - 56px)',\n  },\n  addBtn: {\n    width: '56px',\n    marginTop: 0,\n  },\n}));\n\nexport default function AddPhrase({ addPhrase, phrase = {} }) {\n  const classes = useStyles();\n  const categories = useSelector(selectCategories);\n  const user = useSelector(selectUser);\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const {\n    handleSubmit,\n    setValue,\n    formState: { errors },\n    control,\n    reset,\n  } = useForm();\n\n  const onSubmit = async (data) => {\n    addPhrase(\n      {\n        ...data,\n        userId: user.uid,\n      },\n      phrase,\n    );\n    reset({\n      title: '',\n      meaning: phrase.meaning || '',\n      categories: (phrase && phrase.meaning) || [],\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={1}>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"title\"\n            fullWidth\n            control={control}\n            rules={{ required: true }}\n            defaultValue={phrase.title || ''}\n            placeholder=\"Phrase\"\n            render={({ field: { ref, ...rest }, fieldState }) => (\n              <WordInput\n                {...rest}\n                {...fieldState}\n                error={errors.title}\n                onChange={(e) => {\n                  setValue('title', e.currentTarget.value, {\n                    shouldValidate: true,\n                  });\n                }}\n              />\n            )}\n          />\n          {errors.title && <span>Title is required</span>}\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Controller\n            name=\"meaning\"\n            control={control}\n            defaultValue={phrase.meaning ?? ''}\n            render={({ field }) => <TextField {...field} fullWidth label=\"Meaning\" />}\n          />\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.inputGroup}>\n          <Controller\n            name=\"categories\"\n            render={({ field }) => (\n              <Autocomplete\n                {...field}\n                multiple\n                id=\"categories-input\"\n                options={categories.map((category) => category.id)}\n                getOptionLabel={(option) => {\n                  const item = categories.find((category) => category.id === option);\n                  return item && item.name;\n                }}\n                className={classes.dropdown}\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Categories\" placeholder=\"Categories\" />\n                )}\n                onChange={(_, data) => field.onChange(data)}\n              />\n            )}\n            control={control}\n            defaultValue={phrase.categories || []}\n          />\n          <Fab color=\"primary\" aria-label=\"add\" className={classes.addBtn} onClick={handleOpen}>\n            <AddIcon />\n          </Fab>\n        </Grid>\n        <Grid container item xs={12} spacing={1} className={classes.input}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {' '}\n            Submit{' '}\n          </Button>\n        </Grid>\n      </Grid>\n      <CategoryModal open={open} handleClose={handleClose} />\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport AddPhrase from '../AddPhrase';\n\nconst useStyles = makeStyles((theme) => ({\n  form: {\n    width: '100%',\n    margin: theme.spacing(0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(${-top}%, ${-left}%)`,\n  };\n}\n\nexport default function PhraseModal({\n  updatePhrase,\n  phrase = {},\n  open = false,\n  handleClose,\n}) {\n  const classes = useStyles();\n\n  const [modalStyle] = useState(getModalStyle);\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      <div style={modalStyle} className={classes.paper}>\n        <AddPhrase addPhrase={updatePhrase} phrase={phrase} />\n      </div>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AccordionSummary } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Accordion from '@material-ui/core/Accordion';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nasync function speak(text) {\n  const speechSyn = new SpeechSynthesisUtterance(text);\n  speechSyn.lang = 'en-US';\n  return window.speechSynthesis.speak(speechSyn);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  chip: {\n    padding: '5px 20px 0px 20px',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n}));\n\nexport default function PhraseItem({ phrase, isUpdate, categories, handleOpen, handleDelete }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const phraseCategories = categories.filter(\n    (item) => phrase.categories && phrase.categories.includes(item.id),\n  );\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n  return (\n    <Accordion\n      expanded={expanded === 'panel1'}\n      onChange={handleChange('panel1')}\n      className={classes.root}\n    >\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1bh-content\"\n        id=\"panel1bh-header\"\n      >\n        <Typography className={classes.heading}>\n          {phraseCategories.length\n            ? phraseCategories.map((item) => (\n                <Chip key={item.id} label={item.name} color=\"primary\" />\n              ))\n            : 'Word of the Day'}\n        </Typography>\n        <Typography className={classes.secondaryHeading}>{phrase.title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography>{phrase.meaning}</Typography>\n        <CardActions>\n          <Button size=\"small\" type=\"button\" onClick={() => speak(phrase.title)}>\n            <VolumeUpIcon />\n          </Button>\n          {isUpdate && (\n            <Button size=\"small\" type=\"button\" onClick={() => handleOpen(phrase)}>\n              Edit\n            </Button>\n          )}\n          {isUpdate && (\n            <Button size=\"small\" type=\"button\" onClick={handleClickOpen}>\n              Delete\n            </Button>\n          )}\n        </CardActions>\n      </AccordionDetails>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Are you sure to remove this phrase?</DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={() => handleDelete(phrase)} color=\"secondary\" autoFocus>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Accordion>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getCategories } from 'features/category/categoryService';\nimport { selectCategories } from 'features/category/categorySlice';\nimport { selectUser } from 'features/auth/authSlice';\n\nimport { removePhrase, getPhrases, updatePhrase } from '../../phraseService';\nimport PhraseModal from '../PhraseModal';\nimport PhraseItem from '../PhraseItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  list: {\n    flexGrow: 1,\n  },\n  gridList: {},\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n}));\n\nexport default function AccordionPhraseList({ phrases, options }) {\n  const user = useSelector(selectUser);\n  const categories = useSelector(selectCategories);\n  const [phrase, setPhrase] = useState();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = (currentPhrase) => {\n    setPhrase(currentPhrase);\n    setOpen(true);\n  };\n\n  const handleDelete = async (currentPhrase) => {\n    await dispatch(removePhrase(currentPhrase.id));\n    return dispatch(getPhrases(options));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updatePhraseAction = async (data, currentPhrase) => {\n    await dispatch(\n      updatePhrase({\n        ...currentPhrase,\n        ...data,\n      }),\n    );\n    setOpen(false);\n    return dispatch(getPhrases(options));\n  };\n  useEffect(() => {\n    dispatch(getPhrases(options));\n    dispatch(\n      getCategories({\n        limit: 1000,\n      }),\n    );\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      {phrases.map((phraseItem) => (\n        <PhraseItem\n          phrase={phraseItem}\n          isUpdate={user && (user.uid === phraseItem.userId || !phraseItem.userId)}\n          categories={categories}\n          key={phraseItem.id}\n          handleOpen={handleOpen}\n          handleDelete={handleDelete}\n        />\n      ))}\n      <PhraseModal\n        open={open}\n        handleClose={handleClose}\n        phrase={phrase}\n        updatePhrase={updatePhraseAction}\n      />\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AccordionPhraseList from 'features/phrase/components/PhraseList/list';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Pagination } from '@material-ui/lab';\nimport { selectOptions, selectPhrases, setOptions } from 'features/phrase/phraseSlice';\nimport { getPhrases } from 'features/phrase/phraseService';\nimport { TextField } from '@material-ui/core';\nimport debounce from 'lodash.debounce';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: theme.spacing(1, 0, 0, 0),\n  },\n  form: {\n    width: '100%',\n    padding: theme.spacing(0, 0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function MainPage() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const options = useSelector(selectOptions);\n  const phrases = useSelector(selectPhrases);\n  const handleChange = (_, value) => {\n    const newOptions = {\n      ...options,\n      page: value,\n    };\n    dispatch(setOptions(newOptions));\n  };\n\n  const handleSearch = debounce((event) => {\n    dispatch(setOptions({ ...options, query: event.target.value }));\n  }, 500);\n\n  useEffect(() => {\n    dispatch(getPhrases(options));\n  }, [options]);\n\n  return (\n    <Grid container className={classes.body}>\n      <TextField id=\"search\" label=\"Search\" onChange={handleSearch} />\n      <Pagination\n        count={options.totalPage}\n        page={options.page}\n        onChange={handleChange}\n        showFirstButton\n        showLastButton\n      />\n      <AccordionPhraseList phrases={phrases} options={options} />\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AccordionPhraseList from 'features/phrase/components/PhraseList/list';\nimport { selectOptions, selectPhrases } from 'features/phrase/phraseSlice';\nimport AddPhrase from '../../components/AddPhrase';\nimport { addPhrase, getPhrases } from '../../phraseService';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: theme.spacing(1, 0, 0, 0),\n  },\n  form: {\n    width: '100%',\n    padding: theme.spacing(0, 0, 0, 2),\n  },\n  input: {\n    padding: theme.spacing(1, 0),\n    margin: theme.spacing(0.2, 0, 0, 0),\n  },\n}));\n\nexport default function AddPage() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const addPhraseAction = async (data) => {\n    dispatch(addPhrase(data));\n    dispatch(getPhrases({ limit: 50, page: 1 }));\n  };\n  const options = useSelector(selectOptions);\n  const phrases = useSelector(selectPhrases);\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n      className={classes.body}\n    >\n      <Grid container item xs={12} className={classes.form}>\n        <AddPhrase addPhrase={addPhraseAction} />\n      </Grid>\n      <Grid container item xs={12} className={classes.form}>\n        <AccordionPhraseList phrases={phrases} options={options} />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport NotFound from '../../components/NotFound';\nimport AuthRouter from '../../components/routers/AuthRouter';\nimport MainPage from './pages/Main';\nimport AddPhrase from './pages/Add';\n\nfunction Phrase() {\n  const match = useRouteMatch();\n  return (\n    <Switch>\n      <Route exact path={match.url} component={MainPage} />\n      <AuthRouter path={`${match.url}/new`} component={AddPhrase} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nPhrase.propTypes = {};\n\nexport default Phrase;\n"],"sourceRoot":""}