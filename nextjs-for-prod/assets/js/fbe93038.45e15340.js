"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1133],{4335:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"testing","title":"Testing","description":"This document covers the comprehensive testing strategy used in the Next.js for Production project, including unit tests, integration tests, end-to-end tests, and performance testing.","source":"@site/docs/testing.md","sourceDirName":".","slug":"/testing","permalink":"/nextjs-for-prod/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/nextjs-for-prod/tree/main/docs-site/docs/testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Features","permalink":"/nextjs-for-prod/docs/features"},"next":{"title":"Deployment","permalink":"/nextjs-for-prod/docs/deployment"}}');var i=t(5813),r=t(7814);const a={},o="Testing",l={},c=[{value:"Testing Philosophy",id:"testing-philosophy",level:2},{value:"Testing Stack",id:"testing-stack",level:2},{value:"Unit &amp; Integration Testing",id:"unit--integration-testing",level:3},{value:"End-to-End Testing",id:"end-to-end-testing",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Component Testing",id:"component-testing",level:3},{value:"Hook Testing",id:"hook-testing",level:3},{value:"Utility Function Testing",id:"utility-function-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"API Route Testing",id:"api-route-testing",level:3},{value:"Database Integration Testing",id:"database-integration-testing",level:3},{value:"End-to-End Testing",id:"end-to-end-testing-1",level:2},{value:"Authentication Flow Testing",id:"authentication-flow-testing",level:3},{value:"Calendar Feature Testing",id:"calendar-feature-testing",level:3},{value:"Library Search Testing",id:"library-search-testing",level:3},{value:"Performance Testing",id:"performance-testing-1",level:2},{value:"Load Testing Configuration",id:"load-testing-configuration",level:3},{value:"Performance Metrics Testing",id:"performance-metrics-testing",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Unit &amp; Integration Tests",id:"unit--integration-tests",level:3},{value:"End-to-End Tests",id:"end-to-end-tests",level:3},{value:"Performance Tests",id:"performance-tests",level:3},{value:"Test Configuration",id:"test-configuration",level:2},{value:"Vitest Configuration",id:"vitest-configuration",level:3},{value:"Playwright Configuration",id:"playwright-configuration",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"1. Test Structure",id:"1-test-structure",level:3},{value:"2. Test Naming",id:"2-test-naming",level:3},{value:"3. Test Independence",id:"3-test-independence",level:3},{value:"4. Mock External Dependencies",id:"4-mock-external-dependencies",level:3},{value:"5. Test Data Management",id:"5-test-data-management",level:3},{value:"6. Assertion Quality",id:"6-assertion-quality",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Debugging Tests",id:"debugging-tests",level:2},{value:"Unit Test Debugging",id:"unit-test-debugging",level:3},{value:"E2E Test Debugging",id:"e2e-test-debugging",level:3},{value:"Performance Test Debugging",id:"performance-test-debugging",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsx)(n.p,{children:"This document covers the comprehensive testing strategy used in the Next.js for Production project, including unit tests, integration tests, end-to-end tests, and performance testing."}),"\n",(0,i.jsx)(n.h2,{id:"testing-philosophy",children:"Testing Philosophy"}),"\n",(0,i.jsx)(n.p,{children:"Our testing approach follows the testing pyramid:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Tests (70%)"}),": Fast, isolated tests for individual components and functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Tests (20%)"}),": Tests for component interactions and API endpoints"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"End-to-End Tests (10%)"}),": Full user journey tests across the entire application"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-stack",children:"Testing Stack"}),"\n",(0,i.jsx)(n.h3,{id:"unit--integration-testing",children:"Unit & Integration Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vitest"}),": Modern testing framework with TypeScript support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Library"}),": Component testing utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MSW"}),": API mocking for isolated tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"jsdom"}),": Browser environment simulation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"end-to-end-testing",children:"End-to-End Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Playwright"}),": Cross-browser E2E testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Helpers"}),": Reusable test utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual Regression"}),": Screenshot comparison testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Artillery"}),": Load and performance testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lighthouse CI"}),": Performance metrics automation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(n.h3,{id:"component-testing",children:"Component Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Button component test\nimport { render, screen } from '@testing-library/react';\nimport { Button } from '@/components/atoms/Button';\n\ndescribe('Button', () => {\n  it('renders with correct text', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  it('handles click events', () => {\n    const handleClick = vi.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    screen.getByText('Click me').click();\n    expect(handleClick).toHaveBeenCalledOnce();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"hook-testing",children:"Hook Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Custom hook test\nimport { renderHook } from '@testing-library/react';\nimport { useAuth } from '@/hooks/useAuth';\n\ndescribe('useAuth', () => {\n  it('returns user when authenticated', () => {\n    const { result } = renderHook(() => useAuth());\n    \n    expect(result.current.user).toBeDefined();\n    expect(result.current.isAuthenticated).toBe(true);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"utility-function-testing",children:"Utility Function Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Utility function test\nimport { formatDate } from '@/utils/date';\n\ndescribe('formatDate', () => {\n  it('formats date correctly', () => {\n    const date = new Date('2024-01-15T10:30:00Z');\n    expect(formatDate(date)).toBe('Jan 15, 2024');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.h3,{id:"api-route-testing",children:"API Route Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: API route test\nimport { createMocks } from 'node-mocks-http';\nimport handler from '@/pages/api/users';\n\ndescribe('/api/users', () => {\n  it('returns users list', async () => {\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(res._getJSONData()).toEqual(\n      expect.objectContaining({\n        users: expect.any(Array),\n      })\n    );\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"database-integration-testing",children:"Database Integration Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Database integration test\nimport { createUser, getUser } from '@/lib/database/users';\n\ndescribe('User Database Operations', () => {\n  it('creates and retrieves user', async () => {\n    const userData = {\n      email: 'test@example.com',\n      name: 'Test User',\n    };\n\n    const createdUser = await createUser(userData);\n    expect(createdUser.id).toBeDefined();\n\n    const retrievedUser = await getUser(createdUser.id);\n    expect(retrievedUser.email).toBe(userData.email);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"end-to-end-testing-1",children:"End-to-End Testing"}),"\n",(0,i.jsx)(n.h3,{id:"authentication-flow-testing",children:"Authentication Flow Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: E2E authentication test\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Authentication', () => {\n  test('user can sign up and login', async ({ page }) => {\n    // Navigate to signup page\n    await page.goto('/auth/signup');\n\n    // Fill signup form\n    await page.fill('[data-testid=\"email\"]', 'test@example.com');\n    await page.fill('[data-testid=\"password\"]', 'SecurePassword123!');\n    await page.click('[data-testid=\"signup-button\"]');\n\n    // Verify redirect to dashboard\n    await expect(page).toHaveURL('/dashboard');\n    await expect(page.locator('[data-testid=\"welcome-message\"]')).toBeVisible();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"calendar-feature-testing",children:"Calendar Feature Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Calendar E2E test\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Calendar', () => {\n  test('user can create and view events', async ({ page }) => {\n    await page.goto('/calendar');\n\n    // Create new event\n    await page.click('[data-testid=\"new-event-button\"]');\n    await page.fill('[data-testid=\"event-title\"]', 'Team Meeting');\n    await page.fill('[data-testid=\"event-description\"]', 'Weekly sync');\n    await page.click('[data-testid=\"save-event\"]');\n\n    // Verify event appears in calendar\n    await expect(page.locator('[data-testid=\"event-Team Meeting\"]')).toBeVisible();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"library-search-testing",children:"Library Search Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Library search E2E test\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Library Search', () => {\n  test('user can search for books', async ({ page }) => {\n    await page.goto('/library');\n\n    // Perform search\n    await page.fill('[data-testid=\"search-input\"]', 'JavaScript');\n    await page.press('[data-testid=\"search-input\"]', 'Enter');\n\n    // Verify search results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"book-item\"]').first()).toBeVisible();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-testing-1",children:"Performance Testing"}),"\n",(0,i.jsx)(n.h3,{id:"load-testing-configuration",children:"Load Testing Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# performance-test/config.yaml\nconfig:\n  target: \'http://localhost:3000\'\n  phases:\n    - duration: 60\n      arrivalRate: 10\n    - duration: 120\n      arrivalRate: 50\n    - duration: 60\n      arrivalRate: 10\n\nscenarios:\n  - name: "Homepage Load Test"\n    weight: 50\n    flow:\n      - get:\n          url: "/"\n      - think: 2\n\n  - name: "Authentication Flow"\n    weight: 30\n    flow:\n      - post:\n          url: "/api/auth/signin"\n          json:\n            email: "test@example.com"\n            password: "password123"\n      - get:\n          url: "/dashboard"\n\n  - name: "Search Performance"\n    weight: 20\n    flow:\n      - get:\n          url: "/api/search"\n          qs:\n            q: "javascript"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-metrics-testing",children:"Performance Metrics Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example: Performance test\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Performance', () => {\n  test('homepage loads within acceptable time', async ({ page }) => {\n    const startTime = Date.now();\n    \n    await page.goto('/');\n    await page.waitForLoadState('networkidle');\n    \n    const loadTime = Date.now() - startTime;\n    expect(loadTime).toBeLessThan(3000); // 3 seconds max\n  });\n\n  test('search results load quickly', async ({ page }) => {\n    await page.goto('/library');\n    \n    const startTime = Date.now();\n    await page.fill('[data-testid=\"search-input\"]', 'JavaScript');\n    await page.press('[data-testid=\"search-input\"]', 'Enter');\n    await page.waitForSelector('[data-testid=\"search-results\"]');\n    \n    const searchTime = Date.now() - startTime;\n    expect(searchTime).toBeLessThan(1000); // 1 second max\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"unit--integration-tests",children:"Unit & Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\npnpm test\n\n# Run tests in watch mode\npnpm test:watch\n\n# Run tests with coverage\npnpm test:coverage\n\n# Run specific test file\npnpm test src/components/Button.test.tsx\n"})}),"\n",(0,i.jsx)(n.h3,{id:"end-to-end-tests",children:"End-to-End Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all E2E tests\npnpm test:e2e\n\n# Run E2E tests with UI\npnpm test:e2e:ui\n\n# Run E2E tests in headed mode\npnpm test:e2e:headed\n\n# Debug E2E tests\npnpm test:e2e:debug\n\n# View test report\npnpm test:e2e:report\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-tests",children:"Performance Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run performance tests\npnpm test:performance\n\n# Run smoke tests\npnpm test:performance:smoke\n\n# Run all test types\npnpm test:all\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"vitest-configuration",children:"Vitest Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// vitest.config.mts\nimport { defineConfig } from 'vitest/config';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./src/tests/setup.ts'],\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'src/tests/',\n        '**/*.d.ts',\n        '**/*.config.*',\n      ],\n    },\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"playwright-configuration",children:"Playwright Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// playwright.config.ts\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './e2e-tests',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  use: {\n    baseURL: 'http://localhost:3000',\n    trace: 'on-first-retry',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n  webServer: {\n    command: 'pnpm dev',\n    port: 3000,\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-structure",children:"1. Test Structure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Arrange"}),": Set up test data and conditions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Act"}),": Execute the code being tested"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Assert"}),": Verify the expected outcome"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-test-naming",children:"2. Test Naming"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use descriptive test names that explain the scenario"}),"\n",(0,i.jsx)(n.li,{children:'Follow the pattern: "should [expected behavior] when [condition]"'}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-test-independence",children:"3. Test Independence"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each test should be independent and not rely on other tests"}),"\n",(0,i.jsx)(n.li,{children:"Use proper setup and teardown for test isolation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-mock-external-dependencies",children:"4. Mock External Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mock API calls, database operations, and third-party services"}),"\n",(0,i.jsx)(n.li,{children:"Use MSW for API mocking in tests"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-test-data-management",children:"5. Test Data Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use factories or fixtures for test data generation"}),"\n",(0,i.jsx)(n.li,{children:"Keep test data minimal and focused on the test scenario"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"6-assertion-quality",children:"6. Assertion Quality"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use specific assertions rather than generic ones"}),"\n",(0,i.jsx)(n.li,{children:"Test behavior, not implementation details"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: pnpm install\n      - run: pnpm test:coverage\n\n  e2e-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: pnpm install\n      - run: pnpm test:e2e\n\n  performance-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: pnpm install\n      - run: pnpm test:performance:smoke\n"})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,i.jsx)(n.h3,{id:"unit-test-debugging",children:"Unit Test Debugging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"vi.only()"})," to run single tests"]}),"\n",(0,i.jsx)(n.li,{children:"Add console.log statements for debugging"}),"\n",(0,i.jsx)(n.li,{children:"Use VS Code debugger with breakpoints"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"e2e-test-debugging",children:"E2E Test Debugging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Run tests in headed mode: ",(0,i.jsx)(n.code,{children:"pnpm test:e2e:headed"})]}),"\n",(0,i.jsxs)(n.li,{children:["Use Playwright's debug mode: ",(0,i.jsx)(n.code,{children:"pnpm test:e2e:debug"})]}),"\n",(0,i.jsx)(n.li,{children:"Add screenshots and videos for failing tests"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-test-debugging",children:"Performance Test Debugging"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check Artillery reports for bottlenecks"}),"\n",(0,i.jsx)(n.li,{children:"Monitor server resources during tests"}),"\n",(0,i.jsx)(n.li,{children:"Use profiling tools for detailed analysis"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more detailed testing guides, see the individual test files in the ",(0,i.jsx)(n.code,{children:"tests/"})," and ",(0,i.jsx)(n.code,{children:"e2e-tests/"})," directories."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(9729);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);