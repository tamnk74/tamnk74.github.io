"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[4505],{2252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"architecture-process-template","title":"Architecture Process Template for NestJS & Next.js Microservices and Microfrontends","description":"Overview","source":"@site/docs/architecture-process-template.md","sourceDirName":".","slug":"/architecture-process-template","permalink":"/fullstack-dev/docs/architecture-process-template","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-process-template.md","tags":[],"version":"current","frontMatter":{}}');var i=t(5813),r=t(7814);const a={},c="Architecture Process Template for NestJS & Next.js Microservices and Microfrontends",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Architecture Foundation",id:"architecture-foundation",level:2},{value:"1. Architecture Definition &amp; Documentation",id:"1-architecture-definition--documentation",level:3},{value:"2. Source Control Management (SCM)",id:"2-source-control-management-scm",level:3},{value:"Technology Stack",id:"technology-stack",level:2},{value:"Backend - NestJS Microservices",id:"backend---nestjs-microservices",level:3},{value:"Frontend - Next.js Microfrontends",id:"frontend---nextjs-microfrontends",level:3},{value:"Development Process",id:"development-process",level:2},{value:"1. Sprint Planning &amp; Technical Refinement",id:"1-sprint-planning--technical-refinement",level:3},{value:"2. Code Quality Standards",id:"2-code-quality-standards",level:3},{value:"Microservices Architecture",id:"microservices-architecture",level:2},{value:"1. Service Design Principles",id:"1-service-design-principles",level:3},{value:"2. Service Mesh Configuration",id:"2-service-mesh-configuration",level:3},{value:"3. Database per Service Pattern",id:"3-database-per-service-pattern",level:3},{value:"Microfrontend Architecture",id:"microfrontend-architecture",level:2},{value:"1. Module Federation Setup",id:"1-module-federation-setup",level:3},{value:"2. Microfrontend Communication",id:"2-microfrontend-communication",level:3},{value:"3. Routing Strategy",id:"3-routing-strategy",level:3},{value:"Quality Assurance",id:"quality-assurance",level:2},{value:"1. Testing Strategy",id:"1-testing-strategy",level:3},{value:"2. Contract Testing",id:"2-contract-testing",level:3},{value:"3. End-to-End Testing",id:"3-end-to-end-testing",level:3},{value:"DevOps &amp; Deployment",id:"devops--deployment",level:2},{value:"1. CI/CD Pipeline",id:"1-cicd-pipeline",level:3},{value:"2. Container Configuration",id:"2-container-configuration",level:3},{value:"3. Kubernetes Deployment",id:"3-kubernetes-deployment",level:3},{value:"Monitoring &amp; Observability",id:"monitoring--observability",level:2},{value:"1. Application Monitoring",id:"1-application-monitoring",level:3},{value:"2. Logging Strategy",id:"2-logging-strategy",level:3},{value:"3. Health Checks",id:"3-health-checks",level:3},{value:"Security &amp; Compliance",id:"security--compliance",level:2},{value:"1. Authentication &amp; Authorization",id:"1-authentication--authorization",level:3},{value:"2. Security Headers &amp; CORS",id:"2-security-headers--cors",level:3},{value:"3. Input Validation &amp; Sanitization",id:"3-input-validation--sanitization",level:3},{value:"Maturity Assessment Checklist",id:"maturity-assessment-checklist",level:2},{value:"Level 1 - Basic Setup",id:"level-1---basic-setup",level:3},{value:"Level 2 - Process Standardization",id:"level-2---process-standardization",level:3},{value:"Level 3 - Automation &amp; Integration",id:"level-3---automation--integration",level:3},{value:"Level 4 - Advanced Practices",id:"level-4---advanced-practices",level:3},{value:"Level 5 - Excellence &amp; Innovation",id:"level-5---excellence--innovation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture-process-template-for-nestjs--nextjs-microservices-and-microfrontends",children:"Architecture Process Template for NestJS & Next.js Microservices and Microfrontends"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This document provides a comprehensive architecture process template for building scalable applications using NestJS for backend microservices and Next.js for microfrontend architecture. Based on enterprise architecture maturity assessment practices, this template ensures proper development practices, DevOps integration, and quality assurance."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#architecture-foundation",children:"Architecture Foundation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#technology-stack",children:"Technology Stack"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#development-process",children:"Development Process"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#microservices-architecture",children:"Microservices Architecture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#microfrontend-architecture",children:"Microfrontend Architecture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#quality-assurance",children:"Quality Assurance"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#devops--deployment",children:"DevOps & Deployment"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#monitoring--observability",children:"Monitoring & Observability"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#security--compliance",children:"Security & Compliance"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#maturity-assessment-checklist",children:"Maturity Assessment Checklist"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-foundation",children:"Architecture Foundation"}),"\n",(0,i.jsx)(n.h3,{id:"1-architecture-definition--documentation",children:"1. Architecture Definition & Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"C4 Model Implementation"}),": Use Context, Container, Component, and Code diagrams"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Architecture Decision Records (ADRs)"}),": Document all significant technical decisions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Documentation"}),": OpenAPI/Swagger specifications for all services"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Dependency Mapping"}),": Clear visualization of inter-service relationships"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-source-control-management-scm",children:"2. Source Control Management (SCM)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'Branch Strategy:\n  main: Production-ready code\n  develop: Integration branch for features\n  feature/*: Individual feature development\n  hotfix/*: Emergency production fixes\n  release/*: Release preparation\n\nCommit Convention:\n  format: "type(scope): description"\n  types: [feat, fix, docs, style, refactor, test, chore]\n  \nPull Request Rules:\n  - Minimum 2 reviewers\n  - Automated tests must pass\n  - Code coverage >= 80%\n  - Security scan approval\n'})}),"\n",(0,i.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsx)(n.h3,{id:"backend---nestjs-microservices",children:"Backend - NestJS Microservices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Core Dependencies\n{\n  "@nestjs/core": "^10.0.0",\n  "@nestjs/common": "^10.0.0",\n  "@nestjs/microservices": "^10.0.0",\n  "@nestjs/swagger": "^7.0.0",\n  "@nestjs/jwt": "^10.0.0",\n  "@nestjs/passport": "^10.0.0",\n  "@nestjs/typeorm": "^10.0.0",\n  "@nestjs/config": "^3.0.0",\n  "@nestjs/cache-manager": "^2.0.0",\n  "@nestjs/bull": "^10.0.0"\n}\n\n// Service Communication\n{\n  "@nestjs/microservices": "TCP/Redis/RabbitMQ",\n  "@grpc/grpc-js": "gRPC communication",\n  "amqplib": "Message queuing"\n}\n\n// Database & ORM\n{\n  "typeorm": "^0.3.0",\n  "pg": "PostgreSQL driver",\n  "redis": "^4.0.0",\n  "mongodb": "MongoDB driver"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"frontend---nextjs-microfrontends",children:"Frontend - Next.js Microfrontends"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Core Dependencies\n{\n  "next": "^14.0.0",\n  "react": "^18.0.0",\n  "react-dom": "^18.0.0",\n  "@module-federation/nextjs-mf": "^7.0.0"\n}\n\n// State Management & Communication\n{\n  "@reduxjs/toolkit": "^1.9.0",\n  "react-redux": "^8.0.0",\n  "swr": "^2.0.0",\n  "axios": "^1.0.0"\n}\n\n// UI & Styling\n{\n  "tailwindcss": "^3.0.0",\n  "@headlessui/react": "^1.7.0",\n  "framer-motion": "^10.0.0"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"development-process",children:"Development Process"}),"\n",(0,i.jsx)(n.h3,{id:"1-sprint-planning--technical-refinement",children:"1. Sprint Planning & Technical Refinement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Technical Refinement Process (Sprint N-1)\n1. **Requirements Analysis**\n   - Business story breakdown\n   - Non-functional requirements identification\n   - API contract definition\n\n2. **Technical Design**\n   - Service boundaries definition\n   - Database schema design\n   - Frontend component architecture\n   - Integration patterns\n\n3. **Estimation & Planning**\n   - Story point estimation\n   - Technical debt identification\n   - Risk assessment\n\n## Sprint Execution (Sprint N)\n1. **Development Standards**\n   - Test-driven development (TDD)\n   - Code review requirements\n   - Documentation updates\n\n2. **Integration Testing**\n   - Contract testing between services\n   - End-to-end testing\n   - Performance validation\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-code-quality-standards",children:"2. Code Quality Standards"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// ESLint Configuration\n{\n  "extends": [\n    "@nestjs",\n    "prettier",\n    "eslint:recommended",\n    "@typescript-eslint/recommended"\n  ],\n  "rules": {\n    "complexity": ["error", 10],\n    "max-lines-per-function": ["error", 50],\n    "no-duplicate-imports": "error"\n  }\n}\n\n// Jest Configuration\n{\n  "testCoverage": {\n    "threshold": {\n      "global": {\n        "branches": 80,\n        "functions": 80,\n        "lines": 80,\n        "statements": 80\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"1-service-design-principles",children:"1. Service Design Principles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Example NestJS Microservice Structure\nsrc/\n\u251c\u2500\u2500 common/           # Shared utilities, decorators, filters\n\u251c\u2500\u2500 config/          # Configuration management\n\u251c\u2500\u2500 modules/         # Business logic modules\n\u2502   \u251c\u2500\u2500 user/\n\u2502   \u251c\u2500\u2500 order/\n\u2502   \u2514\u2500\u2500 payment/\n\u251c\u2500\u2500 shared/          # Shared services (database, cache, etc.)\n\u251c\u2500\u2500 infrastructure/  # External service integrations\n\u2514\u2500\u2500 main.ts         # Application bootstrap\n\n// Service Communication Pattern\n@Controller('users')\nexport class UserController {\n  constructor(\n    @Inject('ORDER_SERVICE') private orderService: ClientProxy,\n    @Inject('PAYMENT_SERVICE') private paymentService: ClientProxy\n  ) {}\n\n  @Get(':id/orders')\n  async getUserOrders(@Param('id') userId: string) {\n    return this.orderService.send('get_user_orders', { userId });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-service-mesh-configuration",children:"2. Service Mesh Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Istio Service Mesh Configuration\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: user-service\nspec:\n  http:\n  - match:\n    - uri:\n        prefix: "/api/users"\n    route:\n    - destination:\n        host: user-service\n        port:\n          number: 3000\n    fault:\n      delay:\n        percentage:\n          value: 0.1\n        fixedDelay: 5s\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-database-per-service-pattern",children:"3. Database per Service Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// User Service Database\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  hashedPassword: string;\n}\n\n// Order Service Database\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  userId: string; // Reference to User service\n\n  @Column('decimal')\n  totalAmount: number;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"microfrontend-architecture",children:"Microfrontend Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"1-module-federation-setup",children:"1. Module Federation Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Shell Application (Host)\nconst NextFederationPlugin = require('@module-federation/nextjs-mf');\n\nmodule.exports = {\n  plugins: [\n    new NextFederationPlugin({\n      name: 'shell',\n      remotes: {\n        userMfe: 'userMfe@http://localhost:3001/_next/static/chunks/remoteEntry.js',\n        orderMfe: 'orderMfe@http://localhost:3002/_next/static/chunks/remoteEntry.js',\n      },\n    }),\n  ],\n};\n\n// Remote Application\nconst NextFederationPlugin = require('@module-federation/nextjs-mf');\n\nmodule.exports = {\n  plugins: [\n    new NextFederationPlugin({\n      name: 'userMfe',\n      filename: 'static/chunks/remoteEntry.js',\n      exposes: {\n        './UserDashboard': './components/UserDashboard',\n        './UserProfile': './components/UserProfile',\n      },\n    }),\n  ],\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-microfrontend-communication",children:"2. Microfrontend Communication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Event Bus for Inter-MFE Communication\nclass EventBus {\n  private events: Map<string, Function[]> = new Map();\n\n  subscribe(event: string, callback: Function) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event)!.push(callback);\n  }\n\n  publish(event: string, data: any) {\n    if (this.events.has(event)) {\n      this.events.get(event)!.forEach(callback => callback(data));\n    }\n  }\n}\n\n// Shared State Management\nimport { configureStore } from '@reduxjs/toolkit';\n\nexport const createSharedStore = () => {\n  return configureStore({\n    reducer: {\n      user: userReducer,\n      cart: cartReducer,\n      notifications: notificationReducer,\n    },\n  });\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-routing-strategy",children:"3. Routing Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Shell Application Router\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Suspense } from 'react';\n\nconst UserMfe = React.lazy(() => import('userMfe/UserDashboard'));\nconst OrderMfe = React.lazy(() => import('orderMfe/OrderHistory'));\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/user/*\" element={\n          <Suspense fallback={<div>Loading...</div>}>\n            <UserMfe />\n          </Suspense>\n        } />\n        <Route path=\"/orders/*\" element={\n          <Suspense fallback={<div>Loading...</div>}>\n            <OrderMfe />\n          </Suspense>\n        } />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quality-assurance",children:"Quality Assurance"}),"\n",(0,i.jsx)(n.h3,{id:"1-testing-strategy",children:"1. Testing Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Unit Testing (Jest)\ndescribe('UserService', () => {\n  let service: UserService;\n  \n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      providers: [UserService],\n    }).compile();\n    \n    service = module.get<UserService>(UserService);\n  });\n\n  it('should create a user', async () => {\n    const userData = { email: 'test@example.com', password: 'password123' };\n    const result = await service.createUser(userData);\n    expect(result.email).toBe(userData.email);\n  });\n});\n\n// Integration Testing\ndescribe('User API', () => {\n  let app: INestApplication;\n\n  beforeAll(async () => {\n    const module = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = module.createNestApplication();\n    await app.init();\n  });\n\n  it('/users (POST)', () => {\n    return request(app.getHttpServer())\n      .post('/users')\n      .send({ email: 'test@example.com', password: 'password123' })\n      .expect(201);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-contract-testing",children:"2. Contract Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Pact Contract Testing\nimport { Pact } from '@pact-foundation/pact';\n\ndescribe('User Service Contract', () => {\n  const provider = new Pact({\n    consumer: 'order-service',\n    provider: 'user-service',\n  });\n\n  it('should get user by id', async () => {\n    await provider\n      .given('user exists')\n      .uponReceiving('a request for user')\n      .withRequest({\n        method: 'GET',\n        path: '/users/123',\n      })\n      .willRespondWith({\n        status: 200,\n        body: {\n          id: '123',\n          email: 'user@example.com',\n        },\n      });\n\n    await provider.verify();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-end-to-end-testing",children:"3. End-to-End Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Playwright E2E Testing\nimport { test, expect } from '@playwright/test';\n\ntest('user can place an order', async ({ page }) => {\n  await page.goto('/login');\n  await page.fill('[data-testid=email]', 'user@example.com');\n  await page.fill('[data-testid=password]', 'password123');\n  await page.click('[data-testid=login-button]');\n\n  await page.goto('/products');\n  await page.click('[data-testid=add-to-cart]');\n  await page.goto('/checkout');\n  await page.click('[data-testid=place-order]');\n\n  await expect(page).toHaveURL('/order-confirmation');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"devops--deployment",children:"DevOps & Deployment"}),"\n",(0,i.jsx)(n.h3,{id:"1-cicd-pipeline",children:"1. CI/CD Pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions Workflow\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: npm ci\n      - run: npm run test:unit\n      - run: npm run test:integration\n      - run: npm run test:e2e\n\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npm audit\n      - run: npm run test:security\n\n  build:\n    needs: [test, security]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: docker build -t app:${{ github.sha }} .\n      - run: docker push app:${{ github.sha }}\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - run: kubectl set image deployment/app app=app:${{ github.sha }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-container-configuration",children:"2. Container Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'# NestJS Microservice Dockerfile\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nestjs -u 1001\nWORKDIR /app\nCOPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules\nCOPY --chown=nestjs:nodejs . .\nUSER nestjs\nEXPOSE 3000\nCMD ["node", "dist/main"]\n\n# Next.js Microfrontend Dockerfile\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine AS runtime\nWORKDIR /app\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\nEXPOSE 3000\nCMD ["node", "server.js"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-kubernetes-deployment",children:"3. Kubernetes Deployment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Service Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n    spec:\n      containers:\n      - name: user-service\n        image: user-service:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\nspec:\n  selector:\n    app: user-service\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: user-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: user-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n'})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring--observability",children:"Monitoring & Observability"}),"\n",(0,i.jsx)(n.h3,{id:"1-application-monitoring",children:"1. Application Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Prometheus Metrics\nimport { makeCounterProvider, makeHistogramProvider } from '@willsoto/nestjs-prometheus';\n\n@Module({\n  imports: [\n    PrometheusModule.register({\n      defaultMetrics: {\n        enabled: true,\n      },\n    }),\n  ],\n  providers: [\n    makeCounterProvider({\n      name: 'http_requests_total',\n      help: 'Total number of HTTP requests',\n      labelNames: ['method', 'route', 'status'],\n    }),\n    makeHistogramProvider({\n      name: 'http_request_duration_seconds',\n      help: 'Duration of HTTP requests in seconds',\n      labelNames: ['method', 'route'],\n    }),\n  ],\n})\nexport class MetricsModule {}\n\n// Distributed Tracing\nimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\nimport { NodeSDK } from '@opentelemetry/auto-instrumentations-node';\n\nconst sdk = new NodeSDK({\n  traceExporter: new JaegerExporter({\n    endpoint: 'http://jaeger:14268/api/traces',\n  }),\n});\n\nsdk.start();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-logging-strategy",children:"2. Logging Strategy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Structured Logging\nimport { Logger } from '@nestjs/common';\n\n@Injectable()\nexport class AppLogger extends Logger {\n  log(message: string, context?: string, meta?: any) {\n    super.log({\n      timestamp: new Date().toISOString(),\n      level: 'info',\n      message,\n      context,\n      traceId: this.getTraceId(),\n      ...meta,\n    });\n  }\n\n  error(message: string, trace?: string, context?: string, meta?: any) {\n    super.error({\n      timestamp: new Date().toISOString(),\n      level: 'error',\n      message,\n      trace,\n      context,\n      traceId: this.getTraceId(),\n      ...meta,\n    });\n  }\n\n  private getTraceId(): string {\n    // Extract trace ID from OpenTelemetry\n    return trace.getActiveSpan()?.spanContext().traceId || 'unknown';\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-health-checks",children:"3. Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Health Check Implementation\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () => this.checkRedis(),\n      () => this.checkExternalAPI(),\n    ]);\n  }\n\n  private async checkRedis() {\n    // Redis health check implementation\n  }\n\n  private async checkExternalAPI() {\n    // External API health check implementation\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security--compliance",children:"Security & Compliance"}),"\n",(0,i.jsx)(n.h3,{id:"1-authentication--authorization",children:"1. Authentication & Authorization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// JWT Strategy\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n      email: payload.email,\n      roles: payload.roles,\n    };\n  }\n}\n\n// RBAC Guard\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-security-headers--cors",children:"2. Security Headers & CORS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Security Configuration\nimport helmet from 'helmet';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  \n  // Security headers\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      },\n    },\n  }));\n\n  // CORS configuration\n  app.enableCors({\n    origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],\n    credentials: true,\n  });\n\n  // Rate limiting\n  app.use(rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n  }));\n\n  await app.listen(3000);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-input-validation--sanitization",children:"3. Input Validation & Sanitization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// DTO Validation\nimport { IsEmail, IsString, MinLength, IsUUID } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport DOMPurify from 'dompurify';\n\nexport class CreateUserDto {\n  @IsEmail()\n  @Transform(({ value }) => DOMPurify.sanitize(value))\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @Transform(({ value }) => DOMPurify.sanitize(value))\n  firstName: string;\n\n  @IsString()\n  @Transform(({ value }) => DOMPurify.sanitize(value))\n  lastName: string;\n}\n\n// Global Validation Pipe\napp.useGlobalPipes(\n  new ValidationPipe({\n    whitelist: true,\n    forbidNonWhitelisted: true,\n    transform: true,\n  }),\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"maturity-assessment-checklist",children:"Maturity Assessment Checklist"}),"\n",(0,i.jsx)(n.h3,{id:"level-1---basic-setup",children:"Level 1 - Basic Setup"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","SCM policy defined and documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Development environment setup documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Coding conventions documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code style tools configured (ESLint, Prettier)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Basic architecture foundation documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Backup/restore strategy defined"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","3rd party APIs/libraries documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Input validation implemented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Communication channels established"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"level-2---process-standardization",children:"Level 2 - Process Standardization"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Pull request process documented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Technical documentation maintained"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Unit testing process defined"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","NFR template usage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Technical refinement process"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Environment configuration externalized"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","CI/CD pipelines automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Database versioning implemented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code quality measured"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"level-3---automation--integration",children:"Level 3 - Automation & Integration"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Test automation strategy implemented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Static code analysis integrated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Performance testing automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Security testing integrated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Database changes automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Environment provisioning automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Monitoring tools implemented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code coverage targets met"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"level-4---advanced-practices",children:"Level 4 - Advanced Practices"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","GitOps implementation"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Infrastructure as Code"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Centralized logging"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Auto-scaling configured"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Business monitoring implemented"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Multi-functional team capability"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Smoke testing automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Technical debt managed"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"level-5---excellence--innovation",children:"Level 5 - Excellence & Innovation"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Deployment strategies implemented (Blue/Green, Canary)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Lead time optimization (\u2264 1 sprint)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Self-healing infrastructure"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Knowledge sharing across organization"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Advanced security automation"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Performance continuously tested"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Business metrics automated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Stakeholder transparency achieved"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This architecture process template provides a comprehensive framework for building scalable, maintainable, and secure applications using NestJS and Next.js in a microservices and microfrontend architecture. Regular assessment against the maturity checklist ensures continuous improvement and adherence to best practices."}),"\n",(0,i.jsx)(n.p,{children:"Remember to adapt this template to your specific business requirements and organizational constraints while maintaining the core principles of modularity, scalability, and maintainability."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(9729);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);