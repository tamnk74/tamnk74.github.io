"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7139],{879:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"security-practices/security-implementation/security-awareness-training","title":"Security Awareness Training Implementation Guide","description":"This guide provides comprehensive security awareness training implementation for development teams working on NestJS/Next.js applications, covering OWASP Top 10, SANS CWE Top 25, and industry-specific compliance training.","source":"@site/docs/security-practices/security-implementation/security-awareness-training.md","sourceDirName":"security-practices/security-implementation","slug":"/security-practices/security-implementation/security-awareness-training","permalink":"/fullstack-dev/docs/security-practices/security-implementation/security-awareness-training","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/security-practices/security-implementation/security-awareness-training.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Incident Management Implementation Guide","permalink":"/fullstack-dev/docs/security-practices/security-implementation/incident-management"},"next":{"title":"Asset Management & Risk Assessment Implementation Guide","permalink":"/fullstack-dev/docs/security-practices/security-implementation/asset-management-risk-assessment"}}');var r=i(5813),s=i(7814);const a={},o="Security Awareness Training Implementation Guide",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Training Program Structure",id:"training-program-structure",level:2},{value:"Training Management System",id:"training-management-system",level:3},{value:"Training Scheduler",id:"training-scheduler",level:3},{value:"OWASP Top 10 Training",id:"owasp-top-10-training",level:2},{value:"OWASP Training Module Creator",id:"owasp-training-module-creator",level:3},{value:"SANS CWE Top 25 Training",id:"sans-cwe-top-25-training",level:2},{value:"CWE Training Module Creator",id:"cwe-training-module-creator",level:3},{value:"Industry-Specific Training",id:"industry-specific-training",level:2},{value:"Compliance Training Service",id:"compliance-training-service",level:3},{value:"Hands-On Security Labs",id:"hands-on-security-labs",level:2},{value:"Interactive Lab Platform",id:"interactive-lab-platform",level:3},{value:"Security Champions Program",id:"security-champions-program",level:2},{value:"Security Champions Management",id:"security-champions-management",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"security-awareness-training-implementation-guide",children:"Security Awareness Training Implementation Guide"})}),"\n",(0,r.jsx)(e.p,{children:"This guide provides comprehensive security awareness training implementation for development teams working on NestJS/Next.js applications, covering OWASP Top 10, SANS CWE Top 25, and industry-specific compliance training."}),"\n",(0,r.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#training-program-structure",children:"Training Program Structure"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#owasp-top-10-training",children:"OWASP Top 10 Training"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#sans-cwe-top-25-training",children:"SANS CWE Top 25 Training"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#industry-specific-training",children:"Industry-Specific Training"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#hands-on-security-labs",children:"Hands-On Security Labs"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"#security-champions-program",children:"Security Champions Program"})}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"training-program-structure",children:"Training Program Structure"}),"\n",(0,r.jsx)(e.h3,{id:"training-management-system",children:"Training Management System"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/training-management.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\ninterface TrainingModule {\n  id: string;\n  title: string;\n  category: 'OWASP' | 'CWE' | 'COMPLIANCE' | 'GENERAL';\n  level: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED';\n  duration: number; // minutes\n  prerequisites: string[];\n  objectives: string[];\n  content: TrainingContent[];\n  assessment: Assessment;\n  certification: boolean;\n}\n\ninterface TrainingContent {\n  type: 'VIDEO' | 'DOCUMENT' | 'LAB' | 'QUIZ' | 'DEMO';\n  title: string;\n  url: string;\n  duration: number;\n  description: string;\n}\n\ninterface Assessment {\n  type: 'QUIZ' | 'PRACTICAL' | 'PROJECT';\n  passingScore: number;\n  questions: Question[];\n  timeLimit: number;\n}\n\ninterface Question {\n  id: string;\n  type: 'MULTIPLE_CHOICE' | 'TRUE_FALSE' | 'CODE_REVIEW' | 'SCENARIO';\n  question: string;\n  options?: string[];\n  correctAnswer: string | string[];\n  explanation: string;\n}\n\ninterface UserProgress {\n  userId: string;\n  moduleId: string;\n  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'COMPLETED' | 'CERTIFIED';\n  score?: number;\n  completedDate?: Date;\n  certificateId?: string;\n  timeSpent: number;\n}\n\n@Injectable()\nexport class TrainingManagementService {\n  private readonly logger = new Logger(TrainingManagementService.name);\n  private readonly modules = new Map<string, TrainingModule>();\n  private readonly userProgress = new Map<string, UserProgress[]>();\n\n  constructor(private configService: ConfigService) {\n    this.initializeTrainingModules();\n  }\n\n  async enrollUser(userId: string, moduleId: string): Promise<void> {\n    const module = this.modules.get(moduleId);\n    if (!module) {\n      throw new Error(`Training module not found: ${moduleId}`);\n    }\n\n    const userProgressList = this.userProgress.get(userId) || [];\n    const existingProgress = userProgressList.find(p => p.moduleId === moduleId);\n\n    if (existingProgress) {\n      this.logger.warn(`User ${userId} already enrolled in module ${moduleId}`);\n      return;\n    }\n\n    const progress: UserProgress = {\n      userId,\n      moduleId,\n      status: 'NOT_STARTED',\n      timeSpent: 0,\n    };\n\n    userProgressList.push(progress);\n    this.userProgress.set(userId, userProgressList);\n\n    this.logger.log(`User ${userId} enrolled in training module: ${module.title}`);\n  }\n\n  async startModule(userId: string, moduleId: string): Promise<void> {\n    const progress = this.getUserProgress(userId, moduleId);\n    progress.status = 'IN_PROGRESS';\n    \n    this.logger.log(`User ${userId} started training module: ${moduleId}`);\n  }\n\n  async completeModule(userId: string, moduleId: string, score: number): Promise<void> {\n    const progress = this.getUserProgress(userId, moduleId);\n    const module = this.modules.get(moduleId);\n\n    if (!module) {\n      throw new Error(`Module not found: ${moduleId}`);\n    }\n\n    progress.score = score;\n    progress.completedDate = new Date();\n\n    if (score >= module.assessment.passingScore) {\n      progress.status = 'COMPLETED';\n      \n      if (module.certification) {\n        const certificateId = await this.issueCertificate(userId, moduleId);\n        progress.certificateId = certificateId;\n        progress.status = 'CERTIFIED';\n      }\n    }\n\n    this.logger.log(`User ${userId} completed module ${moduleId} with score: ${score}`);\n  }\n\n  async getTrainingPlan(userId: string, role: string): Promise<TrainingModule[]> {\n    const allModules = Array.from(this.modules.values());\n    \n    // Customize training plan based on user role\n    switch (role) {\n      case 'developer':\n        return allModules.filter(m => \n          m.category === 'OWASP' || \n          m.category === 'CWE' || \n          (m.category === 'COMPLIANCE' && m.level !== 'ADVANCED')\n        );\n      \n      case 'security-engineer':\n        return allModules; // All modules\n      \n      case 'devops':\n        return allModules.filter(m => \n          m.category === 'OWASP' || \n          m.title.includes('Infrastructure')\n        );\n      \n      default:\n        return allModules.filter(m => m.level === 'BEGINNER');\n    }\n  }\n\n  async generateTrainingReport(teamId: string): Promise<any> {\n    // Generate comprehensive training report for the team\n    const teamMembers = await this.getTeamMembers(teamId);\n    const report = {\n      teamId,\n      totalMembers: teamMembers.length,\n      completionRates: {},\n      averageScores: {},\n      certifications: 0,\n      overallProgress: 0,\n    };\n\n    // Calculate metrics\n    for (const member of teamMembers) {\n      const userProgressList = this.userProgress.get(member.id) || [];\n      // Calculate individual progress and aggregate\n    }\n\n    return report;\n  }\n\n  private getUserProgress(userId: string, moduleId: string): UserProgress {\n    const userProgressList = this.userProgress.get(userId) || [];\n    const progress = userProgressList.find(p => p.moduleId === moduleId);\n    \n    if (!progress) {\n      throw new Error(`User ${userId} not enrolled in module ${moduleId}`);\n    }\n    \n    return progress;\n  }\n\n  private async issueCertificate(userId: string, moduleId: string): Promise<string> {\n    const certificateId = `CERT-${userId}-${moduleId}-${Date.now()}`;\n    // Implementation to generate and store certificate\n    return certificateId;\n  }\n\n  private async getTeamMembers(teamId: string): Promise<any[]> {\n    // Implementation to get team members\n    return [];\n  }\n\n  private initializeTrainingModules(): void {\n    // Initialize all training modules\n    this.createOWASPModules();\n    this.createCWEModules();\n    this.createComplianceModules();\n  }\n\n  private createOWASPModules(): void {\n    // Will be implemented in the OWASP section\n  }\n\n  private createCWEModules(): void {\n    // Will be implemented in the CWE section\n  }\n\n  private createComplianceModules(): void {\n    // Will be implemented in the compliance section\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"training-scheduler",children:"Training Scheduler"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/training-scheduler.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\n\n@Injectable()\nexport class TrainingSchedulerService {\n  private readonly logger = new Logger(TrainingSchedulerService.name);\n\n  @Cron(CronExpression.EVERY_1ST_DAY_OF_MONTH_AT_MIDNIGHT)\n  async scheduleMonthlyTraining(): Promise<void> {\n    this.logger.log('Scheduling monthly security training sessions');\n    \n    // Schedule OWASP Top 10 monthly sessions\n    await this.scheduleOWASPTraining();\n    \n    // Schedule CWE awareness sessions\n    await this.scheduleCWETraining();\n    \n    // Schedule compliance training based on project requirements\n    await this.scheduleComplianceTraining();\n  }\n\n  @Cron(CronExpression.EVERY_WEEK_ON_FRIDAY_AT_2PM)\n  async generateWeeklyReports(): Promise<void> {\n    this.logger.log('Generating weekly training progress reports');\n    \n    // Generate team progress reports\n    await this.generateTeamReports();\n    \n    // Send training reminders\n    await this.sendTrainingReminders();\n  }\n\n  private async scheduleOWASPTraining(): Promise<void> {\n    // Implementation for scheduling OWASP training\n  }\n\n  private async scheduleCWETraining(): Promise<void> {\n    // Implementation for scheduling CWE training\n  }\n\n  private async scheduleComplianceTraining(): Promise<void> {\n    // Implementation for scheduling compliance training\n  }\n\n  private async generateTeamReports(): Promise<void> {\n    // Implementation for generating reports\n  }\n\n  private async sendTrainingReminders(): Promise<void> {\n    // Implementation for sending reminders\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"owasp-top-10-training",children:"OWASP Top 10 Training"}),"\n",(0,r.jsx)(e.h3,{id:"owasp-training-module-creator",children:"OWASP Training Module Creator"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/owasp-training.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class OWASPTrainingService {\n  createOWASPModules(): TrainingModule[] {\n    return [\n      {\n        id: 'owasp-injection',\n        title: 'OWASP A01: Injection Vulnerabilities',\n        category: 'OWASP',\n        level: 'BEGINNER',\n        duration: 90,\n        prerequisites: [],\n        objectives: [\n          'Understand injection vulnerability types',\n          'Learn to identify injection flaws in code',\n          'Implement prevention techniques in NestJS/Next.js',\n          'Use parameterized queries and input validation',\n        ],\n        content: [\n          {\n            type: 'VIDEO',\n            title: 'Introduction to Injection Attacks',\n            url: '/training/videos/injection-intro.mp4',\n            duration: 15,\n            description: 'Overview of injection vulnerabilities and their impact',\n          },\n          {\n            type: 'DOCUMENT',\n            title: 'SQL Injection Prevention Guide',\n            url: '/training/docs/sql-injection-prevention.pdf',\n            duration: 20,\n            description: 'Comprehensive guide to preventing SQL injection',\n          },\n          {\n            type: 'LAB',\n            title: 'Hands-on: Fixing SQL Injection in NestJS',\n            url: '/training/labs/nestjs-sql-injection',\n            duration: 45,\n            description: 'Interactive lab for fixing SQL injection vulnerabilities',\n          },\n          {\n            type: 'QUIZ',\n            title: 'Injection Vulnerabilities Assessment',\n            url: '/training/quiz/injection-quiz',\n            duration: 10,\n            description: 'Test your knowledge of injection prevention',\n          },\n        ],\n        assessment: {\n          type: 'PRACTICAL',\n          passingScore: 80,\n          timeLimit: 60,\n          questions: [\n            {\n              id: 'inj-001',\n              type: 'CODE_REVIEW',\n              question: 'Identify the SQL injection vulnerability in this NestJS controller method and provide a secure fix.',\n              correctAnswer: 'Use parameterized queries with TypeORM',\n              explanation: 'The vulnerable code constructs SQL queries with string concatenation. Use TypeORM\\'s query builder or parameterized queries instead.',\n            },\n            {\n              id: 'inj-002',\n              type: 'SCENARIO',\n              question: 'A user input field accepts search terms. How would you implement secure search functionality?',\n              correctAnswer: 'Validate input, use parameterized queries, implement whitelist filtering',\n              explanation: 'Implement input validation, use ORM query builders, and apply output encoding.',\n            },\n          ],\n        },\n        certification: true,\n      },\n      {\n        id: 'owasp-auth-failure',\n        title: 'OWASP A02: Broken Authentication',\n        category: 'OWASP',\n        level: 'INTERMEDIATE',\n        duration: 120,\n        prerequisites: ['owasp-injection'],\n        objectives: [\n          'Understand authentication vulnerabilities',\n          'Implement secure session management',\n          'Configure multi-factor authentication',\n          'Prevent brute force attacks',\n        ],\n        content: [\n          {\n            type: 'VIDEO',\n            title: 'Authentication Best Practices',\n            url: '/training/videos/auth-best-practices.mp4',\n            duration: 25,\n            description: 'Best practices for secure authentication',\n          },\n          {\n            type: 'LAB',\n            title: 'Implementing Secure Auth in NestJS',\n            url: '/training/labs/nestjs-secure-auth',\n            duration: 60,\n            description: 'Build secure authentication with JWT and MFA',\n          },\n          {\n            type: 'DEMO',\n            title: 'Session Management Demo',\n            url: '/training/demos/session-management',\n            duration: 20,\n            description: 'Demonstration of secure session management',\n          },\n        ],\n        assessment: {\n          type: 'PROJECT',\n          passingScore: 85,\n          timeLimit: 120,\n          questions: [\n            {\n              id: 'auth-001',\n              type: 'CODE_REVIEW',\n              question: 'Review this authentication implementation and identify security issues.',\n              correctAnswer: 'Missing rate limiting, weak password policy, no MFA',\n              explanation: 'The code lacks proper security controls for authentication.',\n            },\n          ],\n        },\n        certification: true,\n      },\n      // Additional OWASP modules...\n    ];\n  }\n\n  createOWASPLabs(): any[] {\n    return [\n      {\n        id: 'lab-sql-injection',\n        title: 'SQL Injection Lab',\n        description: 'Practice identifying and fixing SQL injection vulnerabilities',\n        environment: 'nestjs-vulnerable-app',\n        tasks: [\n          {\n            id: 'task-1',\n            title: 'Identify SQL Injection',\n            description: 'Find the SQL injection vulnerability in the user search feature',\n            code: `\n// Vulnerable code\nasync searchUsers(searchTerm: string) {\n  const query = \\`SELECT * FROM users WHERE name LIKE '%\\${searchTerm}%'\\`;\n  return await this.db.query(query);\n}`,\n            expectedFix: `\n// Secure code\nasync searchUsers(searchTerm: string) {\n  return await this.userRepository\n    .createQueryBuilder('user')\n    .where('user.name LIKE :searchTerm', { searchTerm: \\`%\\${searchTerm}%\\` })\n    .getMany();\n}`,\n          },\n          {\n            id: 'task-2',\n            title: 'Fix Authentication Bypass',\n            description: 'Secure the login endpoint against SQL injection',\n            code: `\n// Vulnerable login\nasync login(username: string, password: string) {\n  const query = \\`SELECT * FROM users WHERE username = '\\${username}' AND password = '\\${password}'\\`;\n  const user = await this.db.query(query);\n  return user.length > 0;\n}`,\n            expectedFix: `\n// Secure login\nasync login(username: string, password: string) {\n  const user = await this.userRepository.findOne({ \n    where: { username },\n    select: ['id', 'username', 'passwordHash']\n  });\n  \n  if (!user) return false;\n  \n  return await bcrypt.compare(password, user.passwordHash);\n}`,\n          },\n        ],\n      },\n      {\n        id: 'lab-xss-prevention',\n        title: 'XSS Prevention Lab',\n        description: 'Learn to prevent Cross-Site Scripting vulnerabilities',\n        environment: 'nextjs-vulnerable-app',\n        tasks: [\n          {\n            id: 'task-1',\n            title: 'Fix Reflected XSS',\n            description: 'Secure the search results page against XSS',\n            code: `\n// Vulnerable React component\nfunction SearchResults({ query, results }) {\n  return (\n    <div>\n      <h2>Results for: {query}</h2>\n      <div dangerouslySetInnerHTML={{ __html: results }} />\n    </div>\n  );\n}`,\n            expectedFix: `\n// Secure React component\nimport DOMPurify from 'dompurify';\n\nfunction SearchResults({ query, results }) {\n  const sanitizedQuery = DOMPurify.sanitize(query);\n  const sanitizedResults = DOMPurify.sanitize(results);\n  \n  return (\n    <div>\n      <h2>Results for: {sanitizedQuery}</h2>\n      <div dangerouslySetInnerHTML={{ __html: sanitizedResults }} />\n    </div>\n  );\n}`,\n          },\n        ],\n      },\n    ];\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"sans-cwe-top-25-training",children:"SANS CWE Top 25 Training"}),"\n",(0,r.jsx)(e.h3,{id:"cwe-training-module-creator",children:"CWE Training Module Creator"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/cwe-training.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CWETrainingService {\n  createCWEModules(): TrainingModule[] {\n    return [\n      {\n        id: 'cwe-79-xss',\n        title: 'CWE-79: Cross-Site Scripting (XSS)',\n        category: 'CWE',\n        level: 'BEGINNER',\n        duration: 75,\n        prerequisites: [],\n        objectives: [\n          'Understand XSS vulnerability types',\n          'Implement output encoding and input validation',\n          'Configure Content Security Policy (CSP)',\n          'Use React security best practices',\n        ],\n        content: [\n          {\n            type: 'VIDEO',\n            title: 'Understanding XSS Attacks',\n            url: '/training/videos/xss-explained.mp4',\n            duration: 20,\n            description: 'Types of XSS attacks and their impact',\n          },\n          {\n            type: 'LAB',\n            title: 'XSS Prevention in Next.js',\n            url: '/training/labs/nextjs-xss-prevention',\n            duration: 40,\n            description: 'Hands-on XSS prevention techniques',\n          },\n          {\n            type: 'DOCUMENT',\n            title: 'CSP Implementation Guide',\n            url: '/training/docs/csp-guide.pdf',\n            duration: 15,\n            description: 'Implementing Content Security Policy',\n          },\n        ],\n        assessment: {\n          type: 'QUIZ',\n          passingScore: 80,\n          timeLimit: 30,\n          questions: [\n            {\n              id: 'cwe79-001',\n              type: 'MULTIPLE_CHOICE',\n              question: 'Which React feature helps prevent XSS by default?',\n              options: [\n                'dangerouslySetInnerHTML',\n                'JSX auto-escaping',\n                'useEffect hook',\n                'useState hook',\n              ],\n              correctAnswer: 'JSX auto-escaping',\n              explanation: 'React JSX automatically escapes values, preventing XSS attacks.',\n            },\n          ],\n        },\n        certification: false,\n      },\n      {\n        id: 'cwe-89-sql-injection',\n        title: 'CWE-89: SQL Injection',\n        category: 'CWE',\n        level: 'BEGINNER',\n        duration: 90,\n        prerequisites: [],\n        objectives: [\n          'Understand SQL injection mechanisms',\n          'Use parameterized queries and ORMs',\n          'Implement input validation',\n          'Apply least privilege principles',\n        ],\n        content: [\n          {\n            type: 'VIDEO',\n            title: 'SQL Injection Deep Dive',\n            url: '/training/videos/sql-injection-deep-dive.mp4',\n            duration: 25,\n            description: 'Detailed explanation of SQL injection attacks',\n          },\n          {\n            type: 'LAB',\n            title: 'TypeORM Security Lab',\n            url: '/training/labs/typeorm-security',\n            duration: 50,\n            description: 'Secure database access with TypeORM',\n          },\n        ],\n        assessment: {\n          type: 'PRACTICAL',\n          passingScore: 85,\n          timeLimit: 45,\n          questions: [\n            {\n              id: 'cwe89-001',\n              type: 'CODE_REVIEW',\n              question: 'Fix the SQL injection vulnerability in this TypeORM repository method.',\n              correctAnswer: 'Use parameterized queries with createQueryBuilder',\n              explanation: 'Replace string concatenation with parameterized queries.',\n            },\n          ],\n        },\n        certification: true,\n      },\n      {\n        id: 'cwe-20-input-validation',\n        title: 'CWE-20: Improper Input Validation',\n        category: 'CWE',\n        level: 'INTERMEDIATE',\n        duration: 100,\n        prerequisites: ['cwe-79-xss', 'cwe-89-sql-injection'],\n        objectives: [\n          'Implement comprehensive input validation',\n          'Use validation decorators in NestJS',\n          'Configure sanitization pipelines',\n          'Handle validation errors securely',\n        ],\n        content: [\n          {\n            type: 'VIDEO',\n            title: 'Input Validation Strategies',\n            url: '/training/videos/input-validation.mp4',\n            duration: 30,\n            description: 'Comprehensive input validation strategies',\n          },\n          {\n            type: 'LAB',\n            title: 'NestJS Validation Lab',\n            url: '/training/labs/nestjs-validation',\n            duration: 60,\n            description: 'Implement robust validation in NestJS',\n          },\n        ],\n        assessment: {\n          type: 'PROJECT',\n          passingScore: 80,\n          timeLimit: 90,\n          questions: [\n            {\n              id: 'cwe20-001',\n              type: 'SCENARIO',\n              question: 'Design a validation strategy for a user registration API.',\n              correctAnswer: 'Multi-layer validation with DTOs, custom validators, and sanitization',\n              explanation: 'Implement validation at multiple layers for defense in depth.',\n            },\n          ],\n        },\n        certification: true,\n      },\n    ];\n  }\n\n  createSecureCodingWorkshop(): any {\n    return {\n      id: 'secure-coding-workshop',\n      title: 'Secure Coding Workshop: CWE Top 25',\n      duration: 480, // 8 hours\n      format: 'WORKSHOP',\n      agenda: [\n        {\n          time: '09:00-09:30',\n          topic: 'Workshop Introduction and CWE Overview',\n          type: 'PRESENTATION',\n        },\n        {\n          time: '09:30-11:00',\n          topic: 'Injection Flaws (CWE-79, CWE-89)',\n          type: 'HANDS_ON_LAB',\n        },\n        {\n          time: '11:15-12:30',\n          topic: 'Access Control Issues (CWE-22, CWE-352)',\n          type: 'HANDS_ON_LAB',\n        },\n        {\n          time: '13:30-15:00',\n          topic: 'Cryptographic Failures (CWE-327, CWE-328)',\n          type: 'HANDS_ON_LAB',\n        },\n        {\n          time: '15:15-16:30',\n          topic: 'Security Misconfiguration (CWE-798, CWE-862)',\n          type: 'HANDS_ON_LAB',\n        },\n        {\n          time: '16:30-17:00',\n          topic: 'Wrap-up and Action Planning',\n          type: 'DISCUSSION',\n        },\n      ],\n      labs: [\n        {\n          id: 'lab-cwe-22',\n          title: 'Path Traversal Prevention',\n          vulnerability: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory',\n          exercise: 'Fix file upload functionality to prevent directory traversal',\n        },\n        {\n          id: 'lab-cwe-352',\n          title: 'CSRF Protection Implementation',\n          vulnerability: 'CWE-352: Cross-Site Request Forgery',\n          exercise: 'Implement CSRF tokens in a Next.js application',\n        },\n      ],\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"industry-specific-training",children:"Industry-Specific Training"}),"\n",(0,r.jsx)(e.h3,{id:"compliance-training-service",children:"Compliance Training Service"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/compliance-training.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ComplianceTrainingService {\n  createPCIDSSTraining(): TrainingModule {\n    return {\n      id: 'pci-dss-foundation',\n      title: 'PCI DSS Foundation for Banking Projects',\n      category: 'COMPLIANCE',\n      level: 'INTERMEDIATE',\n      duration: 180,\n      prerequisites: ['owasp-injection', 'owasp-auth-failure'],\n      objectives: [\n        'Understand PCI DSS requirements',\n        'Implement secure payment processing',\n        'Configure data protection for cardholder data',\n        'Maintain compliance documentation',\n      ],\n      content: [\n        {\n          type: 'VIDEO',\n          title: 'PCI DSS Overview and Requirements',\n          url: '/training/videos/pci-dss-overview.mp4',\n          duration: 45,\n          description: 'Complete overview of PCI DSS requirements',\n        },\n        {\n          type: 'DOCUMENT',\n          title: 'PCI DSS Implementation Guide for Web Applications',\n          url: '/training/docs/pci-dss-web-apps.pdf',\n          duration: 60,\n          description: 'Detailed implementation guide',\n        },\n        {\n          type: 'LAB',\n          title: 'Secure Payment Processing Implementation',\n          url: '/training/labs/secure-payment-processing',\n          duration: 75,\n          description: 'Build PCI-compliant payment processing',\n        },\n      ],\n      assessment: {\n        type: 'PROJECT',\n        passingScore: 90,\n        timeLimit: 120,\n        questions: [\n          {\n            id: 'pci-001',\n            type: 'SCENARIO',\n            question: 'Design a PCI-compliant architecture for storing and processing credit card data.',\n            correctAnswer: 'Tokenization, encryption at rest and in transit, network segmentation, access controls',\n            explanation: 'PCI DSS requires multiple layers of security for cardholder data protection.',\n          },\n        ],\n      },\n      certification: true,\n    };\n  }\n\n  createGDPRTraining(): TrainingModule {\n    return {\n      id: 'gdpr-foundation',\n      title: 'GDPR Foundation for Data Protection',\n      category: 'COMPLIANCE',\n      level: 'BEGINNER',\n      duration: 120,\n      prerequisites: [],\n      objectives: [\n        'Understand GDPR principles and requirements',\n        'Implement privacy by design',\n        'Handle data subject requests',\n        'Conduct privacy impact assessments',\n      ],\n      content: [\n        {\n          type: 'VIDEO',\n          title: 'GDPR Fundamentals',\n          url: '/training/videos/gdpr-fundamentals.mp4',\n          duration: 30,\n          description: 'Introduction to GDPR principles',\n        },\n        {\n          type: 'DOCUMENT',\n          title: 'Technical Implementation of GDPR',\n          url: '/training/docs/gdpr-technical-implementation.pdf',\n          duration: 45,\n          description: 'Technical aspects of GDPR compliance',\n        },\n        {\n          type: 'LAB',\n          title: 'Privacy-by-Design Implementation',\n          url: '/training/labs/privacy-by-design',\n          duration: 45,\n          description: 'Implement GDPR-compliant data handling',\n        },\n      ],\n      assessment: {\n        type: 'QUIZ',\n        passingScore: 80,\n        timeLimit: 45,\n        questions: [\n          {\n            id: 'gdpr-001',\n            type: 'MULTIPLE_CHOICE',\n            question: 'What is the maximum fine for GDPR violations?',\n            options: ['2% of annual revenue', '4% of annual revenue', '\u20ac10 million', '\u20ac20 million'],\n            correctAnswer: '4% of annual revenue',\n            explanation: 'GDPR fines can be up to 4% of annual global turnover or \u20ac20 million, whichever is higher.',\n          },\n        ],\n      },\n      certification: true,\n    };\n  }\n\n  createHIPAATraining(): TrainingModule {\n    return {\n      id: 'hipaa-foundation',\n      title: 'HIPAA Foundation for Healthcare Projects',\n      category: 'COMPLIANCE',\n      level: 'INTERMEDIATE',\n      duration: 150,\n      prerequisites: ['gdpr-foundation'],\n      objectives: [\n        'Understand HIPAA Privacy and Security Rules',\n        'Implement PHI protection measures',\n        'Configure audit logging for HIPAA compliance',\n        'Handle breach notification requirements',\n      ],\n      content: [\n        {\n          type: 'VIDEO',\n          title: 'HIPAA Privacy and Security Rules',\n          url: '/training/videos/hipaa-rules.mp4',\n          duration: 40,\n          description: 'Overview of HIPAA requirements',\n        },\n        {\n          type: 'DOCUMENT',\n          title: 'Technical Safeguards Implementation',\n          url: '/training/docs/hipaa-technical-safeguards.pdf',\n          duration: 50,\n          description: 'Implementing HIPAA technical safeguards',\n        },\n        {\n          type: 'LAB',\n          title: 'PHI Protection Implementation',\n          url: '/training/labs/phi-protection',\n          duration: 60,\n          description: 'Build HIPAA-compliant PHI handling',\n        },\n      ],\n      assessment: {\n        type: 'PROJECT',\n        passingScore: 85,\n        timeLimit: 90,\n        questions: [\n          {\n            id: 'hipaa-001',\n            type: 'SCENARIO',\n            question: 'Design a HIPAA-compliant system for storing and accessing patient records.',\n            correctAnswer: 'Encryption, access controls, audit logging, minimum necessary principle',\n            explanation: 'HIPAA requires technical, administrative, and physical safeguards for PHI.',\n          },\n        ],\n      },\n      certification: true,\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"hands-on-security-labs",children:"Hands-On Security Labs"}),"\n",(0,r.jsx)(e.h3,{id:"interactive-lab-platform",children:"Interactive Lab Platform"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/lab-platform.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\n\ninterface LabEnvironment {\n  id: string;\n  name: string;\n  description: string;\n  type: 'VULNERABLE_APP' | 'SECURE_DEMO' | 'CTF_CHALLENGE';\n  technologies: string[];\n  difficulty: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED';\n  estimatedTime: number;\n  objectives: string[];\n  setup: LabSetup;\n  exercises: LabExercise[];\n}\n\ninterface LabSetup {\n  dockerImages: string[];\n  environmentVariables: Record<string, string>;\n  networkConfiguration: string;\n  volumes: string[];\n}\n\ninterface LabExercise {\n  id: string;\n  title: string;\n  description: string;\n  type: 'FIND_VULNERABILITY' | 'FIX_CODE' | 'IMPLEMENT_SECURITY' | 'EXPLOIT_DEMO';\n  instructions: string[];\n  hints: string[];\n  solution: string;\n  verificationScript: string;\n}\n\n@Injectable()\nexport class LabPlatformService {\n  private readonly logger = new Logger(LabPlatformService.name);\n\n  async createVulnerableApp(): Promise<LabEnvironment> {\n    return {\n      id: 'vuln-ecom-app',\n      name: 'Vulnerable E-commerce Application',\n      description: 'A deliberately vulnerable e-commerce app for security training',\n      type: 'VULNERABLE_APP',\n      technologies: ['NestJS', 'Next.js', 'PostgreSQL', 'Docker'],\n      difficulty: 'INTERMEDIATE',\n      estimatedTime: 120,\n      objectives: [\n        'Identify common web application vulnerabilities',\n        'Practice exploitation techniques safely',\n        'Learn to fix security issues',\n        'Understand impact of security flaws',\n      ],\n      setup: {\n        dockerImages: [\n          'vuln-ecom-backend:latest',\n          'vuln-ecom-frontend:latest',\n          'postgres:13',\n        ],\n        environmentVariables: {\n          DATABASE_URL: 'postgresql://user:password@db:5432/vuln_ecom',\n          JWT_SECRET: 'weak-secret',\n          NODE_ENV: 'development',\n        },\n        networkConfiguration: 'bridge',\n        volumes: ['./data:/app/data'],\n      },\n      exercises: [\n        {\n          id: 'ex-001',\n          title: 'SQL Injection in Login',\n          description: 'Find and exploit the SQL injection vulnerability in the login endpoint',\n          type: 'FIND_VULNERABILITY',\n          instructions: [\n            'Navigate to the login page',\n            'Try to bypass authentication using SQL injection',\n            'Document the vulnerable code',\n            'Provide a fix for the vulnerability',\n          ],\n          hints: [\n            'Look at the authentication endpoint',\n            'Try common SQL injection payloads',\n            'Check how user input is processed',\n          ],\n          solution: `\nThe vulnerability is in src/auth/auth.service.ts:\n\\`\\`\\`typescript\n// Vulnerable code\nasync validateUser(username: string, password: string) {\n  const query = \\`SELECT * FROM users WHERE username = '\\${username}' AND password = '\\${password}'\\`;\n  const result = await this.db.query(query);\n  return result.length > 0 ? result[0] : null;\n}\n\n// Secure fix\nasync validateUser(username: string, password: string) {\n  const user = await this.userRepository.findOne({ \n    where: { username },\n    select: ['id', 'username', 'passwordHash']\n  });\n  \n  if (!user) return null;\n  \n  const isValid = await bcrypt.compare(password, user.passwordHash);\n  return isValid ? user : null;\n}\n\\`\\`\\``,\n          verificationScript: 'check-sql-injection-fix.sh',\n        },\n        {\n          id: 'ex-002',\n          title: 'XSS in Product Reviews',\n          description: 'Find the XSS vulnerability in product review functionality',\n          type: 'FIND_VULNERABILITY',\n          instructions: [\n            'Submit a product review with malicious script',\n            'Verify the script executes when viewing the review',\n            'Identify the vulnerable component',\n            'Implement proper output encoding',\n          ],\n          hints: [\n            'Check how reviews are displayed',\n            'Look for dangerouslySetInnerHTML usage',\n            'Test with <script> tags',\n          ],\n          solution: `\nThe vulnerability is in components/ProductReview.tsx:\n\\`\\`\\`typescript\n// Vulnerable code\nfunction ProductReview({ review }) {\n  return (\n    <div>\n      <h4>{review.title}</h4>\n      <div dangerouslySetInnerHTML={{ __html: review.content }} />\n    </div>\n  );\n}\n\n// Secure fix\nimport DOMPurify from 'dompurify';\n\nfunction ProductReview({ review }) {\n  const sanitizedContent = DOMPurify.sanitize(review.content);\n  \n  return (\n    <div>\n      <h4>{review.title}</h4>\n      <div dangerouslySetInnerHTML={{ __html: sanitizedContent }} />\n    </div>\n  );\n}\n\\`\\`\\``,\n          verificationScript: 'check-xss-fix.sh',\n        },\n      ],\n    };\n  }\n\n  async createSecureImplementationLab(): Promise<LabEnvironment> {\n    return {\n      id: 'secure-impl-lab',\n      name: 'Secure Implementation Laboratory',\n      description: 'Practice implementing security features from scratch',\n      type: 'SECURE_DEMO',\n      technologies: ['NestJS', 'Next.js', 'JWT', 'bcrypt'],\n      difficulty: 'ADVANCED',\n      estimatedTime: 180,\n      objectives: [\n        'Implement secure authentication from scratch',\n        'Build role-based access control',\n        'Create secure API endpoints',\n        'Implement proper error handling',\n      ],\n      setup: {\n        dockerImages: ['node:18', 'postgres:13'],\n        environmentVariables: {\n          NODE_ENV: 'development',\n        },\n        networkConfiguration: 'bridge',\n        volumes: [],\n      },\n      exercises: [\n        {\n          id: 'impl-001',\n          title: 'Secure Authentication Implementation',\n          description: 'Build a complete secure authentication system',\n          type: 'IMPLEMENT_SECURITY',\n          instructions: [\n            'Create user registration with proper validation',\n            'Implement secure password hashing',\n            'Build JWT-based authentication',\n            'Add rate limiting to prevent brute force',\n          ],\n          hints: [\n            'Use bcrypt for password hashing',\n            'Implement proper JWT expiration',\n            'Add input validation with class-validator',\n          ],\n          solution: 'Complete implementation provided in lab materials',\n          verificationScript: 'verify-auth-implementation.sh',\n        },\n      ],\n    };\n  }\n\n  async createCTFChallenge(): Promise<LabEnvironment> {\n    return {\n      id: 'security-ctf',\n      name: 'Security CTF Challenge',\n      description: 'Capture The Flag challenges for security skills assessment',\n      type: 'CTF_CHALLENGE',\n      technologies: ['Web Security', 'Cryptography', 'Network Security'],\n      difficulty: 'ADVANCED',\n      estimatedTime: 240,\n      objectives: [\n        'Demonstrate security knowledge through challenges',\n        'Practice real-world attack scenarios',\n        'Learn advanced exploitation techniques',\n        'Develop incident response skills',\n      ],\n      setup: {\n        dockerImages: ['ctf-challenge:latest'],\n        environmentVariables: {},\n        networkConfiguration: 'isolated',\n        volumes: [],\n      },\n      exercises: [\n        {\n          id: 'ctf-001',\n          title: 'Authentication Bypass Challenge',\n          description: 'Find and exploit multiple authentication vulnerabilities',\n          type: 'EXPLOIT_DEMO',\n          instructions: [\n            'Analyze the authentication system',\n            'Find at least 3 different bypass methods',\n            'Document your findings',\n            'Provide remediation recommendations',\n          ],\n          hints: [\n            'Check for SQL injection',\n            'Look for session management issues',\n            'Test for privilege escalation',\n          ],\n          solution: 'Solution guide provided after completion',\n          verificationScript: 'ctf-challenge-validator.sh',\n        },\n      ],\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"security-champions-program",children:"Security Champions Program"}),"\n",(0,r.jsx)(e.h3,{id:"security-champions-management",children:"Security Champions Management"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/training/security-champions.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\n\ninterface SecurityChampion {\n  id: string;\n  name: string;\n  email: string;\n  team: string;\n  level: 'BRONZE' | 'SILVER' | 'GOLD' | 'PLATINUM';\n  certifications: string[];\n  achievements: Achievement[];\n  menteeCount: number;\n  lastActivityDate: Date;\n  skillAreas: string[];\n}\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  category: 'TRAINING' | 'MENTORING' | 'CONTRIBUTION' | 'LEADERSHIP';\n  dateEarned: Date;\n  points: number;\n}\n\ninterface ChampionProgram {\n  requirements: Record<string, any>;\n  benefits: string[];\n  responsibilities: string[];\n  progression: ProgressionLevel[];\n}\n\ninterface ProgressionLevel {\n  level: string;\n  requirements: {\n    trainingsCompleted: number;\n    certificationsRequired: string[];\n    mentoringHours: number;\n    contributionsRequired: number;\n  };\n  benefits: string[];\n}\n\n@Injectable()\nexport class SecurityChampionsService {\n  private readonly logger = new Logger(SecurityChampionsService.name);\n  private readonly champions = new Map<string, SecurityChampion>();\n\n  constructor() {\n    this.initializeChampionProgram();\n  }\n\n  async nominateChampion(userId: string, nominatorId: string, reason: string): Promise<void> {\n    this.logger.log(`User ${userId} nominated as security champion by ${nominatorId}`);\n    \n    // Verify nomination criteria\n    const userProgress = await this.getUserTrainingProgress(userId);\n    if (!this.meetsChampionCriteria(userProgress)) {\n      throw new Error('User does not meet champion criteria');\n    }\n\n    // Create champion profile\n    const champion: SecurityChampion = {\n      id: userId,\n      name: await this.getUserName(userId),\n      email: await this.getUserEmail(userId),\n      team: await this.getUserTeam(userId),\n      level: 'BRONZE',\n      certifications: await this.getUserCertifications(userId),\n      achievements: [],\n      menteeCount: 0,\n      lastActivityDate: new Date(),\n      skillAreas: this.identifySkillAreas(userProgress),\n    };\n\n    this.champions.set(userId, champion);\n    \n    await this.awardAchievement(userId, {\n      id: 'champion-nomination',\n      title: 'Security Champion',\n      description: 'Nominated and accepted as a security champion',\n      category: 'LEADERSHIP',\n      dateEarned: new Date(),\n      points: 100,\n    });\n  }\n\n  async assignMentee(championId: string, menteeId: string): Promise<void> {\n    const champion = this.champions.get(championId);\n    if (!champion) {\n      throw new Error(`Champion not found: ${championId}`);\n    }\n\n    champion.menteeCount++;\n    champion.lastActivityDate = new Date();\n\n    await this.createMentoringPlan(championId, menteeId);\n    \n    this.logger.log(`Champion ${championId} assigned mentee ${menteeId}`);\n  }\n\n  async trackChampionActivity(championId: string, activity: string): Promise<void> {\n    const champion = this.champions.get(championId);\n    if (!champion) return;\n\n    champion.lastActivityDate = new Date();\n\n    // Award points based on activity type\n    switch (activity) {\n      case 'training-conducted':\n        await this.awardAchievement(championId, {\n          id: `training-${Date.now()}`,\n          title: 'Training Conductor',\n          description: 'Conducted security training session',\n          category: 'TRAINING',\n          dateEarned: new Date(),\n          points: 50,\n        });\n        break;\n      case 'mentoring-session':\n        await this.awardAchievement(championId, {\n          id: `mentoring-${Date.now()}`,\n          title: 'Mentor',\n          description: 'Completed mentoring session',\n          category: 'MENTORING',\n          dateEarned: new Date(),\n          points: 25,\n        });\n        break;\n      case 'security-contribution':\n        await this.awardAchievement(championId, {\n          id: `contribution-${Date.now()}`,\n          title: 'Security Contributor',\n          description: 'Made significant security contribution',\n          category: 'CONTRIBUTION',\n          dateEarned: new Date(),\n          points: 75,\n        });\n        break;\n    }\n\n    await this.evaluateChampionLevelPromotion(championId);\n  }\n\n  async evaluateChampionLevelPromotion(championId: string): Promise<void> {\n    const champion = this.champions.get(championId);\n    if (!champion) return;\n\n    const totalPoints = champion.achievements.reduce((sum, achievement) => sum + achievement.points, 0);\n    const currentLevel = champion.level;\n    let newLevel = currentLevel;\n\n    // Define promotion criteria\n    if (totalPoints >= 1000 && champion.menteeCount >= 5 && champion.certifications.length >= 3) {\n      newLevel = 'PLATINUM';\n    } else if (totalPoints >= 500 && champion.menteeCount >= 3 && champion.certifications.length >= 2) {\n      newLevel = 'GOLD';\n    } else if (totalPoints >= 200 && champion.menteeCount >= 1) {\n      newLevel = 'SILVER';\n    }\n\n    if (newLevel !== currentLevel) {\n      champion.level = newLevel;\n      await this.awardAchievement(championId, {\n        id: `promotion-${newLevel}`,\n        title: `${newLevel} Champion`,\n        description: `Promoted to ${newLevel} level champion`,\n        category: 'LEADERSHIP',\n        dateEarned: new Date(),\n        points: 200,\n      });\n      \n      this.logger.log(`Champion ${championId} promoted to ${newLevel} level`);\n    }\n  }\n\n  async generateChampionReport(): Promise<any> {\n    const allChampions = Array.from(this.champions.values());\n    \n    return {\n      totalChampions: allChampions.length,\n      levelDistribution: {\n        BRONZE: allChampions.filter(c => c.level === 'BRONZE').length,\n        SILVER: allChampions.filter(c => c.level === 'SILVER').length,\n        GOLD: allChampions.filter(c => c.level === 'GOLD').length,\n        PLATINUM: allChampions.filter(c => c.level === 'PLATINUM').length,\n      },\n      totalMentees: allChampions.reduce((sum, c) => sum + c.menteeCount, 0),\n      averageTrainingsPerChampion: await this.calculateAverageTrainings(),\n      topContributors: allChampions\n        .sort((a, b) => this.getTotalPoints(b) - this.getTotalPoints(a))\n        .slice(0, 5),\n    };\n  }\n\n  private meetsChampionCriteria(userProgress: any): boolean {\n    // Define criteria for becoming a security champion\n    return userProgress.completedModules >= 3 && \n           userProgress.certifications >= 1 &&\n           userProgress.averageScore >= 80;\n  }\n\n  private identifySkillAreas(userProgress: any): string[] {\n    // Identify user's strong skill areas based on training progress\n    return ['Web Security', 'Authentication', 'Input Validation'];\n  }\n\n  private async awardAchievement(championId: string, achievement: Achievement): Promise<void> {\n    const champion = this.champions.get(championId);\n    if (champion) {\n      champion.achievements.push(achievement);\n    }\n  }\n\n  private async createMentoringPlan(championId: string, menteeId: string): Promise<void> {\n    // Create structured mentoring plan\n    this.logger.log(`Created mentoring plan: ${championId} -> ${menteeId}`);\n  }\n\n  private getTotalPoints(champion: SecurityChampion): number {\n    return champion.achievements.reduce((sum, achievement) => sum + achievement.points, 0);\n  }\n\n  private async getUserTrainingProgress(userId: string): Promise<any> {\n    // Implementation to get user training progress\n    return {};\n  }\n\n  private async getUserName(userId: string): Promise<string> {\n    return 'User Name';\n  }\n\n  private async getUserEmail(userId: string): Promise<string> {\n    return 'user@example.com';\n  }\n\n  private async getUserTeam(userId: string): Promise<string> {\n    return 'Development Team';\n  }\n\n  private async getUserCertifications(userId: string): Promise<string[]> {\n    return [];\n  }\n\n  private async calculateAverageTrainings(): Promise<number> {\n    return 0;\n  }\n\n  private initializeChampionProgram(): void {\n    // Initialize program structure and requirements\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"This comprehensive security awareness training implementation provides:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Training program structure"})," with comprehensive management and scheduling"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"OWASP Top 10 training"})," with interactive labs and practical exercises"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"SANS CWE Top 25 training"})," with secure coding workshops"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Industry-specific training"})," for PCI DSS, GDPR, and HIPAA compliance"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Hands-on security labs"})," with vulnerable applications and CTF challenges"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Security champions program"})," with mentoring, achievements, and progression"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"The implementation ensures that security awareness is comprehensive, practical, and continuously reinforced through ongoing training and mentorship programs."})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},7814:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(9729);const r={},s=t.createContext(r);function a(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);