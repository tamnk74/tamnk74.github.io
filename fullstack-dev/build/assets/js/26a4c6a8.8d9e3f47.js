"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8288],{2526:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"coding-conventions/typescript-guidelines","title":"TypeScript Guidelines","description":"Comprehensive TypeScript development guidelines for building type-safe, maintainable applications.","source":"@site/docs/coding-conventions/typescript-guidelines.md","sourceDirName":"coding-conventions","slug":"/coding-conventions/typescript-guidelines","permalink":"/fullstack-dev/docs/coding-conventions/typescript-guidelines","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/coding-conventions/typescript-guidelines.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JavaScript Best Practices","permalink":"/fullstack-dev/docs/coding-conventions/javascript-best-practices"},"next":{"title":"React Best Practices","permalink":"/fullstack-dev/docs/coding-conventions/react-best-practices"}}');var s=r(5813),i=r(5741);const a={},o="TypeScript Guidelines",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Type Safety Principles",id:"type-safety-principles",level:2},{value:"Strict TypeScript Configuration",id:"strict-typescript-configuration",level:3},{value:"Explicit Type Annotations",id:"explicit-type-annotations",level:3},{value:"Avoid <code>any</code> Type",id:"avoid-any-type",level:3},{value:"Interface Design",id:"interface-design",level:2},{value:"Well-Defined Interfaces",id:"well-defined-interfaces",level:3},{value:"Optional vs Required Properties",id:"optional-vs-required-properties",level:3},{value:"Extending Interfaces",id:"extending-interfaces",level:3},{value:"Advanced Types",id:"advanced-types",level:2},{value:"Union Types",id:"union-types",level:3},{value:"Mapped Types",id:"mapped-types",level:3},{value:"Conditional Types",id:"conditional-types",level:3},{value:"Generic Programming",id:"generic-programming",level:2},{value:"Generic Functions",id:"generic-functions",level:3},{value:"Generic Classes",id:"generic-classes",level:3},{value:"Generic Constraints with Keyof",id:"generic-constraints-with-keyof",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Result Pattern",id:"result-pattern",level:3},{value:"Custom Error Types",id:"custom-error-types",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Type-Only Imports",id:"type-only-imports",level:3},{value:"Efficient Type Definitions",id:"efficient-type-definitions",level:3},{value:"Lazy Type Loading",id:"lazy-type-loading",level:3},{value:"Configuration and Setup",id:"configuration-and-setup",level:2},{value:"TypeScript Project Structure",id:"typescript-project-structure",level:3},{value:"Type Guards",id:"type-guards",level:3},{value:"Declaration Merging",id:"declaration-merging",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"typescript-guidelines",children:"TypeScript Guidelines"})}),"\n",(0,s.jsx)(n.p,{children:"Comprehensive TypeScript development guidelines for building type-safe, maintainable applications."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#type-safety-principles",children:"Type Safety Principles"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#interface-design",children:"Interface Design"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#advanced-types",children:"Advanced Types"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#generic-programming",children:"Generic Programming"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"type-safety-principles",children:"Type Safety Principles"}),"\n",(0,s.jsx)(n.h3,{id:"strict-typescript-configuration",children:"Strict TypeScript Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// tsconfig.json\n{\n  "compilerOptions": {\n    "strict": true,\n    "noImplicitAny": true,\n    "noImplicitReturns": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "exactOptionalPropertyTypes": true,\n    "noUncheckedIndexedAccess": true\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"explicit-type-annotations",children:"Explicit Type Annotations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad - Implicit any\nfunction processUser(user) {\n  return user.name.toUpperCase();\n}\n\n// \u2705 Good - Explicit types\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  age: number;\n  isActive: boolean;\n}\n\nfunction processUser(user: User): string {\n  return user.name.toUpperCase();\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"avoid-any-type",children:["Avoid ",(0,s.jsx)(n.code,{children:"any"})," Type"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad\nfunction fetchData(): any {\n  return fetch('/api/data').then(res => res.json());\n}\n\n// \u2705 Good\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n  message: string;\n}\n\nasync function fetchData<T>(): Promise<ApiResponse<T>> {\n  const response = await fetch('/api/data');\n  return response.json() as ApiResponse<T>;\n}\n\n// Usage with specific type\ninterface UserData {\n  users: User[];\n  total: number;\n}\n\nconst userData = await fetchData<UserData>();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interface-design",children:"Interface Design"}),"\n",(0,s.jsx)(n.h3,{id:"well-defined-interfaces",children:"Well-Defined Interfaces"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad - Vague interface\ninterface Data {\n  stuff: any;\n  things: object;\n}\n\n// \u2705 Good - Clear and specific\ninterface UserProfile {\n  readonly id: string;\n  personalInfo: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    dateOfBirth?: Date;\n  };\n  preferences: {\n    theme: 'light' | 'dark';\n    notifications: boolean;\n    language: string;\n  };\n  metadata: {\n    createdAt: Date;\n    updatedAt: Date;\n    version: number;\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optional-vs-required-properties",children:"Optional vs Required Properties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface CreateUserRequest {\n  // Required fields\n  firstName: string;\n  lastName: string;\n  email: string;\n  \n  // Optional fields\n  age?: number;\n  phoneNumber?: string;\n  preferences?: UserPreferences;\n}\n\ninterface UpdateUserRequest {\n  // ID is required for updates\n  id: string;\n  \n  // All other fields are optional for partial updates\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  age?: number;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"extending-interfaces",children:"Extending Interfaces"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface BaseEntity {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface User extends BaseEntity {\n  name: string;\n  email: string;\n  role: UserRole;\n}\n\ninterface AdminUser extends User {\n  permissions: Permission[];\n  lastLoginAt?: Date;\n}\n\n// Interface composition\ninterface UserWithProfile extends User {\n  profile: UserProfile;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,s.jsx)(n.h3,{id:"union-types",children:"Union Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Status = 'pending' | 'approved' | 'rejected';\ntype Theme = 'light' | 'dark' | 'auto';\n\ninterface Task {\n  id: string;\n  title: string;\n  status: Status;\n  priority: 'low' | 'medium' | 'high';\n}\n\n// Discriminated unions\ninterface LoadingState {\n  type: 'loading';\n}\n\ninterface SuccessState {\n  type: 'success';\n  data: User[];\n}\n\ninterface ErrorState {\n  type: 'error';\n  error: string;\n}\n\ntype AsyncState = LoadingState | SuccessState | ErrorState;\n\nfunction handleState(state: AsyncState) {\n  switch (state.type) {\n    case 'loading':\n      return 'Loading...';\n    case 'success':\n      return `Loaded ${state.data.length} users`;\n    case 'error':\n      return `Error: ${state.error}`;\n    default:\n      // TypeScript ensures exhaustive checking\n      const _exhaustive: never = state;\n      return _exhaustive;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mapped-types",children:"Mapped Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Make all properties optional\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n\n// Make all properties required\ntype Required<T> = {\n  [P in keyof T]-?: T[P];\n};\n\n// Pick specific properties\ntype UserSummary = Pick<User, 'id' | 'name' | 'email'>;\n\n// Omit specific properties\ntype CreateUserData = Omit<User, 'id' | 'createdAt' | 'updatedAt'>;\n\n// Custom mapped types\ntype Nullable<T> = {\n  [P in keyof T]: T[P] | null;\n};\n\ntype StringKeys<T> = {\n  [K in keyof T]: T[K] extends string ? K : never;\n}[keyof T];\n\n// Usage\ntype UserStringKeys = StringKeys<User>; // 'name' | 'email'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-types",children:"Conditional Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Basic conditional type\ntype NonNullable<T> = T extends null | undefined ? never : T;\n\n// More complex conditional type\ntype ApiResponse<T> = T extends string\n  ? { message: T }\n  : T extends number\n  ? { code: T }\n  : { data: T };\n\n// Infer keyword\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\n\n// Utility conditional types\ntype Flatten<T> = T extends (infer U)[] ? U : T;\n\ntype Deep<T> = {\n  [P in keyof T]: T[P] extends object ? Deep<T[P]> : T[P];\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"generic-programming",children:"Generic Programming"}),"\n",(0,s.jsx)(n.h3,{id:"generic-functions",children:"Generic Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Basic generic function\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\n// Multiple type parameters\nfunction pair<T, U>(first: T, second: U): [T, U] {\n  return [first, second];\n}\n\n// Constrained generics\ninterface Lengthwise {\n  length: number;\n}\n\nfunction logLength<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n\n// Usage\nlogLength('hello'); // \u2705 Works\nlogLength([1, 2, 3]); // \u2705 Works\nlogLength({ length: 10, value: 3 }); // \u2705 Works\n// logLength(3); // \u274c Error: number doesn't have length\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generic-classes",children:"Generic Classes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"class Repository<T extends BaseEntity> {\n  private items: T[] = [];\n  \n  add(item: T): void {\n    this.items.push(item);\n  }\n  \n  findById(id: string): T | undefined {\n    return this.items.find(item => item.id === id);\n  }\n  \n  update(id: string, updates: Partial<T>): T | undefined {\n    const index = this.items.findIndex(item => item.id === id);\n    if (index !== -1) {\n      this.items[index] = { ...this.items[index], ...updates };\n      return this.items[index];\n    }\n    return undefined;\n  }\n  \n  delete(id: string): boolean {\n    const index = this.items.findIndex(item => item.id === id);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n}\n\n// Usage\nconst userRepository = new Repository<User>();\nconst taskRepository = new Repository<Task>();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generic-constraints-with-keyof",children:"Generic Constraints with Keyof"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {\n  return obj[key];\n}\n\nfunction setProperty<T, K extends keyof T>(\n  obj: T, \n  key: K, \n  value: T[K]\n): void {\n  obj[key] = value;\n}\n\n// Usage\nconst user: User = { id: '1', name: 'John', email: 'john@example.com' };\nconst name = getProperty(user, 'name'); // Type is string\nconst id = getProperty(user, 'id'); // Type is string\n// const invalid = getProperty(user, 'invalid'); // \u274c Error\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"result-pattern",children:"Result Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"type Result<T, E = Error> = \n  | { success: true; data: T }\n  | { success: false; error: E };\n\nasync function safeApiCall<T>(\n  apiCall: () => Promise<T>\n): Promise<Result<T>> {\n  try {\n    const data = await apiCall();\n    return { success: true, data };\n  } catch (error) {\n    return { \n      success: false, \n      error: error instanceof Error ? error : new Error(String(error))\n    };\n  }\n}\n\n// Usage\nasync function fetchUser(id: string): Promise<Result<User>> {\n  return safeApiCall(() => api.get<User>(`/users/${id}`));\n}\n\nconst result = await fetchUser('123');\nif (result.success) {\n  console.log(result.data.name); // Type-safe access\n} else {\n  console.error(result.error.message);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-error-types",children:"Custom Error Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"abstract class AppError extends Error {\n  abstract readonly statusCode: number;\n  abstract readonly type: string;\n  \n  constructor(message: string, public readonly context?: Record<string, any>) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nclass ValidationError extends AppError {\n  readonly statusCode = 400;\n  readonly type = 'VALIDATION_ERROR';\n  \n  constructor(\n    message: string,\n    public readonly field: string,\n    context?: Record<string, any>\n  ) {\n    super(message, context);\n  }\n}\n\nclass NotFoundError extends AppError {\n  readonly statusCode = 404;\n  readonly type = 'NOT_FOUND';\n}\n\nclass UnauthorizedError extends AppError {\n  readonly statusCode = 401;\n  readonly type = 'UNAUTHORIZED';\n}\n\n// Error handling function\nfunction handleError(error: AppError): Response {\n  switch (error.type) {\n    case 'VALIDATION_ERROR':\n      return new Response(JSON.stringify({\n        error: error.message,\n        field: (error as ValidationError).field\n      }), { status: error.statusCode });\n    \n    case 'NOT_FOUND':\n      return new Response(JSON.stringify({\n        error: error.message\n      }), { status: error.statusCode });\n    \n    default:\n      return new Response(JSON.stringify({\n        error: 'Internal server error'\n      }), { status: 500 });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"type-only-imports",children:"Type-Only Imports"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad - Imports both type and value\nimport { User, createUser } from './user.service';\n\n// \u2705 Good - Separate type and value imports\nimport type { User } from './user.types';\nimport { createUser } from './user.service';\n\n// \u2705 Mixed imports\nimport { createUser, type User, type UserPreferences } from './user.service';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"efficient-type-definitions",children:"Efficient Type Definitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad - Recreating interface\ninterface UserResponse {\n  id: string;\n  name: string;\n  email: string;\n  // ... duplicate all User properties\n}\n\n// \u2705 Good - Reuse existing types\ntype UserResponse = User & {\n  lastLoginAt: Date;\n  preferences: UserPreferences;\n};\n\n// \u2705 Good - Transform existing types\ntype UserSummary = Pick<User, 'id' | 'name' | 'email'>;\ntype CreateUserRequest = Omit<User, 'id' | 'createdAt' | 'updatedAt'>;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"lazy-type-loading",children:"Lazy Type Loading"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// For large applications, use dynamic imports for types\ntype LazyUserModule = typeof import('./user.module');\n\nasync function loadUserModule(): Promise<LazyUserModule> {\n  return import('./user.module');\n}\n\n// Conditional type loading\ntype ConditionalUser<T extends boolean> = T extends true \n  ? import('./full-user').User \n  : import('./basic-user').User;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration-and-setup",children:"Configuration and Setup"}),"\n",(0,s.jsx)(n.h3,{id:"typescript-project-structure",children:"TypeScript Project Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 types/\n\u2502   \u251c\u2500\u2500 api.types.ts       # API response types\n\u2502   \u251c\u2500\u2500 user.types.ts      # User-related types\n\u2502   \u2514\u2500\u2500 common.types.ts    # Shared types\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 user.service.ts\n\u2502   \u2514\u2500\u2500 api.service.ts\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 type-guards.ts     # Type guard functions\n\u2502   \u2514\u2500\u2500 type-utils.ts      # Type utility functions\n\u2514\u2500\u2500 index.ts\n"})}),"\n",(0,s.jsx)(n.h3,{id:"type-guards",children:"Type Guards"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Type guard functions\nfunction isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\nfunction isUser(value: unknown): value is User {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'id' in value &&\n    'name' in value &&\n    'email' in value &&\n    isString((value as any).id) &&\n    isString((value as any).name) &&\n    isString((value as any).email)\n  );\n}\n\nfunction isArrayOf<T>(\n  value: unknown,\n  guard: (item: unknown) => item is T\n): value is T[] {\n  return Array.isArray(value) && value.every(guard);\n}\n\n// Usage\nfunction processUserData(data: unknown) {\n  if (isUser(data)) {\n    // data is now typed as User\n    console.log(data.name);\n  }\n  \n  if (isArrayOf(data, isUser)) {\n    // data is now typed as User[]\n    data.forEach(user => console.log(user.name));\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"declaration-merging",children:"Declaration Merging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Extending existing interfaces\ndeclare global {\n  interface Window {\n    customProperty: string;\n  }\n}\n\n// Module augmentation\ndeclare module 'express' {\n  interface Request {\n    user?: User;\n  }\n}\n\n// Namespace merging\nnamespace MyLibrary {\n  export interface Config {\n    apiUrl: string;\n  }\n}\n\nnamespace MyLibrary {\n  export interface Config {\n    timeout: number;\n  }\n}\n\n// Config now has both apiUrl and timeout\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable strict mode"})," for maximum type safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use explicit type annotations"})," for function parameters and return types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Avoid ",(0,s.jsx)(n.code,{children:"any"})," type"]})," - use ",(0,s.jsx)(n.code,{children:"unknown"})," or proper types instead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Design clear interfaces"})," with meaningful property names"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage advanced types"})," for better code reuse and safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use generics"})," for flexible, reusable components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement proper error handling"})," with custom error types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize performance"})," with type-only imports and efficient type definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Write type guards"})," for runtime type checking"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep types close to their usage"})," for better maintainability"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5741:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(9729);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);