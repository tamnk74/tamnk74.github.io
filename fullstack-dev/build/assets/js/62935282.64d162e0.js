"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[5012],{5741:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var s=r(9729);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},9720:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"coding-conventions/javascript-best-practices","title":"JavaScript Best Practices","description":"Modern JavaScript development guidelines for writing clean, maintainable, and performant code.","source":"@site/docs/coding-conventions/javascript-best-practices.md","sourceDirName":"coding-conventions","slug":"/coding-conventions/javascript-best-practices","permalink":"/fullstack-dev/docs/coding-conventions/javascript-best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/coding-conventions/javascript-best-practices.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Coding Conventions & Best Practices","permalink":"/fullstack-dev/docs/coding-conventions/"},"next":{"title":"TypeScript Guidelines","permalink":"/fullstack-dev/docs/coding-conventions/typescript-guidelines"}}');var t=r(5813),a=r(5741);const i={},o="JavaScript Best Practices",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"General Principles",id:"general-principles",level:2},{value:"Use Strict Mode",id:"use-strict-mode",level:3},{value:"Meaningful Variable Names",id:"meaningful-variable-names",level:3},{value:"Consistent Naming Conventions",id:"consistent-naming-conventions",level:3},{value:"ES6+ Features",id:"es6-features",level:2},{value:"Use const and let",id:"use-const-and-let",level:3},{value:"Arrow Functions",id:"arrow-functions",level:3},{value:"Destructuring",id:"destructuring",level:3},{value:"Template Literals",id:"template-literals",level:3},{value:"Spread Operator",id:"spread-operator",level:3},{value:"Default Parameters",id:"default-parameters",level:3},{value:"Code Organization",id:"code-organization",level:2},{value:"Module Structure",id:"module-structure",level:3},{value:"Barrel Exports",id:"barrel-exports",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Try-Catch Blocks",id:"try-catch-blocks",level:3},{value:"Promise Error Handling",id:"promise-error-handling",level:3},{value:"Custom Error Classes",id:"custom-error-classes",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Avoid Global Variables",id:"avoid-global-variables",level:3},{value:"Efficient Array Operations",id:"efficient-array-operations",level:3},{value:"Debouncing and Throttling",id:"debouncing-and-throttling",level:3},{value:"Testing Guidelines",id:"testing-guidelines",level:2},{value:"Unit Test Structure",id:"unit-test-structure",level:3},{value:"Mocking External Dependencies",id:"mocking-external-dependencies",level:3},{value:"Code Quality Tools",id:"code-quality-tools",level:2},{value:"ESLint Configuration",id:"eslint-configuration",level:3},{value:"Prettier Configuration",id:"prettier-configuration",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"javascript-best-practices",children:"JavaScript Best Practices"})}),"\n",(0,t.jsx)(n.p,{children:"Modern JavaScript development guidelines for writing clean, maintainable, and performant code."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#general-principles",children:"General Principles"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#es6-features",children:"ES6+ Features"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#code-organization",children:"Code Organization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#error-handling",children:"Error Handling"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#performance-considerations",children:"Performance Considerations"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#testing-guidelines",children:"Testing Guidelines"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"general-principles",children:"General Principles"}),"\n",(0,t.jsx)(n.h3,{id:"use-strict-mode",children:"Use Strict Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"'use strict';\n\n// All code should run in strict mode\nfunction calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price, 0);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"meaningful-variable-names",children:"Meaningful Variable Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nconst u = users.filter(u => u.a > 18);\n\n// \u2705 Good\nconst adultUsers = users.filter(user => user.age > 18);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"consistent-naming-conventions",children:"Consistent Naming Conventions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Variables and functions: camelCase\nconst userProfile = {};\nconst calculateUserAge = () => {};\n\n// Constants: UPPER_SNAKE_CASE\nconst MAX_RETRY_ATTEMPTS = 3;\nconst API_BASE_URL = 'https://api.example.com';\n\n// Classes: PascalCase\nclass UserManager {}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"es6-features",children:"ES6+ Features"}),"\n",(0,t.jsx)(n.h3,{id:"use-const-and-let",children:"Use const and let"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nvar userName = 'john';\nvar userAge = 25;\n\n// \u2705 Good\nconst userName = 'john';\nlet userAge = 25;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"arrow-functions",children:"Arrow Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(function(num) {\n  return num * 2;\n});\n\n// \u2705 Good\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\n\n// \u2705 For complex functions\nconst processUser = (user) => {\n  const { name, email, age } = user;\n  return {\n    displayName: name.toUpperCase(),\n    contact: email.toLowerCase(),\n    isAdult: age >= 18,\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"destructuring",children:"Destructuring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nfunction processUser(user) {\n  const name = user.name;\n  const email = user.email;\n  const age = user.age;\n  \n  return {\n    name: name,\n    email: email,\n    isAdult: age >= 18\n  };\n}\n\n// \u2705 Good\nfunction processUser(user) {\n  const { name, email, age } = user;\n  \n  return {\n    name,\n    email,\n    isAdult: age >= 18,\n  };\n}\n\n// Array destructuring\nconst [first, second, ...rest] = items;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"template-literals",children:"Template Literals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nconst message = 'Hello ' + user.name + ', you have ' + user.notifications.length + ' notifications.';\n\n// \u2705 Good\nconst message = `Hello ${user.name}, you have ${user.notifications.length} notifications.`;\n\n// Multi-line strings\nconst htmlTemplate = `\n  <div class=\"user-card\">\n    <h2>${user.name}</h2>\n    <p>${user.email}</p>\n  </div>\n`;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator",children:"Spread Operator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Array operations\nconst originalArray = [1, 2, 3];\nconst newArray = [...originalArray, 4, 5]; // [1, 2, 3, 4, 5]\n\n// Object operations\nconst originalUser = { name: 'John', age: 25 };\nconst updatedUser = { ...originalUser, age: 26, city: 'New York' };\n\n// Function parameters\nconst numbers = [1, 2, 3, 4, 5];\nconst max = Math.max(...numbers);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"default-parameters",children:"Default Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nfunction createUser(name, age, role) {\n  name = name || 'Anonymous';\n  age = age || 0;\n  role = role || 'user';\n  \n  return { name, age, role };\n}\n\n// \u2705 Good\nfunction createUser(name = 'Anonymous', age = 0, role = 'user') {\n  return { name, age, role };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"code-organization",children:"Code Organization"}),"\n",(0,t.jsx)(n.h3,{id:"module-structure",children:"Module Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// user.service.js\nimport { api } from './api.service.js';\nimport { logger } from './logger.service.js';\n\n// Private functions at the top\nfunction validateUserData(userData) {\n  // Validation logic\n}\n\nfunction formatUserResponse(user) {\n  // Formatting logic\n}\n\n// Main class or functions\nexport class UserService {\n  async createUser(userData) {\n    try {\n      validateUserData(userData);\n      const response = await api.post('/users', userData);\n      return formatUserResponse(response.data);\n    } catch (error) {\n      logger.error('Failed to create user:', error);\n      throw error;\n    }\n  }\n  \n  async getUserById(id) {\n    try {\n      const response = await api.get(`/users/${id}`);\n      return formatUserResponse(response.data);\n    } catch (error) {\n      logger.error(`Failed to fetch user ${id}:`, error);\n      throw error;\n    }\n  }\n}\n\n// Default export at the bottom\nexport default new UserService();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"barrel-exports",children:"Barrel Exports"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// services/index.js\nexport { UserService } from './user.service.js';\nexport { AuthService } from './auth.service.js';\nexport { ApiService } from './api.service.js';\nexport { LoggerService } from './logger.service.js';\n\n// Usage\nimport { UserService, AuthService } from './services';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"try-catch-blocks",children:"Try-Catch Blocks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nfunction processData(data) {\n  const result = JSON.parse(data);\n  return result.items.map(item => item.name);\n}\n\n// \u2705 Good\nfunction processData(data) {\n  try {\n    const result = JSON.parse(data);\n    \n    if (!result.items || !Array.isArray(result.items)) {\n      throw new Error('Invalid data structure: items array not found');\n    }\n    \n    return result.items.map(item => {\n      if (!item.name) {\n        throw new Error(`Invalid item: missing name property`);\n      }\n      return item.name;\n    });\n  } catch (error) {\n    logger.error('Failed to process data:', error);\n    throw new Error(`Data processing failed: ${error.message}`);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"promise-error-handling",children:"Promise Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nfetchUserData()\n  .then(data => processData(data))\n  .then(result => updateUI(result));\n\n// \u2705 Good\nasync function handleUserData() {\n  try {\n    const data = await fetchUserData();\n    const result = await processData(data);\n    updateUI(result);\n  } catch (error) {\n    logger.error('User data handling failed:', error);\n    showErrorMessage('Failed to load user data. Please try again.');\n  }\n}\n\n// Alternative with .catch()\nfetchUserData()\n  .then(data => processData(data))\n  .then(result => updateUI(result))\n  .catch(error => {\n    logger.error('User data handling failed:', error);\n    showErrorMessage('Failed to load user data. Please try again.');\n  });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-error-classes",children:"Custom Error Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"class ValidationError extends Error {\n  constructor(message, field) {\n    super(message);\n    this.name = 'ValidationError';\n    this.field = field;\n  }\n}\n\nclass ApiError extends Error {\n  constructor(message, status, endpoint) {\n    super(message);\n    this.name = 'ApiError';\n    this.status = status;\n    this.endpoint = endpoint;\n  }\n}\n\n// Usage\nfunction validateEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new ValidationError('Invalid email format', 'email');\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"avoid-global-variables",children:"Avoid Global Variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad\nlet globalCounter = 0;\nlet globalUserData = {};\n\nfunction incrementCounter() {\n  globalCounter++;\n}\n\n// \u2705 Good\nconst CounterModule = (() => {\n  let counter = 0;\n  \n  return {\n    increment: () => ++counter,\n    getCount: () => counter,\n    reset: () => { counter = 0; }\n  };\n})();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"efficient-array-operations",children:"Efficient Array Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u274c Bad - Multiple iterations\nconst users = getUsers();\nconst activeUsers = users.filter(user => user.active);\nconst activeUserNames = activeUsers.map(user => user.name);\nconst sortedNames = activeUserNames.sort();\n\n// \u2705 Good - Single iteration with chaining\nconst sortedActiveUserNames = getUsers()\n  .filter(user => user.active)\n  .map(user => user.name)\n  .sort();\n\n// \u2705 Better - Use reduce for complex operations\nconst userStats = users.reduce((stats, user) => {\n  stats.total++;\n  if (user.active) stats.active++;\n  if (user.premium) stats.premium++;\n  return stats;\n}, { total: 0, active: 0, premium: 0 });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"debouncing-and-throttling",children:"Debouncing and Throttling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Debounce function\nfunction debounce(func, delay) {\n  let timeoutId;\n  return function (...args) {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\n  };\n}\n\n// Throttle function\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function (...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// Usage\nconst debouncedSearch = debounce(searchFunction, 300);\nconst throttledScroll = throttle(scrollHandler, 100);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-guidelines",children:"Testing Guidelines"}),"\n",(0,t.jsx)(n.h3,{id:"unit-test-structure",children:"Unit Test Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// user.service.test.js\nimport { UserService } from './user.service.js';\nimport { jest } from '@jest/globals';\n\ndescribe('UserService', () => {\n  let userService;\n  \n  beforeEach(() => {\n    userService = new UserService();\n  });\n  \n  describe('createUser', () => {\n    it('should create a user with valid data', async () => {\n      // Arrange\n      const userData = {\n        name: 'John Doe',\n        email: 'john@example.com',\n        age: 25\n      };\n      \n      // Act\n      const result = await userService.createUser(userData);\n      \n      // Assert\n      expect(result).toHaveProperty('id');\n      expect(result.name).toBe(userData.name);\n      expect(result.email).toBe(userData.email);\n    });\n    \n    it('should throw error for invalid email', async () => {\n      // Arrange\n      const userData = {\n        name: 'John Doe',\n        email: 'invalid-email',\n        age: 25\n      };\n      \n      // Act & Assert\n      await expect(userService.createUser(userData))\n        .rejects\n        .toThrow('Invalid email format');\n    });\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mocking-external-dependencies",children:"Mocking External Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Mock API calls\njest.mock('./api.service.js', () => ({\n  api: {\n    post: jest.fn(),\n    get: jest.fn(),\n  }\n}));\n\nimport { api } from './api.service.js';\n\ndescribe('UserService with mocked API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  \n  it('should handle API errors gracefully', async () => {\n    // Arrange\n    const mockError = new Error('Network error');\n    api.post.mockRejectedValue(mockError);\n    \n    // Act & Assert\n    await expect(userService.createUser({}))\n      .rejects\n      .toThrow('Data processing failed');\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"code-quality-tools",children:"Code Quality Tools"}),"\n",(0,t.jsx)(n.h3,{id:"eslint-configuration",children:"ESLint Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// .eslintrc.json\n{\n  "extends": [\n    "eslint:recommended",\n    "@typescript-eslint/recommended"\n  ],\n  "rules": {\n    "no-console": "warn",\n    "no-unused-vars": "error",\n    "prefer-const": "error",\n    "no-var": "error",\n    "eqeqeq": "error",\n    "curly": "error"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"prettier-configuration",children:"Prettier Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'// .prettierrc\n{\n  "semi": true,\n  "trailingComma": "es5",\n  "singleQuote": true,\n  "printWidth": 80,\n  "tabWidth": 2,\n  "useTabs": false\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use modern ES6+ features"})," for cleaner, more readable code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Write meaningful names"})," for variables, functions, and classes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle errors gracefully"})," with proper try-catch blocks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimize performance"})," by avoiding unnecessary operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Write comprehensive tests"})," for all functions and edge cases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use linting and formatting tools"})," to maintain code quality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document complex logic"})," with clear comments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Follow consistent patterns"})," throughout the codebase"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);