"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9477],{6353:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"security-practices/dast-owasp-zap-github-actions","title":"Dynamic Application Security Testing (DAST) with OWASP ZAP and GitHub Actions","description":"This comprehensive guide covers implementing Dynamic Application Security Testing (DAST) in your CI/CD pipeline using OWASP ZAP and GitHub Actions to automatically detect security vulnerabilities in running applications.","source":"@site/docs/security-practices/dast-owasp-zap-github-actions.md","sourceDirName":"security-practices","slug":"/security-practices/dast-owasp-zap-github-actions","permalink":"/fullstack-dev/docs/security-practices/dast-owasp-zap-github-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/security-practices/dast-owasp-zap-github-actions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Security Testing Implementation Guide","permalink":"/fullstack-dev/docs/security-practices/security-implementation/security-testing"},"next":{"title":"Security Monitoring & Observability Implementation Guide","permalink":"/fullstack-dev/docs/security-practices/security-implementation/security-monitoring"}}');var s=t(5813),r=t(7814);const a={},o="Dynamic Application Security Testing (DAST) with OWASP ZAP and GitHub Actions",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Benefits of DAST",id:"benefits-of-dast",level:3},{value:"OWASP ZAP (Zed Attack Proxy)",id:"owasp-zap-zed-attack-proxy",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Implementation Strategy",id:"implementation-strategy",level:2},{value:"1. DAST Integration Levels",id:"1-dast-integration-levels",level:3},{value:"2. Scanning Approaches",id:"2-scanning-approaches",level:3},{value:"GitHub Actions Implementation",id:"github-actions-implementation",level:2},{value:"1. Basic OWASP ZAP Workflow",id:"1-basic-owasp-zap-workflow",level:3},{value:"2. Advanced Multi-Stage DAST Pipeline",id:"2-advanced-multi-stage-dast-pipeline",level:3},{value:"3. Authenticated DAST Scanning",id:"3-authenticated-dast-scanning",level:3},{value:"4. Advanced OWASP ZAP with Action-AF (Auto-Filter)",id:"4-advanced-owasp-zap-with-action-af-auto-filter",level:3},{value:"Key Features of Action-AF",id:"key-features-of-action-af",level:4},{value:"Basic Action-AF Implementation",id:"basic-action-af-implementation",level:4},{value:"Production-Ready Action-AF Configuration",id:"production-ready-action-af-configuration",level:4},{value:"Action-AF Configuration Files",id:"action-af-configuration-files",level:4},{value:"Baseline Rules Configuration (<code>.zap/rules/baseline-af.json</code>)",id:"baseline-rules-configuration-zaprulesbaseline-afjson",level:5},{value:"Advanced Filter Configuration (<code>.zap/filters/baseline-filters.json</code>)",id:"advanced-filter-configuration-zapfiltersbaseline-filtersjson",level:5},{value:"Configuration Files",id:"configuration-files",level:2},{value:"1. ZAP Baseline Rules",id:"1-zap-baseline-rules",level:3},{value:"2. ZAP Context Configuration",id:"2-zap-context-configuration",level:3},{value:"Processing Scripts",id:"processing-scripts",level:2},{value:"1. Results Processing Script",id:"1-results-processing-script",level:3},{value:"2. Security Gate Script",id:"2-security-gate-script",level:3},{value:"3. Action-AF Results Enhancement Script",id:"3-action-af-results-enhancement-script",level:3},{value:"4. Consolidated Results Processing Script",id:"4-consolidated-results-processing-script",level:3},{value:"Docker Integration",id:"docker-integration",level:2},{value:"1. Custom ZAP Container",id:"1-custom-zap-container",level:3},{value:"2. ZAP Configuration Script",id:"2-zap-configuration-script",level:3},{value:"Advanced Configurations",id:"advanced-configurations",level:2},{value:"1. Multi-Application Pipeline",id:"1-multi-application-pipeline",level:3},{value:"2. Custom Rule Configuration",id:"2-custom-rule-configuration",level:3},{value:"Reporting and Integration",id:"reporting-and-integration",level:2},{value:"1. Slack Notification",id:"1-slack-notification",level:3},{value:"2. JIRA Integration",id:"2-jira-integration",level:3},{value:"Action-AF Advanced Features and Best Practices",id:"action-af-advanced-features-and-best-practices",level:2},{value:"Action-AF Unique Capabilities",id:"action-af-unique-capabilities",level:3},{value:"1. Intelligent Vulnerability Filtering",id:"1-intelligent-vulnerability-filtering",level:4},{value:"2. Advanced Risk Assessment",id:"2-advanced-risk-assessment",level:4},{value:"3. Integration with Security Orchestration",id:"3-integration-with-security-orchestration",level:4},{value:"Production Implementation Strategies",id:"production-implementation-strategies",level:3},{value:"1. Multi-Stage Security Pipeline",id:"1-multi-stage-security-pipeline",level:4},{value:"2. Risk-Based Scanning Strategy",id:"2-risk-based-scanning-strategy",level:4},{value:"3. Dynamic Configuration Management",id:"3-dynamic-configuration-management",level:4},{value:"Advanced Monitoring and Alerting",id:"advanced-monitoring-and-alerting",level:3},{value:"1. Real-time Security Dashboard Integration",id:"1-real-time-security-dashboard-integration",level:4},{value:"2. Automated Incident Response",id:"2-automated-incident-response",level:4},{value:"Performance Optimization Techniques",id:"performance-optimization-techniques",level:3},{value:"1. Intelligent Scan Scoping",id:"1-intelligent-scan-scoping",level:4},{value:"2. Caching and Incremental Scanning",id:"2-caching-and-incremental-scanning",level:4},{value:"Compliance and Governance",id:"compliance-and-governance",level:3},{value:"1. Automated Compliance Reporting",id:"1-automated-compliance-reporting",level:4},{value:"2. Security Policy Enforcement",id:"2-security-policy-enforcement",level:4},{value:"Team Collaboration Features",id:"team-collaboration-features",level:3},{value:"1. Multi-Team Workflow Integration",id:"1-multi-team-workflow-integration",level:4},{value:"2. Knowledge Base Integration",id:"2-knowledge-base-integration",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Scanning Strategy",id:"1-scanning-strategy",level:3},{value:"2. Performance Optimization",id:"2-performance-optimization",level:3},{value:"3. Security Considerations",id:"3-security-considerations",level:3},{value:"4. Result Management",id:"4-result-management",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Action-AF Specific Troubleshooting",id:"action-af-specific-troubleshooting",level:3},{value:"1. Filter Configuration Issues",id:"1-filter-configuration-issues",level:4},{value:"2. Performance Degradation",id:"2-performance-degradation",level:4},{value:"3. Authentication Context Issues",id:"3-authentication-context-issues",level:4},{value:"4. Integration Failures",id:"4-integration-failures",level:4},{value:"5. Custom Rules Not Applied",id:"5-custom-rules-not-applied",level:4},{value:"Action-AF Advanced Configuration Examples",id:"action-af-advanced-configuration-examples",level:2},{value:"Enterprise Security Configuration",id:"enterprise-security-configuration",level:3},{value:"Custom Action-AF Extension",id:"custom-action-af-extension",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2},{value:"Core Documentation",id:"core-documentation",level:3},{value:"Action-AF Specific Resources",id:"action-af-specific-resources",level:3},{value:"Security Standards and Frameworks",id:"security-standards-and-frameworks",level:3},{value:"Integration Platforms",id:"integration-platforms",level:3},{value:"Advanced Topics",id:"advanced-topics",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"dynamic-application-security-testing-dast-with-owasp-zap-and-github-actions",children:"Dynamic Application Security Testing (DAST) with OWASP ZAP and GitHub Actions"})}),"\n",(0,s.jsx)(e.p,{children:"This comprehensive guide covers implementing Dynamic Application Security Testing (DAST) in your CI/CD pipeline using OWASP ZAP and GitHub Actions to automatically detect security vulnerabilities in running applications."}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(e.p,{children:"Dynamic Application Security Testing (DAST) is a security testing approach that analyzes running applications to identify vulnerabilities that could be exploited by attackers. Unlike Static Application Security Testing (SAST), DAST tests applications from the outside, simulating real-world attack scenarios."}),"\n",(0,s.jsx)(e.h3,{id:"benefits-of-dast",children:"Benefits of DAST"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Runtime Vulnerability Detection"}),": Identifies issues only visible when the application is running"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Real-world Testing"}),": Tests the application as an attacker would see it"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Technology Agnostic"}),": Works with any web application regardless of programming language"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Configuration Issues"}),": Detects server misconfigurations and deployment issues"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authentication Testing"}),": Can test authenticated areas of applications"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"owasp-zap-zed-attack-proxy",children:"OWASP ZAP (Zed Attack Proxy)"}),"\n",(0,s.jsx)(e.p,{children:"OWASP ZAP is a free, open-source web application security scanner maintained by the OWASP Foundation. It's designed to be used by both beginners and security professionals."}),"\n",(0,s.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Automated Scanning"}),": Passive and active security scanning"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Manual Testing"}),": Interactive proxy for manual security testing"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"API Support"}),": REST API and command-line interface"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Extensible"}),": Plugin architecture with marketplace"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"CI/CD Integration"}),": Docker images and automation scripts"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"implementation-strategy",children:"Implementation Strategy"}),"\n",(0,s.jsx)(e.h3,{id:"1-dast-integration-levels",children:"1. DAST Integration Levels"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-mermaid",children:"graph TD\n    A[Development] --\x3e B[Pull Request]\n    B --\x3e C[DAST Baseline Scan]\n    C --\x3e D[Merge to Main]\n    D --\x3e E[Full DAST Scan]\n    E --\x3e F[Security Report]\n    F --\x3e G[Deployment Gate]\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-scanning-approaches",children:"2. Scanning Approaches"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Baseline Scan"}),": Quick scan for common vulnerabilities"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Full Scan"}),": Comprehensive security assessment"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"API Scan"}),": Specialized scanning for REST/GraphQL APIs"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Authenticated Scan"}),": Testing with user credentials"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"github-actions-implementation",children:"GitHub Actions Implementation"}),"\n",(0,s.jsx)(e.h3,{id:"1-basic-owasp-zap-workflow",children:"1. Basic OWASP ZAP Workflow"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/dast-scan.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"name: DAST Security Scan\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    # Run daily at 2 AM UTC\n    - cron: '0 2 * * *'\n\nenv:\n  TARGET_URL: ${{ secrets.TARGET_URL || 'http://localhost:3000' }}\n\njobs:\n  dast-scan:\n    runs-on: ubuntu-latest\n    name: DAST Security Scan\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup application\n      run: |\n        # Start your application (example with Docker)\n        docker-compose up -d\n        \n        # Wait for application to be ready\n        timeout 300 bash -c 'until curl -f ${{ env.TARGET_URL }}/health; do sleep 5; done'\n    \n    - name: Run OWASP ZAP Baseline Scan\n      uses: zaproxy/action-baseline@v0.10.0\n      with:\n        target: ${{ env.TARGET_URL }}\n        rules_file_name: '.zap/rules/baseline.tsv'\n        cmd_options: '-a'\n        \n    - name: Upload ZAP results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: zap-baseline-report\n        path: report_html.html\n        \n    - name: Create security issue\n      if: failure()\n      uses: actions/github-script@v7\n      with:\n        script: |\n          const fs = require('fs');\n          const report = fs.readFileSync('report_html.html', 'utf8');\n          \n          github.rest.issues.create({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            title: 'DAST Security Vulnerabilities Detected',\n            body: `## Security Scan Results\n            \n            DAST scan has detected security vulnerabilities in the application.\n            \n            **Scan Details:**\n            - Target: ${{ env.TARGET_URL }}\n            - Commit: ${{ github.sha }}\n            - Branch: ${{ github.ref_name }}\n            \n            Please review the detailed report in the artifacts.`,\n            labels: ['security', 'vulnerability', 'dast']\n          });\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-advanced-multi-stage-dast-pipeline",children:"2. Advanced Multi-Stage DAST Pipeline"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/advanced-dast.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"name: Advanced DAST Pipeline\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    outputs:\n      app-url: ${{ steps.deploy.outputs.app-url }}\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Build application\n      run: |\n        docker build -t test-app .\n        \n    - name: Deploy to test environment\n      id: deploy\n      run: |\n        # Deploy to staging/test environment\n        docker run -d -p 3000:3000 --name test-app test-app\n        echo \"app-url=http://localhost:3000\" >> $GITHUB_OUTPUT\n        \n        # Health check\n        timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'\n\n  baseline-scan:\n    needs: build-and-deploy\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: ZAP Baseline Scan\n      uses: zaproxy/action-baseline@v0.10.0\n      with:\n        target: ${{ needs.build-and-deploy.outputs.app-url }}\n        rules_file_name: '.zap/rules/baseline.tsv'\n        cmd_options: '-a -j -m 2 -T 5'\n        \n    - name: Upload baseline results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: zap-baseline-results\n        path: |\n          report_html.html\n          report_json.json\n\n  full-scan:\n    needs: build-and-deploy\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: ZAP Full Scan\n      uses: zaproxy/action-full-scan@v0.8.0\n      with:\n        target: ${{ needs.build-and-deploy.outputs.app-url }}\n        rules_file_name: '.zap/rules/full-scan.tsv'\n        cmd_options: '-a -j -m 10 -T 60'\n        \n    - name: Upload full scan results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: zap-full-scan-results\n        path: |\n          report_html.html\n          report_json.json\n          \n    - name: Process results\n      run: |\n        # Parse JSON report for metrics\n        python3 .github/scripts/process-zap-results.py report_json.json\n\n  api-scan:\n    needs: build-and-deploy\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Generate OpenAPI spec\n      run: |\n        # Generate or copy OpenAPI specification\n        curl ${{ needs.build-and-deploy.outputs.app-url }}/api/docs/json > openapi.json\n        \n    - name: ZAP API Scan\n      uses: zaproxy/action-api-scan@v0.6.0\n      with:\n        target: ${{ needs.build-and-deploy.outputs.app-url }}\n        format: openapi\n        api_file: openapi.json\n        cmd_options: '-a -j'\n        \n    - name: Upload API scan results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: zap-api-scan-results\n        path: |\n          report_html.html\n          report_json.json\n\n  security-gate:\n    needs: [baseline-scan, full-scan, api-scan]\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n    - name: Download all artifacts\n      uses: actions/download-artifact@v4\n      \n    - name: Security gate check\n      run: |\n        # Process all scan results\n        python3 .github/scripts/security-gate.py \\\n          --baseline zap-baseline-results/report_json.json \\\n          --full zap-full-scan-results/report_json.json \\\n          --api zap-api-scan-results/report_json.json \\\n          --threshold-high 0 \\\n          --threshold-medium 5\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-authenticated-dast-scanning",children:"3. Authenticated DAST Scanning"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/auth-dast.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'name: Authenticated DAST Scan\n\non:\n  schedule:\n    - cron: \'0 6 * * 1\'  # Weekly on Monday\n  workflow_dispatch:\n\njobs:\n  authenticated-scan:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup test environment\n      run: |\n        docker-compose -f docker-compose.test.yml up -d\n        sleep 30\n        \n    - name: Create test user\n      run: |\n        # Create test user account\n        curl -X POST http://localhost:3000/api/users \\\n          -H "Content-Type: application/json" \\\n          -d \'{"username":"testuser","password":"TestPass123!","email":"test@example.com"}\'\n        \n    - name: Run authenticated ZAP scan\n      run: |\n        docker run --rm \\\n          --network host \\\n          -v $(pwd)/.zap/auth:/zap/auth \\\n          -v $(pwd)/.zap/context:/zap/context \\\n          -v $(pwd)/reports:/zap/reports \\\n          owasp/zap2docker-stable \\\n          zap-full-scan.py \\\n          -t http://localhost:3000 \\\n          -n /zap/context/default.context \\\n          -U testuser \\\n          -z "-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true" \\\n          -J zap-auth-report.json \\\n          -H zap-auth-report.html\n          \n    - name: Upload authenticated scan results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: authenticated-scan-results\n        path: reports/\n'})}),"\n",(0,s.jsx)(e.h3,{id:"4-advanced-owasp-zap-with-action-af-auto-filter",children:"4. Advanced OWASP ZAP with Action-AF (Auto-Filter)"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"zaproxy/action-af@v0.2.0"})," action provides advanced automation and filtering capabilities for ZAP scans, including intelligent vulnerability filtering, custom rules, and enhanced reporting features."]}),"\n",(0,s.jsx)(e.h4,{id:"key-features-of-action-af",children:"Key Features of Action-AF"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Intelligent Filtering"}),": Automatically filters false positives and duplicates"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Custom Rule Engine"}),": Define custom security rules and policies"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Advanced Reporting"}),": Enhanced HTML/JSON reports with filtering details"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Baseline Comparison"}),": Compare scan results against previous baselines"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Risk Assessment"}),": Automated risk scoring and prioritization"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"CI/CD Integration"}),": Seamless integration with deployment pipelines"]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"basic-action-af-implementation",children:"Basic Action-AF Implementation"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/zap-action-af.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"name: ZAP Advanced Filtering Scan\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      target_url:\n        description: 'Target URL to scan'\n        required: true\n        default: 'https://example.com'\n      scan_type:\n        description: 'Type of scan to perform'\n        required: true\n        default: 'baseline'\n        type: choice\n        options:\n        - baseline\n        - full\n        - api\n\nenv:\n  TARGET_URL: ${{ github.event.inputs.target_url || 'http://localhost:3000' }}\n  SCAN_TYPE: ${{ github.event.inputs.scan_type || 'baseline' }}\n\njobs:\n  zap-af-scan:\n    runs-on: ubuntu-latest\n    name: ZAP Advanced Filtering Scan\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      \n    - name: Setup application environment\n      if: env.TARGET_URL == 'http://localhost:3000'\n      run: |\n        # Start application for testing\n        docker-compose -f docker-compose.test.yml up -d\n        \n        # Wait for application to be ready\n        timeout 120 bash -c 'until curl -f ${{ env.TARGET_URL }}/health; do sleep 5; done'\n        \n        # Seed test data if needed\n        curl -X POST ${{ env.TARGET_URL }}/api/test/seed\n    \n    - name: ZAP Action-AF Baseline Scan\n      if: env.SCAN_TYPE == 'baseline'\n      uses: zaproxy/action-af@v0.2.0\n      with:\n        target: ${{ env.TARGET_URL }}\n        scan_type: 'baseline'\n        rules_file_name: '.zap/rules/baseline-af.json'\n        filter_file_name: '.zap/filters/baseline-filters.json'\n        cmd_options: >-\n          -a\n          -j\n          -m 2\n          -T 5\n          -z \"-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true\"\n        fail_action: 'warn'\n        allow_issue_writing: true\n        \n    - name: ZAP Action-AF Full Scan\n      if: env.SCAN_TYPE == 'full'\n      uses: zaproxy/action-af@v0.2.0\n      with:\n        target: ${{ env.TARGET_URL }}\n        scan_type: 'full'\n        rules_file_name: '.zap/rules/full-scan-af.json'\n        filter_file_name: '.zap/filters/full-scan-filters.json'\n        cmd_options: >-\n          -a\n          -j\n          -m 10\n          -T 60\n          -z \"-config spider.maxDuration=30 -config scanner.maxScanDurationInMins=60\"\n        fail_action: 'error'\n        allow_issue_writing: true\n        issue_title: 'ZAP Full Scan Security Issues Detected'\n        \n    - name: ZAP Action-AF API Scan\n      if: env.SCAN_TYPE == 'api'\n      uses: zaproxy/action-af@v0.2.0\n      with:\n        target: ${{ env.TARGET_URL }}\n        scan_type: 'api'\n        api_spec: '.zap/specs/openapi.yaml'\n        rules_file_name: '.zap/rules/api-scan-af.json'\n        filter_file_name: '.zap/filters/api-filters.json'\n        cmd_options: >-\n          -a\n          -j\n          -z \"-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true\"\n        fail_action: 'warn'\n        allow_issue_writing: false\n        \n    - name: Upload ZAP Action-AF Results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: zap-af-scan-results-${{ env.SCAN_TYPE }}\n        path: |\n          report_html.html\n          report_json.json\n          report_md.md\n          zap_af_summary.json\n          \n    - name: Comment PR with Results\n      if: github.event_name == 'pull_request'\n      uses: actions/github-script@v7\n      with:\n        script: |\n          const fs = require('fs');\n          \n          try {\n            const summary = JSON.parse(fs.readFileSync('zap_af_summary.json', 'utf8'));\n            const markdownReport = fs.readFileSync('report_md.md', 'utf8');\n            \n            const comment = `## \ud83d\udd12 ZAP Action-AF Security Scan Results\n            \n            **Scan Type:** \\`${{ env.SCAN_TYPE }}\\`\n            **Target:** \\`${{ env.TARGET_URL }}\\`\n            **Commit:** \\`${{ github.sha }}\\`\n            \n            ### Summary\n            - **Total Alerts:** ${summary.total_alerts}\n            - **High Risk:** ${summary.high_risk}\n            - **Medium Risk:** ${summary.medium_risk}\n            - **Low Risk:** ${summary.low_risk}\n            - **Informational:** ${summary.informational}\n            - **Filtered Alerts:** ${summary.filtered_alerts}\n            \n            ### Filter Statistics\n            - **False Positives Filtered:** ${summary.false_positives_filtered}\n            - **Duplicates Removed:** ${summary.duplicates_removed}\n            - **Risk Level Adjustments:** ${summary.risk_adjustments}\n            \n            <details>\n            <summary>\ud83d\udccb Detailed Report</summary>\n            \n            ${markdownReport}\n            \n            </details>\n            \n            For complete results, check the [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).\n            `;\n            \n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: comment\n            });\n          } catch (error) {\n            console.log('Could not post comment:', error.message);\n          }\n"})}),"\n",(0,s.jsx)(e.h4,{id:"production-ready-action-af-configuration",children:"Production-Ready Action-AF Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/production-zap-af.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"name: Production ZAP Action-AF Pipeline\n\non:\n  schedule:\n    - cron: '0 2 * * 1,3,5'  # Monday, Wednesday, Friday at 2 AM\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Environment to scan'\n        required: true\n        default: 'staging'\n        type: choice\n        options:\n        - staging\n        - production\n      scan_depth:\n        description: 'Scan depth level'\n        required: true\n        default: 'standard'\n        type: choice\n        options:\n        - quick\n        - standard\n        - deep\n\njobs:\n  matrix-scan:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        scan_type: [baseline, full, api]\n        environment: [staging, production]\n      fail-fast: false\n      \n    name: ZAP AF ${{ matrix.scan_type }} - ${{ matrix.environment }}\n    \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n      \n    - name: Set environment variables\n      run: |\n        case \"${{ matrix.environment }}\" in\n          staging)\n            echo \"TARGET_URL=${{ secrets.STAGING_URL }}\" >> $GITHUB_ENV\n            echo \"AUTH_TOKEN=${{ secrets.STAGING_TOKEN }}\" >> $GITHUB_ENV\n            ;;\n          production)\n            echo \"TARGET_URL=${{ secrets.PRODUCTION_URL }}\" >> $GITHUB_ENV\n            echo \"AUTH_TOKEN=${{ secrets.PRODUCTION_TOKEN }}\" >> $GITHUB_ENV\n            ;;\n        esac\n        \n        case \"${{ github.event.inputs.scan_depth || 'standard' }}\" in\n          quick)\n            echo \"SCAN_TIMEOUT=5\" >> $GITHUB_ENV\n            echo \"MAX_DURATION=10\" >> $GITHUB_ENV\n            ;;\n          standard)\n            echo \"SCAN_TIMEOUT=15\" >> $GITHUB_ENV\n            echo \"MAX_DURATION=30\" >> $GITHUB_ENV\n            ;;\n          deep)\n            echo \"SCAN_TIMEOUT=30\" >> $GITHUB_ENV\n            echo \"MAX_DURATION=120\" >> $GITHUB_ENV\n            ;;\n        esac\n    \n    - name: Download baseline data\n      run: |\n        # Download previous scan results for comparison\n        gh api repos/${{ github.repository }}/actions/artifacts \\\n          --jq '.artifacts[] | select(.name | contains(\"baseline-${{ matrix.environment }}\")) | .archive_download_url' \\\n          | head -1 \\\n          | xargs -I {} gh api {} > previous-baseline.zip || true\n          \n        if [ -f previous-baseline.zip ]; then\n          unzip -q previous-baseline.zip -d previous-results/ || true\n        fi\n      env:\n        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: ZAP Action-AF Production Scan\n      uses: zaproxy/action-af@v0.2.0\n      with:\n        target: ${{ env.TARGET_URL }}\n        scan_type: ${{ matrix.scan_type }}\n        rules_file_name: '.zap/rules/${{ matrix.environment }}-${{ matrix.scan_type }}-af.json'\n        filter_file_name: '.zap/filters/${{ matrix.environment }}-filters.json'\n        baseline_file_name: 'previous-results/report_json.json'\n        cmd_options: >-\n          -a\n          -j\n          -T ${{ env.SCAN_TIMEOUT }}\n          -z \"-config spider.maxDuration=${{ env.MAX_DURATION }}\n              -config scanner.maxScanDurationInMins=${{ env.MAX_DURATION }}\n              -config api.addrs.addr.name=.*\n              -config api.addrs.addr.regex=true\"\n        auth_header_name: 'Authorization'\n        auth_header_value: 'Bearer ${{ env.AUTH_TOKEN }}'\n        fail_action: ${{ matrix.environment == 'production' && 'error' || 'warn' }}\n        allow_issue_writing: true\n        issue_title: 'ZAP ${{ matrix.scan_type }} Security Issues - ${{ matrix.environment }}'\n        issue_labels: 'security,zap,${{ matrix.scan_type }},${{ matrix.environment }}'\n        \n    - name: Process and enhance results\n      run: |\n        # Create enhanced summary with trend analysis\n        python3 .github/scripts/enhance-zap-af-results.py \\\n          --current report_json.json \\\n          --baseline previous-results/report_json.json \\\n          --environment ${{ matrix.environment }} \\\n          --scan-type ${{ matrix.scan_type }} \\\n          --output enhanced-summary.json\n          \n    - name: Upload results with retention\n      uses: actions/upload-artifact@v4\n      with:\n        name: zap-af-${{ matrix.environment }}-${{ matrix.scan_type }}-${{ github.run_number }}\n        path: |\n          report_html.html\n          report_json.json\n          report_md.md\n          zap_af_summary.json\n          enhanced-summary.json\n        retention-days: ${{ matrix.environment == 'production' && 90 || 30 }}\n        \n    - name: Update security dashboard\n      if: matrix.environment == 'production'\n      run: |\n        # Update security metrics dashboard\n        curl -X POST \"${{ secrets.SECURITY_DASHBOARD_URL }}/api/zap-results\" \\\n          -H \"Authorization: Bearer ${{ secrets.DASHBOARD_TOKEN }}\" \\\n          -H \"Content-Type: application/json\" \\\n          -d @enhanced-summary.json\n          \n    - name: Notify security team\n      if: matrix.environment == 'production' && contains(fromJSON(steps.zap-scan.outputs.summary).high_risk, '0') == false\n      uses: 8398a7/action-slack@v3\n      with:\n        status: custom\n        custom_payload: |\n          {\n            attachments: [{\n              color: 'danger',\n              title: 'High Risk Security Issues Detected',\n              fields: [{\n                title: 'Environment',\n                value: '${{ matrix.environment }}',\n                short: true\n              }, {\n                title: 'Scan Type',\n                value: '${{ matrix.scan_type }}',\n                short: true\n              }, {\n                title: 'High Risk Issues',\n                value: '${{ fromJSON(steps.zap-scan.outputs.summary).high_risk }}',\n                short: true\n              }],\n              actions: [{\n                type: 'button',\n                text: 'View Results',\n                url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'\n              }]\n            }]\n          }\n      env:\n        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_SECURITY_WEBHOOK }}\n\n  consolidate-results:\n    needs: matrix-scan\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n    - name: Download all scan results\n      uses: actions/download-artifact@v4\n      with:\n        pattern: zap-af-*-${{ github.run_number }}\n        merge-multiple: true\n        \n    - name: Generate consolidated security report\n      run: |\n        python3 .github/scripts/consolidate-zap-af-results.py \\\n          --input-dir . \\\n          --output consolidated-security-report.html \\\n          --json-output consolidated-results.json\n          \n    - name: Upload consolidated report\n      uses: actions/upload-artifact@v4\n      with:\n        name: consolidated-security-report-${{ github.run_number }}\n        path: |\n          consolidated-security-report.html\n          consolidated-results.json\n        retention-days: 180\n"})}),"\n",(0,s.jsx)(e.h4,{id:"action-af-configuration-files",children:"Action-AF Configuration Files"}),"\n",(0,s.jsxs)(e.h5,{id:"baseline-rules-configuration-zaprulesbaseline-afjson",children:["Baseline Rules Configuration (",(0,s.jsx)(e.code,{children:".zap/rules/baseline-af.json"}),")"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "scan_policy": {\n    "name": "Baseline-AF Policy",\n    "description": "Advanced filtering baseline scan policy",\n    "scanner_config": {\n      "attack_strength": "MEDIUM",\n      "alert_threshold": "MEDIUM",\n      "scan_speed": "FAST"\n    }\n  },\n  "rules": {\n    "enabled_scanners": [\n      "10003", // Persistent XSS (Prime)\n      "10004", // Persistent XSS (Spider)\n      "10005", // Persistent XSS (Tag)\n      "10006", // Persistent XSS (Attribute)\n      "10015", // Vulnerable JS Library\n      "10020", // X-Frame-Options Missing\n      "10021", // X-Content-Type-Options Missing\n      "10023", // Information Disclosure - Debug Error Messages\n      "10025", // Information Disclosure - Sensitive Information in URL\n      "10027", // Information Disclosure - Suspicious Comments\n      "10032", // Viewstate Scanner\n      "10035", // Strict-Transport-Security Missing\n      "10036", // Server Leaks Version Information\n      "10040", // Secure Pages Include Mixed Content\n      "10041", // HTTP to HTTPS Insecure Transition\n      "10042", // HTTPS to HTTP Insecure Transition\n      "10043", // User Controllable JavaScript Event\n      "10048", // Remote Code Execution - Shell Shock\n      "10049", // Content Cacheability\n      "10050", // Retrieved from Cache\n      "10051", // Relative Path Overwrite\n      "10052", // X-ChromeLogger-Data Header Information Leak\n      "10054", // Cookie without SameSite Attribute\n      "10055", // CSP Scanner\n      "10056", // X-Debug-Token Information Leak\n      "10057", // Username Hash Found\n      "10061", // X-AspNet-Version Response Header\n      "10062", // PII Scanner\n      "10063", // Permissions Policy Header Not Set\n      "10094", // Base64 Disclosure\n      "10095", // Backup File Disclosure\n      "10096", // Timestamp Disclosure\n      "10097", // Hash Disclosure\n      "10098", // Cross-Domain Misconfiguration\n      "10105", // Weak Authentication Method\n      "10108", // Reverse Tabnabbing\n      "10109", // Modern Web Application\n      "10110"  // Dangerous JS Functions\n    ],\n    "disabled_scanners": [],\n    "custom_rules": [\n      {\n        "rule_id": "CUSTOM_001",\n        "name": "Custom Authentication Bypass Check",\n        "description": "Checks for authentication bypass vulnerabilities",\n        "pattern": "(?i)(admin|root|test|guest):(admin|root|test|guest|password|123456)",\n        "risk_level": "HIGH"\n      },\n      {\n        "rule_id": "CUSTOM_002", \n        "name": "API Key Exposure",\n        "description": "Detects exposed API keys in responses",\n        "pattern": "(?i)(api[_-]?key|apikey|access[_-]?token)\\\\s*[:=]\\\\s*[\'\\"]?([a-zA-Z0-9]{20,})",\n        "risk_level": "HIGH"\n      }\n    ]\n  },\n  "filtering": {\n    "auto_filter": true,\n    "confidence_threshold": "MEDIUM",\n    "risk_threshold": "LOW",\n    "false_positive_patterns": [\n      "jQuery.*version.*detected",\n      "Modernizr.*detected",\n      "Bootstrap.*detected"\n    ]\n  }\n}\n'})}),"\n",(0,s.jsxs)(e.h5,{id:"advanced-filter-configuration-zapfiltersbaseline-filtersjson",children:["Advanced Filter Configuration (",(0,s.jsx)(e.code,{children:".zap/filters/baseline-filters.json"}),")"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "filter_version": "1.0",\n  "global_filters": {\n    "exclude_urls": [\n      ".*\\\\.css$",\n      ".*\\\\.js$",\n      ".*\\\\.png$",\n      ".*\\\\.jpg$",\n      ".*\\\\.gif$",\n      ".*\\\\.ico$",\n      ".*\\\\.woff$",\n      ".*\\\\.woff2$",\n      ".*\\\\.ttf$",\n      ".*logout.*",\n      ".*signout.*"\n    ],\n    "exclude_parameters": [\n      "_token",\n      "csrf_token",\n      "authenticity_token",\n      "__RequestVerificationToken"\n    ],\n    "exclude_headers": [\n      "X-Requested-With",\n      "X-CSRF-Token",\n      "X-XSRF-TOKEN"\n    ]\n  },\n  "vulnerability_filters": {\n    "false_positive_rules": [\n      {\n        "rule_id": "10021",\n        "name": "X-Content-Type-Options Missing",\n        "filter_condition": {\n          "url_pattern": ".*\\\\.(css|js|png|jpg|gif|ico|woff|woff2|ttf)$",\n          "reason": "Static assets don\'t require X-Content-Type-Options"\n        }\n      },\n      {\n        "rule_id": "10020",\n        "name": "X-Frame-Options Missing", \n        "filter_condition": {\n          "url_pattern": ".*/api/.*",\n          "reason": "API endpoints don\'t need X-Frame-Options"\n        }\n      },\n      {\n        "rule_id": "10015",\n        "name": "Vulnerable JS Library",\n        "filter_condition": {\n          "description_pattern": "(?i)jquery.*1\\\\.[0-7]\\\\.",\n          "reason": "Legacy jQuery version is acceptable for this application"\n        }\n      }\n    ],\n    "risk_adjustments": [\n      {\n        "rule_id": "10027",\n        "name": "Information Disclosure - Suspicious Comments",\n        "adjustment": {\n          "from_risk": "MEDIUM",\n          "to_risk": "LOW",\n          "condition": "description contains \'TODO\' or \'FIXME\'",\n          "reason": "Development comments pose minimal risk in non-production"\n        }\n      }\n    ],\n    "severity_overrides": [\n      {\n        "rule_id": "10054",\n        "name": "Cookie without SameSite Attribute",\n        "override": {\n          "new_risk": "HIGH",\n          "condition": "cookie_name matches \'(session|auth|login)\'",\n          "reason": "Authentication cookies require SameSite protection"\n        }\n      }\n    ]\n  },\n  "reporting_filters": {\n    "group_similar": true,\n    "deduplicate": true,\n    "merge_threshold": 0.8,\n    "summary_filters": {\n      "exclude_informational": false,\n      "minimum_instances": 1,\n      "consolidate_by_type": true\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,s.jsx)(e.h3,{id:"1-zap-baseline-rules",children:"1. ZAP Baseline Rules"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".zap/rules/baseline.tsv"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsv",children:'10009\tIGNORE\t(Fingerprinting)\n10010\tIGNORE\t(Cookie No HttpOnly Flag)\n10011\tIGNORE\t(Cookie Without Secure Flag)\n10015\tIGNORE\t(Incomplete or No Cache-control and Pragma HTTP Header Set)\n10017\tIGNORE\t(Cross-Domain JavaScript Source File Inclusion)\n10019\tIGNORE\t(Content-Type Header Missing)\n10020\tIGNORE\t(X-Frame-Options Header Not Set)\n10021\tIGNORE\t(X-Content-Type-Options Header Missing)\n10023\tIGNORE\t(Information Disclosure - Debug Error Messages)\n10024\tIGNORE\t(Information Disclosure - Sensitive Information in URL)\n10025\tIGNORE\t(Information Disclosure - Sensitive Information in HTTP Referrer Header)\n10026\tIGNORE\t(HTTP Parameter Override)\n10027\tIGNORE\t(Information Disclosure - Suspicious Comments)\n10032\tIGNORE\t(Viewstate)\n10033\tIGNORE\t(Directory Browsing)\n10034\tIGNORE\t(Heartbleed OpenSSL Vulnerability)\n10035\tIGNORE\t(Strict-Transport-Security Header Not Set)\n10036\tIGNORE\t(HTTP Server Response Header)\n10037\tIGNORE\t(Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s))\n10038\tIGNORE\t(Content Security Policy (CSP) Header Not Set)\n10040\tIGNORE\t(Secure Pages Include Mixed Content)\n10041\tIGNORE\t(HTTP to HTTPS Insecure Transition in Form Post)\n10042\tIGNORE\t(HTTPS to HTTP Insecure Transition in Form Post)\n10043\tIGNORE\t(User Controllable JavaScript Event (XSS))\n10044\tIGNORE\t(Big Redirect Detected (Potential Sensitive Information Leak))\n10045\tIGNORE\t(Source Code Disclosure - /WEB-INF folder)\n10047\tIGNORE\t(HTTPS Content Available via HTTP)\n10048\tIGNORE\t(Remote Code Execution - Shell Shock)\n10049\tIGNORE\t(Content Cacheability)\n10050\tIGNORE\t(Retrieved from Cache)\n10051\tIGNORE\t(Relative Path Confusion)\n10052\tIGNORE\t(X-ChromeLogger-Data (XCOLD) Header Information Leak)\n10054\tIGNORE\t(Cookie Without SameSite Attribute)\n10055\tIGNORE\t(CSP)\n10056\tIGNORE\t(X-Debug-Token Information Leak)\n10057\tIGNORE\t(Username Hash Found)\n10061\tIGNORE\t(X-AspNet-Version Response Header)\n10062\tIGNORE\t(PII Disclosure)\n10063\tIGNORE\t(Feature Policy Header Not Set)\n10096\tIGNORE\t(Timestamp Disclosure)\n10097\tIGNORE\t(Hash Disclosure)\n10098\tIGNORE\t(Cross-Domain Misconfiguration)\n10099\tIGNORE\t(Source Code Disclosure)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-zap-context-configuration",children:"2. ZAP Context Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".zap/context/default.context"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<configuration>\n    <context>\n        <name>Default Context</name>\n        <desc/>\n        <inscope>true</inscope>\n        <incregexes>http://localhost:3000.*</incregexes>\n        <excregexes/>\n        <tech>\n            <include>Db</include>\n            <include>Db.CouchDB</include>\n            <include>Db.Firebird</include>\n            <include>Db.HypersonicSQL</include>\n            <include>Db.IBM DB2</include>\n            <include>Db.Microsoft Access</include>\n            <include>Db.Microsoft SQL Server</include>\n            <include>Db.MongoDB</include>\n            <include>Db.MySQL</include>\n            <include>Db.Oracle</include>\n            <include>Db.PostgreSQL</include>\n            <include>Db.SAP MaxDB</include>\n            <include>Db.SQLite</include>\n            <include>Db.Sybase</include>\n            <include>Language</include>\n            <include>Language.ASP</include>\n            <include>Language.C</include>\n            <include>Language.JSP/Servlet</include>\n            <include>Language.JavaScript</include>\n            <include>Language.PHP</include>\n            <include>Language.Python</include>\n            <include>Language.XML</include>\n            <include>OS</include>\n            <include>OS.Linux</include>\n            <include>OS.MacOS</include>\n            <include>OS.Windows</include>\n            <include>SCM</include>\n            <include>SCM.Git</include>\n            <include>SCM.SVN</include>\n            <include>WS</include>\n            <include>WS.Apache</include>\n            <include>WS.IIS</include>\n            <include>WS.Tomcat</include>\n        </tech>\n        <urlparser>\n            <class>org.zaproxy.zap.model.StandardParameterParser</class>\n            <config>{"kvps":"&amp;","kv":"=","struct":[]}</config>\n        </urlparser>\n        <postparser>\n            <class>org.zaproxy.zap.model.StandardParameterParser</class>\n            <config>{"kvps":"&amp;","kv":"=","struct":[]}</config>\n        </postparser>\n        <authentication>\n            <type>1</type>\n            <strategy>EACH_RESP</strategy>\n            <pollurl/>\n            <polldata/>\n            <pollheaders/>\n            <pollfreq>60</pollfreq>\n            <pollunits>REQUESTS</pollunits>\n        </authentication>\n        <users/>\n        <forceduser>-1</forceduser>\n        <session>\n            <type>0</type>\n        </session>\n        <authorization>\n            <type>0</type>\n            <basic>\n                <header/>\n                <body/>\n                <logic>AND</logic>\n                <code>-1</code>\n            </basic>\n        </authorization>\n    </context>\n</configuration>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"processing-scripts",children:"Processing Scripts"}),"\n",(0,s.jsx)(e.h3,{id:"1-results-processing-script",children:"1. Results Processing Script"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/process-zap-results.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#!/usr/bin/env python3\n\"\"\"\nProcess OWASP ZAP scan results and generate metrics.\n\"\"\"\n\nimport json\nimport sys\nimport os\nfrom datetime import datetime\n\ndef process_zap_results(report_file):\n    \"\"\"Process ZAP JSON report and extract key metrics.\"\"\"\n    try:\n        with open(report_file, 'r') as f:\n            data = json.load(f)\n    except FileNotFoundError:\n        print(f\"Report file not found: {report_file}\")\n        return False\n    except json.JSONDecodeError:\n        print(f\"Invalid JSON in report file: {report_file}\")\n        return False\n\n    # Extract site information\n    site = data.get('site', [{}])[0]\n    alerts = site.get('alerts', [])\n    \n    # Count vulnerabilities by risk level\n    risk_counts = {\n        'High': 0,\n        'Medium': 0,\n        'Low': 0,\n        'Informational': 0\n    }\n    \n    vulnerability_details = []\n    \n    for alert in alerts:\n        risk = alert.get('riskdesc', 'Unknown')\n        risk_level = risk.split(' ')[0] if ' ' in risk else risk\n        \n        if risk_level in risk_counts:\n            risk_counts[risk_level] += 1\n        \n        vulnerability_details.append({\n            'name': alert.get('name', 'Unknown'),\n            'risk': risk_level,\n            'confidence': alert.get('confidence', 'Unknown'),\n            'description': alert.get('desc', ''),\n            'solution': alert.get('solution', ''),\n            'instances': len(alert.get('instances', []))\n        })\n    \n    # Generate summary\n    total_vulnerabilities = sum(risk_counts.values())\n    critical_issues = risk_counts['High'] + risk_counts['Medium']\n    \n    print(f\"=== DAST Scan Results Summary ===\")\n    print(f\"Total Vulnerabilities: {total_vulnerabilities}\")\n    print(f\"High Risk: {risk_counts['High']}\")\n    print(f\"Medium Risk: {risk_counts['Medium']}\")\n    print(f\"Low Risk: {risk_counts['Low']}\")\n    print(f\"Informational: {risk_counts['Informational']}\")\n    print(f\"Critical Issues (High + Medium): {critical_issues}\")\n    \n    # Set GitHub Actions outputs\n    if os.getenv('GITHUB_ACTIONS'):\n        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:\n            f.write(f\"total-vulnerabilities={total_vulnerabilities}\\n\")\n            f.write(f\"high-risk={risk_counts['High']}\\n\")\n            f.write(f\"medium-risk={risk_counts['Medium']}\\n\")\n            f.write(f\"low-risk={risk_counts['Low']}\\n\")\n            f.write(f\"critical-issues={critical_issues}\\n\")\n    \n    # Generate detailed report\n    generate_markdown_report(vulnerability_details, risk_counts)\n    \n    return True\n\ndef generate_markdown_report(vulnerabilities, risk_counts):\n    \"\"\"Generate a markdown report of vulnerabilities.\"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")\n    \n    report = f\"\"\"# DAST Security Scan Report\n\n**Generated:** {timestamp}\n\n## Summary\n\n| Risk Level | Count |\n|------------|-------|\n| High | {risk_counts['High']} |\n| Medium | {risk_counts['Medium']} |\n| Low | {risk_counts['Low']} |\n| Informational | {risk_counts['Informational']} |\n\n## Vulnerability Details\n\n\"\"\"\n    \n    # Group vulnerabilities by risk level\n    for risk_level in ['High', 'Medium', 'Low', 'Informational']:\n        risk_vulns = [v for v in vulnerabilities if v['risk'] == risk_level]\n        \n        if risk_vulns:\n            report += f\"\\n### {risk_level} Risk Vulnerabilities\\n\\n\"\n            \n            for vuln in risk_vulns:\n                report += f\"#### {vuln['name']}\\n\\n\"\n                report += f\"- **Risk:** {vuln['risk']}\\n\"\n                report += f\"- **Confidence:** {vuln['confidence']}\\n\"\n                report += f\"- **Instances:** {vuln['instances']}\\n\\n\"\n                \n                if vuln['description']:\n                    report += f\"**Description:** {vuln['description']}\\n\\n\"\n                \n                if vuln['solution']:\n                    report += f\"**Solution:** {vuln['solution']}\\n\\n\"\n                \n                report += \"---\\n\\n\"\n    \n    # Write report to file\n    with open('dast-report.md', 'w') as f:\n        f.write(report)\n    \n    print(f\"Detailed report generated: dast-report.md\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python3 process-zap-results.py <report.json>\")\n        sys.exit(1)\n    \n    report_file = sys.argv[1]\n    success = process_zap_results(report_file)\n    \n    if not success:\n        sys.exit(1)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-security-gate-script",children:"2. Security Gate Script"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/security-gate.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#!/usr/bin/env python3\n\"\"\"\nSecurity gate for DAST scan results.\nFails the build if vulnerability thresholds are exceeded.\n\"\"\"\n\nimport json\nimport sys\nimport argparse\n\ndef check_security_gate(reports, thresholds):\n    \"\"\"Check if security thresholds are met.\"\"\"\n    total_high = 0\n    total_medium = 0\n    total_low = 0\n    \n    for report_file in reports:\n        if not report_file:\n            continue\n            \n        try:\n            with open(report_file, 'r') as f:\n                data = json.load(f)\n        except (FileNotFoundError, json.JSONDecodeError) as e:\n            print(f\"Error reading {report_file}: {e}\")\n            continue\n        \n        # Count vulnerabilities\n        site = data.get('site', [{}])[0]\n        alerts = site.get('alerts', [])\n        \n        for alert in alerts:\n            risk = alert.get('riskdesc', '').lower()\n            if 'high' in risk:\n                total_high += 1\n            elif 'medium' in risk:\n                total_medium += 1\n            elif 'low' in risk:\n                total_low += 1\n    \n    print(f\"Security Gate Results:\")\n    print(f\"High Risk Vulnerabilities: {total_high} (threshold: {thresholds['high']})\")\n    print(f\"Medium Risk Vulnerabilities: {total_medium} (threshold: {thresholds['medium']})\")\n    print(f\"Low Risk Vulnerabilities: {total_low} (threshold: {thresholds['low']})\")\n    \n    # Check thresholds\n    gate_passed = True\n    \n    if total_high > thresholds['high']:\n        print(f\"\u274c SECURITY GATE FAILED: High risk vulnerabilities ({total_high}) exceed threshold ({thresholds['high']})\")\n        gate_passed = False\n    \n    if total_medium > thresholds['medium']:\n        print(f\"\u274c SECURITY GATE FAILED: Medium risk vulnerabilities ({total_medium}) exceed threshold ({thresholds['medium']})\")\n        gate_passed = False\n    \n    if total_low > thresholds['low']:\n        print(f\"\u26a0\ufe0f  WARNING: Low risk vulnerabilities ({total_low}) exceed threshold ({thresholds['low']})\")\n        # Low risk doesn't fail the gate by default\n    \n    if gate_passed:\n        print(\"\u2705 SECURITY GATE PASSED: All thresholds met\")\n        return True\n    else:\n        print(\"\u274c SECURITY GATE FAILED: Security thresholds exceeded\")\n        return False\n\ndef main():\n    parser = argparse.ArgumentParser(description='Security gate for DAST results')\n    parser.add_argument('--baseline', help='Baseline scan report')\n    parser.add_argument('--full', help='Full scan report')\n    parser.add_argument('--api', help='API scan report')\n    parser.add_argument('--threshold-high', type=int, default=0, help='High risk threshold')\n    parser.add_argument('--threshold-medium', type=int, default=5, help='Medium risk threshold')\n    parser.add_argument('--threshold-low', type=int, default=20, help='Low risk threshold')\n    \n    args = parser.parse_args()\n    \n    reports = [args.baseline, args.full, args.api]\n    thresholds = {\n        'high': args.threshold_high,\n        'medium': args.threshold_medium,\n        'low': args.threshold_low\n    }\n    \n    success = check_security_gate(reports, thresholds)\n    \n    if not success:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-action-af-results-enhancement-script",children:"3. Action-AF Results Enhancement Script"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/enhance-zap-af-results.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#!/usr/bin/env python3\n\"\"\"\nEnhanced processing script for ZAP Action-AF results with trend analysis.\n\"\"\"\n\nimport json\nimport sys\nimport argparse\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional, Any\n\nclass ZAPAFResultsProcessor:\n    def __init__(self):\n        self.current_results = None\n        self.baseline_results = None\n        self.enhanced_summary = {}\n        \n    def load_results(self, current_file: str, baseline_file: Optional[str] = None):\n        \"\"\"Load current and baseline ZAP results.\"\"\"\n        try:\n            with open(current_file, 'r') as f:\n                self.current_results = json.load(f)\n        except (FileNotFoundError, json.JSONDecodeError) as e:\n            print(f\"Error loading current results: {e}\")\n            return False\n            \n        if baseline_file:\n            try:\n                with open(baseline_file, 'r') as f:\n                    self.baseline_results = json.load(f)\n            except (FileNotFoundError, json.JSONDecodeError):\n                print(f\"Baseline file not found or invalid: {baseline_file}\")\n                self.baseline_results = None\n                \n        return True\n    \n    def extract_alerts(self, results: Dict) -> List[Dict]:\n        \"\"\"Extract alerts from ZAP results.\"\"\"\n        if not results:\n            return []\n            \n        site = results.get('site', [{}])[0]\n        return site.get('alerts', [])\n    \n    def categorize_alerts(self, alerts: List[Dict]) -> Dict[str, List[Dict]]:\n        \"\"\"Categorize alerts by risk level.\"\"\"\n        categories = {\n            'High': [],\n            'Medium': [],\n            'Low': [],\n            'Informational': []\n        }\n        \n        for alert in alerts:\n            risk_desc = alert.get('riskdesc', 'Unknown')\n            risk_level = risk_desc.split(' ')[0] if ' ' in risk_desc else 'Informational'\n            \n            if risk_level in categories:\n                categories[risk_level].append(alert)\n            else:\n                categories['Informational'].append(alert)\n                \n        return categories\n    \n    def analyze_trends(self) -> Dict[str, Any]:\n        \"\"\"Analyze trends between current and baseline results.\"\"\"\n        trend_analysis = {\n            'new_issues': [],\n            'resolved_issues': [],\n            'recurring_issues': [],\n            'risk_changes': []\n        }\n        \n        if not self.baseline_results:\n            return trend_analysis\n            \n        current_alerts = self.extract_alerts(self.current_results)\n        baseline_alerts = self.extract_alerts(self.baseline_results)\n        \n        # Create alert signatures for comparison\n        current_signatures = {self._create_alert_signature(alert): alert for alert in current_alerts}\n        baseline_signatures = {self._create_alert_signature(alert): alert for alert in baseline_alerts}\n        \n        # Find new issues\n        for sig, alert in current_signatures.items():\n            if sig not in baseline_signatures:\n                trend_analysis['new_issues'].append(alert)\n            else:\n                # Check for risk level changes\n                baseline_risk = baseline_signatures[sig].get('riskdesc', '')\n                current_risk = alert.get('riskdesc', '')\n                if baseline_risk != current_risk:\n                    trend_analysis['risk_changes'].append({\n                        'alert': alert,\n                        'previous_risk': baseline_risk,\n                        'current_risk': current_risk\n                    })\n                else:\n                    trend_analysis['recurring_issues'].append(alert)\n        \n        # Find resolved issues\n        for sig, alert in baseline_signatures.items():\n            if sig not in current_signatures:\n                trend_analysis['resolved_issues'].append(alert)\n                \n        return trend_analysis\n    \n    def _create_alert_signature(self, alert: Dict) -> str:\n        \"\"\"Create a unique signature for an alert based on key attributes.\"\"\"\n        name = alert.get('name', '')\n        plugin_id = alert.get('pluginid', '')\n        url = alert.get('instances', [{}])[0].get('uri', '') if alert.get('instances') else ''\n        return f\"{plugin_id}:{name}:{url}\"\n    \n    def calculate_confidence_metrics(self, alerts: List[Dict]) -> Dict[str, int]:\n        \"\"\"Calculate confidence-based metrics for alerts.\"\"\"\n        confidence_counts = {\n            'High': 0,\n            'Medium': 0,\n            'Low': 0\n        }\n        \n        for alert in alerts:\n            confidence = alert.get('confidence', 'Medium')\n            if confidence in confidence_counts:\n                confidence_counts[confidence] += 1\n                \n        return confidence_counts\n    \n    def analyze_coverage(self) -> Dict[str, Any]:\n        \"\"\"Analyze scan coverage and completeness.\"\"\"\n        if not self.current_results:\n            return {}\n            \n        site = self.current_results.get('site', [{}])[0]\n        \n        coverage = {\n            'total_urls_scanned': len(site.get('urls', [])),\n            'scan_duration': self._extract_scan_duration(),\n            'technologies_detected': self._extract_technologies(),\n            'authentication_status': self._check_authentication_coverage()\n        }\n        \n        return coverage\n    \n    def _extract_scan_duration(self) -> str:\n        \"\"\"Extract scan duration from results.\"\"\"\n        # This would depend on the specific structure of Action-AF results\n        return \"Unknown\"\n    \n    def _extract_technologies(self) -> List[str]:\n        \"\"\"Extract detected technologies.\"\"\"\n        technologies = []\n        current_alerts = self.extract_alerts(self.current_results)\n        \n        for alert in current_alerts:\n            if 'technology' in alert.get('name', '').lower():\n                tech_info = alert.get('desc', '')\n                technologies.append(tech_info)\n                \n        return list(set(technologies))\n    \n    def _check_authentication_coverage(self) -> Dict[str, Any]:\n        \"\"\"Check authentication coverage in scan.\"\"\"\n        auth_coverage = {\n            'authenticated_urls': 0,\n            'unauthenticated_urls': 0,\n            'auth_bypass_attempts': 0\n        }\n        \n        # This would be enhanced based on Action-AF specific features\n        return auth_coverage\n    \n    def generate_enhanced_summary(self, environment: str, scan_type: str) -> Dict[str, Any]:\n        \"\"\"Generate comprehensive enhanced summary.\"\"\"\n        current_alerts = self.extract_alerts(self.current_results)\n        categorized = self.categorize_alerts(current_alerts)\n        trends = self.analyze_trends()\n        confidence_metrics = self.calculate_confidence_metrics(current_alerts)\n        coverage = self.analyze_coverage()\n        \n        self.enhanced_summary = {\n            'metadata': {\n                'scan_timestamp': datetime.now().isoformat(),\n                'environment': environment,\n                'scan_type': scan_type,\n                'zap_version': self.current_results.get('@version', 'Unknown'),\n                'action_af_version': 'v0.2.0'\n            },\n            'summary': {\n                'total_alerts': len(current_alerts),\n                'high_risk': len(categorized['High']),\n                'medium_risk': len(categorized['Medium']),\n                'low_risk': len(categorized['Low']),\n                'informational': len(categorized['Informational'])\n            },\n            'confidence_metrics': confidence_metrics,\n            'trend_analysis': {\n                'new_issues_count': len(trends['new_issues']),\n                'resolved_issues_count': len(trends['resolved_issues']),\n                'recurring_issues_count': len(trends['recurring_issues']),\n                'risk_changes_count': len(trends['risk_changes']),\n                'new_issues': trends['new_issues'][:5],  # Top 5 for summary\n                'resolved_issues': trends['resolved_issues'][:5],\n                'risk_changes': trends['risk_changes']\n            },\n            'coverage_analysis': coverage,\n            'recommendations': self._generate_recommendations(categorized, trends),\n            'compliance_status': self._assess_compliance(categorized),\n            'action_items': self._generate_action_items(categorized, trends)\n        }\n        \n        return self.enhanced_summary\n    \n    def _generate_recommendations(self, categorized: Dict, trends: Dict) -> List[str]:\n        \"\"\"Generate actionable recommendations.\"\"\"\n        recommendations = []\n        \n        if categorized['High']:\n            recommendations.append(f\"Address {len(categorized['High'])} high-risk vulnerabilities immediately\")\n            \n        if len(trends['new_issues']) > 5:\n            recommendations.append(\"Investigate cause of multiple new security issues\")\n            \n        if trends['risk_changes']:\n            recommendations.append(\"Review risk level changes for potential false positives\")\n            \n        if categorized['Medium'] and len(categorized['Medium']) > 10:\n            recommendations.append(\"Consider batch remediation for medium-risk issues\")\n            \n        return recommendations\n    \n    def _assess_compliance(self, categorized: Dict) -> Dict[str, Any]:\n        \"\"\"Assess compliance with security standards.\"\"\"\n        compliance = {\n            'owasp_top_10': self._check_owasp_compliance(categorized),\n            'pci_dss': self._check_pci_compliance(categorized),\n            'overall_score': 0\n        }\n        \n        # Calculate overall score (0-100)\n        high_penalty = len(categorized['High']) * 20\n        medium_penalty = len(categorized['Medium']) * 5\n        low_penalty = len(categorized['Low']) * 1\n        \n        total_penalty = min(100, high_penalty + medium_penalty + low_penalty)\n        compliance['overall_score'] = max(0, 100 - total_penalty)\n        \n        return compliance\n    \n    def _check_owasp_compliance(self, categorized: Dict) -> Dict[str, bool]:\n        \"\"\"Check OWASP Top 10 compliance.\"\"\"\n        # Simplified compliance check\n        return {\n            'injection': len([a for a in categorized['High'] if 'injection' in a.get('name', '').lower()]) == 0,\n            'xss': len([a for a in categorized['High'] if 'xss' in a.get('name', '').lower()]) == 0,\n            'security_misconfiguration': len([a for a in categorized['High'] if 'configuration' in a.get('name', '').lower()]) == 0\n        }\n    \n    def _check_pci_compliance(self, categorized: Dict) -> bool:\n        \"\"\"Check basic PCI DSS compliance.\"\"\"\n        # Simplified PCI check\n        return len(categorized['High']) == 0 and len(categorized['Medium']) < 5\n    \n    def _generate_action_items(self, categorized: Dict, trends: Dict) -> List[Dict]:\n        \"\"\"Generate prioritized action items.\"\"\"\n        action_items = []\n        \n        # High priority items\n        for alert in categorized['High'][:3]:  # Top 3 high-risk\n            action_items.append({\n                'priority': 'CRITICAL',\n                'title': f\"Fix: {alert.get('name', 'Unknown vulnerability')}\",\n                'description': alert.get('desc', '')[:200] + '...',\n                'affected_urls': len(alert.get('instances', [])),\n                'estimated_effort': 'High'\n            })\n        \n        # New issues from trend analysis\n        for alert in trends['new_issues'][:2]:  # Top 2 new issues\n            action_items.append({\n                'priority': 'HIGH',\n                'title': f\"Investigate new issue: {alert.get('name', 'Unknown')}\",\n                'description': 'New security issue detected in latest scan',\n                'affected_urls': len(alert.get('instances', [])),\n                'estimated_effort': 'Medium'\n            })\n        \n        return action_items\n    \n    def save_results(self, output_file: str):\n        \"\"\"Save enhanced results to file.\"\"\"\n        try:\n            with open(output_file, 'w') as f:\n                json.dump(self.enhanced_summary, f, indent=2, default=str)\n            print(f\"Enhanced results saved to: {output_file}\")\n            return True\n        except Exception as e:\n            print(f\"Error saving results: {e}\")\n            return False\n\ndef main():\n    parser = argparse.ArgumentParser(description='Enhance ZAP Action-AF results with trend analysis')\n    parser.add_argument('--current', required=True, help='Current scan results JSON file')\n    parser.add_argument('--baseline', help='Baseline scan results JSON file')\n    parser.add_argument('--environment', required=True, help='Environment name')\n    parser.add_argument('--scan-type', required=True, help='Type of scan performed')\n    parser.add_argument('--output', required=True, help='Output file for enhanced results')\n    \n    args = parser.parse_args()\n    \n    processor = ZAPAFResultsProcessor()\n    \n    if not processor.load_results(args.current, args.baseline):\n        sys.exit(1)\n    \n    enhanced_results = processor.generate_enhanced_summary(args.environment, args.scan_type)\n    \n    if not processor.save_results(args.output):\n        sys.exit(1)\n    \n    # Print summary to stdout for GitHub Actions\n    print(\"\\n=== Enhanced ZAP Action-AF Results Summary ===\")\n    print(f\"Environment: {enhanced_results['metadata']['environment']}\")\n    print(f\"Scan Type: {enhanced_results['metadata']['scan_type']}\")\n    print(f\"Total Alerts: {enhanced_results['summary']['total_alerts']}\")\n    print(f\"High Risk: {enhanced_results['summary']['high_risk']}\")\n    print(f\"Medium Risk: {enhanced_results['summary']['medium_risk']}\")\n    print(f\"New Issues: {enhanced_results['trend_analysis']['new_issues_count']}\")\n    print(f\"Resolved Issues: {enhanced_results['trend_analysis']['resolved_issues_count']}\")\n    print(f\"Compliance Score: {enhanced_results['compliance_status']['overall_score']}/100\")\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,s.jsx)(e.h3,{id:"4-consolidated-results-processing-script",children:"4. Consolidated Results Processing Script"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/consolidate-zap-af-results.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"#!/usr/bin/env python3\n\"\"\"\nConsolidate multiple ZAP Action-AF scan results into a unified report.\n\"\"\"\n\nimport json\nimport os\nimport sys\nimport argparse\nfrom datetime import datetime\nfrom typing import Dict, List, Any\nfrom pathlib import Path\n\nclass ZAPAFConsolidator:\n    def __init__(self):\n        self.scan_results = []\n        self.consolidated_data = {}\n        \n    def load_scan_results(self, input_dir: str) -> bool:\n        \"\"\"Load all ZAP Action-AF scan results from directory.\"\"\"\n        input_path = Path(input_dir)\n        \n        if not input_path.exists():\n            print(f\"Input directory does not exist: {input_dir}\")\n            return False\n            \n        # Look for enhanced summary files\n        for file_path in input_path.glob(\"**/enhanced-summary.json\"):\n            try:\n                with open(file_path, 'r') as f:\n                    result = json.load(f)\n                    self.scan_results.append(result)\n                    print(f\"Loaded: {file_path}\")\n            except (json.JSONDecodeError, FileNotFoundError) as e:\n                print(f\"Error loading {file_path}: {e}\")\n                \n        if not self.scan_results:\n            print(\"No enhanced summary files found\")\n            return False\n            \n        return True\n    \n    def consolidate_results(self) -> Dict[str, Any]:\n        \"\"\"Consolidate all scan results into unified report.\"\"\"\n        self.consolidated_data = {\n            'consolidation_metadata': {\n                'generated_at': datetime.now().isoformat(),\n                'total_scans': len(self.scan_results),\n                'scan_types': list(set([r['metadata']['scan_type'] for r in self.scan_results])),\n                'environments': list(set([r['metadata']['environment'] for r in self.scan_results]))\n            },\n            'aggregate_summary': self._calculate_aggregate_summary(),\n            'environment_breakdown': self._breakdown_by_environment(),\n            'scan_type_breakdown': self._breakdown_by_scan_type(),\n            'trend_analysis': self._aggregate_trend_analysis(),\n            'compliance_overview': self._aggregate_compliance(),\n            'top_vulnerabilities': self._identify_top_vulnerabilities(),\n            'recommendations': self._generate_consolidated_recommendations(),\n            'executive_summary': self._generate_executive_summary()\n        }\n        \n        return self.consolidated_data\n    \n    def _calculate_aggregate_summary(self) -> Dict[str, int]:\n        \"\"\"Calculate aggregate vulnerability counts.\"\"\"\n        aggregate = {\n            'total_alerts': 0,\n            'high_risk': 0,\n            'medium_risk': 0,\n            'low_risk': 0,\n            'informational': 0,\n            'new_issues': 0,\n            'resolved_issues': 0\n        }\n        \n        for result in self.scan_results:\n            summary = result.get('summary', {})\n            trends = result.get('trend_analysis', {})\n            \n            aggregate['total_alerts'] += summary.get('total_alerts', 0)\n            aggregate['high_risk'] += summary.get('high_risk', 0)\n            aggregate['medium_risk'] += summary.get('medium_risk', 0)\n            aggregate['low_risk'] += summary.get('low_risk', 0)\n            aggregate['informational'] += summary.get('informational', 0)\n            aggregate['new_issues'] += trends.get('new_issues_count', 0)\n            aggregate['resolved_issues'] += trends.get('resolved_issues_count', 0)\n            \n        return aggregate\n    \n    def _breakdown_by_environment(self) -> Dict[str, Dict]:\n        \"\"\"Break down results by environment.\"\"\"\n        breakdown = {}\n        \n        for result in self.scan_results:\n            env = result['metadata']['environment']\n            if env not in breakdown:\n                breakdown[env] = {\n                    'total_alerts': 0,\n                    'high_risk': 0,\n                    'medium_risk': 0,\n                    'low_risk': 0,\n                    'compliance_score': 0,\n                    'scan_count': 0\n                }\n            \n            summary = result.get('summary', {})\n            compliance = result.get('compliance_status', {})\n            \n            breakdown[env]['total_alerts'] += summary.get('total_alerts', 0)\n            breakdown[env]['high_risk'] += summary.get('high_risk', 0)\n            breakdown[env]['medium_risk'] += summary.get('medium_risk', 0)\n            breakdown[env]['low_risk'] += summary.get('low_risk', 0)\n            breakdown[env]['compliance_score'] += compliance.get('overall_score', 0)\n            breakdown[env]['scan_count'] += 1\n            \n        # Calculate average compliance scores\n        for env_data in breakdown.values():\n            if env_data['scan_count'] > 0:\n                env_data['avg_compliance_score'] = env_data['compliance_score'] / env_data['scan_count']\n                \n        return breakdown\n    \n    def _breakdown_by_scan_type(self) -> Dict[str, Dict]:\n        \"\"\"Break down results by scan type.\"\"\"\n        breakdown = {}\n        \n        for result in self.scan_results:\n            scan_type = result['metadata']['scan_type']\n            if scan_type not in breakdown:\n                breakdown[scan_type] = {\n                    'total_scans': 0,\n                    'avg_alerts': 0,\n                    'avg_high_risk': 0,\n                    'effectiveness_score': 0\n                }\n            \n            summary = result.get('summary', {})\n            breakdown[scan_type]['total_scans'] += 1\n            breakdown[scan_type]['avg_alerts'] += summary.get('total_alerts', 0)\n            breakdown[scan_type]['avg_high_risk'] += summary.get('high_risk', 0)\n            \n        # Calculate averages\n        for scan_data in breakdown.values():\n            if scan_data['total_scans'] > 0:\n                scan_data['avg_alerts'] /= scan_data['total_scans']\n                scan_data['avg_high_risk'] /= scan_data['total_scans']\n                # Effectiveness = inverse of average high-risk findings\n                scan_data['effectiveness_score'] = max(0, 100 - (scan_data['avg_high_risk'] * 10))\n                \n        return breakdown\n    \n    def _aggregate_trend_analysis(self) -> Dict[str, Any]:\n        \"\"\"Aggregate trend analysis across all scans.\"\"\"\n        trends = {\n            'overall_trend': 'stable',\n            'security_improvement': False,\n            'critical_new_issues': [],\n            'positive_changes': 0,\n            'negative_changes': 0\n        }\n        \n        total_new = 0\n        total_resolved = 0\n        \n        for result in self.scan_results:\n            trend_data = result.get('trend_analysis', {})\n            total_new += trend_data.get('new_issues_count', 0)\n            total_resolved += trend_data.get('resolved_issues_count', 0)\n            \n            # Collect critical new issues\n            new_issues = trend_data.get('new_issues', [])\n            for issue in new_issues:\n                if 'High' in issue.get('riskdesc', ''):\n                    trends['critical_new_issues'].append(issue)\n        \n        # Determine overall trend\n        if total_resolved > total_new:\n            trends['overall_trend'] = 'improving'\n            trends['security_improvement'] = True\n            trends['positive_changes'] = total_resolved - total_new\n        elif total_new > total_resolved:\n            trends['overall_trend'] = 'degrading'\n            trends['negative_changes'] = total_new - total_resolved\n            \n        return trends\n    \n    def _aggregate_compliance(self) -> Dict[str, Any]:\n        \"\"\"Aggregate compliance information.\"\"\"\n        compliance = {\n            'overall_score': 0,\n            'owasp_compliance_rate': 0,\n            'pci_compliance_rate': 0,\n            'environment_scores': {},\n            'compliance_trend': 'stable'\n        }\n        \n        total_score = 0\n        owasp_compliant = 0\n        pci_compliant = 0\n        total_scans = len(self.scan_results)\n        \n        for result in self.scan_results:\n            compliance_data = result.get('compliance_status', {})\n            env = result['metadata']['environment']\n            \n            score = compliance_data.get('overall_score', 0)\n            total_score += score\n            \n            if env not in compliance['environment_scores']:\n                compliance['environment_scores'][env] = []\n            compliance['environment_scores'][env].append(score)\n            \n            # Check OWASP compliance\n            owasp_data = compliance_data.get('owasp_top_10', {})\n            if isinstance(owasp_data, dict) and all(owasp_data.values()):\n                owasp_compliant += 1\n                \n            # Check PCI compliance\n            if compliance_data.get('pci_dss', False):\n                pci_compliant += 1\n        \n        if total_scans > 0:\n            compliance['overall_score'] = total_score / total_scans\n            compliance['owasp_compliance_rate'] = (owasp_compliant / total_scans) * 100\n            compliance['pci_compliance_rate'] = (pci_compliant / total_scans) * 100\n            \n        return compliance\n    \n    def _identify_top_vulnerabilities(self) -> List[Dict]:\n        \"\"\"Identify the most common vulnerabilities across all scans.\"\"\"\n        vulnerability_counts = {}\n        \n        for result in self.scan_results:\n            # This would require access to the detailed alert data\n            # For now, we'll extract from action items\n            action_items = result.get('action_items', [])\n            for item in action_items:\n                title = item.get('title', '')\n                if title not in vulnerability_counts:\n                    vulnerability_counts[title] = {\n                        'count': 0,\n                        'priority': item.get('priority', 'LOW'),\n                        'description': item.get('description', '')\n                    }\n                vulnerability_counts[title]['count'] += 1\n        \n        # Sort by count and return top 10\n        sorted_vulns = sorted(vulnerability_counts.items(), \n                            key=lambda x: x[1]['count'], reverse=True)\n        \n        return [{'name': name, **data} for name, data in sorted_vulns[:10]]\n    \n    def _generate_consolidated_recommendations(self) -> List[str]:\n        \"\"\"Generate consolidated recommendations.\"\"\"\n        recommendations = []\n        aggregate = self.consolidated_data.get('aggregate_summary', {})\n        trends = self.consolidated_data.get('trend_analysis', {})\n        compliance = self.consolidated_data.get('compliance_overview', {})\n        \n        # High-level recommendations based on aggregate data\n        if aggregate.get('high_risk', 0) > 0:\n            recommendations.append(f\"Critical: Address {aggregate['high_risk']} high-risk vulnerabilities across all environments\")\n            \n        if trends.get('overall_trend') == 'degrading':\n            recommendations.append(\"Security posture is declining - review security processes and implement additional controls\")\n            \n        if compliance.get('overall_score', 0) < 80:\n            recommendations.append(\"Compliance score below acceptable threshold - prioritize remediation efforts\")\n            \n        # Environment-specific recommendations\n        env_breakdown = self.consolidated_data.get('environment_breakdown', {})\n        for env, data in env_breakdown.items():\n            if data.get('high_risk', 0) > 5:\n                recommendations.append(f\"Focus remediation efforts on {env} environment ({data['high_risk']} high-risk issues)\")\n                \n        return recommendations[:10]  # Top 10 recommendations\n    \n    def _generate_executive_summary(self) -> str:\n        \"\"\"Generate executive summary text.\"\"\"\n        aggregate = self.consolidated_data.get('aggregate_summary', {})\n        trends = self.consolidated_data.get('trend_analysis', {})\n        compliance = self.consolidated_data.get('compliance_overview', {})\n        \n        summary = f\"\"\"\n## Executive Security Summary\n\n**Security Posture Overview:**\n- Total vulnerabilities identified: {aggregate.get('total_alerts', 0)}\n- Critical/High-risk issues: {aggregate.get('high_risk', 0)}\n- Security trend: {trends.get('overall_trend', 'stable').title()}\n- Overall compliance score: {compliance.get('overall_score', 0):.1f}/100\n\n**Key Findings:**\n- {len(self.consolidated_data.get('top_vulnerabilities', []))} unique vulnerability types identified\n- {aggregate.get('new_issues', 0)} new security issues detected\n- {aggregate.get('resolved_issues', 0)} previous issues resolved\n- {compliance.get('owasp_compliance_rate', 0):.1f}% OWASP Top 10 compliance rate\n\n**Risk Assessment:**\n{'\ud83d\udd34 HIGH RISK' if aggregate.get('high_risk', 0) > 0 else '\ud83d\udfe1 MEDIUM RISK' if aggregate.get('medium_risk', 0) > 10 else '\ud83d\udfe2 LOW RISK'}\n\n**Action Required:**\n{len(self.consolidated_data.get('recommendations', []))} immediate recommendations for security improvement.\n        \"\"\".strip()\n        \n        return summary\n    \n    def generate_html_report(self, output_file: str) -> bool:\n        \"\"\"Generate comprehensive HTML report.\"\"\"\n        html_template = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Consolidated ZAP Action-AF Security Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n        .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }\n        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }\n        .metric-card { background: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #007bff; }\n        .high-risk { border-left-color: #dc3545 !important; background: #f8d7da; }\n        .medium-risk { border-left-color: #ffc107 !important; background: #fff3cd; }\n        .low-risk { border-left-color: #28a745 !important; background: #d4edda; }\n        .table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }\n        .table th { background: #f8f9fa; font-weight: bold; }\n        .recommendations { background: #e9ecef; padding: 20px; border-radius: 5px; margin: 20px 0; }\n        .chart-container { margin: 20px 0; }\n        .executive-summary { background: #f1f3f4; padding: 20px; border-radius: 5px; margin: 20px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>\ud83d\udd12 Consolidated ZAP Action-AF Security Report</h1>\n        <p>Generated on: {generated_at}</p>\n        <p>Total Scans Analyzed: {total_scans}</p>\n    </div>\n    \n    <div class=\"executive-summary\">\n        <h2>Executive Summary</h2>\n        <pre>{executive_summary}</pre>\n    </div>\n    \n    <div class=\"summary-grid\">\n        <div class=\"metric-card high-risk\">\n            <h3>\ud83d\udea8 High Risk</h3>\n            <div style=\"font-size: 2em; font-weight: bold;\">{high_risk}</div>\n            <p>Critical vulnerabilities requiring immediate attention</p>\n        </div>\n        <div class=\"metric-card medium-risk\">\n            <h3>\u26a0\ufe0f Medium Risk</h3>\n            <div style=\"font-size: 2em; font-weight: bold;\">{medium_risk}</div>\n            <p>Important security issues to address</p>\n        </div>\n        <div class=\"metric-card low-risk\">\n            <h3>\u2139\ufe0f Low Risk</h3>\n            <div style=\"font-size: 2em; font-weight: bold;\">{low_risk}</div>\n            <p>Minor issues and informational findings</p>\n        </div>\n        <div class=\"metric-card\">\n            <h3>\ud83d\udcca Compliance Score</h3>\n            <div style=\"font-size: 2em; font-weight: bold;\">{compliance_score:.1f}/100</div>\n            <p>Overall security compliance rating</p>\n        </div>\n    </div>\n    \n    <h2>Environment Breakdown</h2>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Environment</th>\n                <th>Total Alerts</th>\n                <th>High Risk</th>\n                <th>Medium Risk</th>\n                <th>Compliance Score</th>\n            </tr>\n        </thead>\n        <tbody>\n            {environment_rows}\n        </tbody>\n    </table>\n    \n    <h2>Top Vulnerabilities</h2>\n    <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Vulnerability</th>\n                <th>Occurrences</th>\n                <th>Priority</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            {vulnerability_rows}\n        </tbody>\n    </table>\n    \n    <div class=\"recommendations\">\n        <h2>\ud83d\udccb Recommendations</h2>\n        <ol>\n            {recommendation_items}\n        </ol>\n    </div>\n    \n    <h2>Detailed Data</h2>\n    <pre style=\"background: #f8f9fa; padding: 20px; border-radius: 5px; overflow-x: auto;\">{json_data}</pre>\n</body>\n</html>\n        \"\"\"\n        \n        # Prepare template data\n        aggregate = self.consolidated_data.get('aggregate_summary', {})\n        compliance = self.consolidated_data.get('compliance_overview', {})\n        env_breakdown = self.consolidated_data.get('environment_breakdown', {})\n        top_vulns = self.consolidated_data.get('top_vulnerabilities', [])\n        recommendations = self.consolidated_data.get('recommendations', [])\n        \n        # Generate environment rows\n        env_rows = \"\"\n        for env, data in env_breakdown.items():\n            env_rows += f\"\"\"\n            <tr>\n                <td>{env}</td>\n                <td>{data.get('total_alerts', 0)}</td>\n                <td>{data.get('high_risk', 0)}</td>\n                <td>{data.get('medium_risk', 0)}</td>\n                <td>{data.get('avg_compliance_score', 0):.1f}</td>\n            </tr>\n            \"\"\"\n        \n        # Generate vulnerability rows\n        vuln_rows = \"\"\n        for vuln in top_vulns[:10]:\n            vuln_rows += f\"\"\"\n            <tr>\n                <td>{vuln.get('name', 'Unknown')}</td>\n                <td>{vuln.get('count', 0)}</td>\n                <td>{vuln.get('priority', 'LOW')}</td>\n                <td>{vuln.get('description', 'No description available')[:100]}...</td>\n            </tr>\n            \"\"\"\n        \n        # Generate recommendation items\n        rec_items = \"\"\n        for i, rec in enumerate(recommendations[:10], 1):\n            rec_items += f\"<li>{rec}</li>\"\n        \n        # Fill template\n        html_content = html_template.format(\n            generated_at=self.consolidated_data['consolidation_metadata']['generated_at'],\n            total_scans=self.consolidated_data['consolidation_metadata']['total_scans'],\n            executive_summary=self.consolidated_data.get('executive_summary', ''),\n            high_risk=aggregate.get('high_risk', 0),\n            medium_risk=aggregate.get('medium_risk', 0),\n            low_risk=aggregate.get('low_risk', 0),\n            compliance_score=compliance.get('overall_score', 0),\n            environment_rows=env_rows,\n            vulnerability_rows=vuln_rows,\n            recommendation_items=rec_items,\n            json_data=json.dumps(self.consolidated_data, indent=2)\n        )\n        \n        try:\n            with open(output_file, 'w') as f:\n                f.write(html_content)\n            print(f\"HTML report generated: {output_file}\")\n            return True\n        except Exception as e:\n            print(f\"Error generating HTML report: {e}\")\n            return False\n    \n    def save_json_results(self, output_file: str) -> bool:\n        \"\"\"Save consolidated results as JSON.\"\"\"\n        try:\n            with open(output_file, 'w') as f:\n                json.dump(self.consolidated_data, f, indent=2, default=str)\n            print(f\"JSON results saved: {output_file}\")\n            return True\n        except Exception as e:\n            print(f\"Error saving JSON results: {e}\")\n            return False\n\ndef main():\n    parser = argparse.ArgumentParser(description='Consolidate ZAP Action-AF scan results')\n    parser.add_argument('--input-dir', required=True, help='Directory containing scan results')\n    parser.add_argument('--output', required=True, help='Output HTML report file')\n    parser.add_argument('--json-output', help='Output JSON results file')\n    \n    args = parser.parse_args()\n    \n    consolidator = ZAPAFConsolidator()\n    \n    if not consolidator.load_scan_results(args.input_dir):\n        sys.exit(1)\n    \n    consolidated_results = consolidator.consolidate_results()\n    \n    if not consolidator.generate_html_report(args.output):\n        sys.exit(1)\n    \n    if args.json_output:\n        if not consolidator.save_json_results(args.json_output):\n            sys.exit(1)\n    \n    # Print summary\n    print(f\"\\n=== Consolidation Complete ===\")\n    print(f\"Processed {len(consolidator.scan_results)} scan results\")\n    print(f\"Total vulnerabilities: {consolidated_results['aggregate_summary']['total_alerts']}\")\n    print(f\"High-risk issues: {consolidated_results['aggregate_summary']['high_risk']}\")\n    print(f\"Overall compliance score: {consolidated_results['compliance_overview']['overall_score']:.1f}/100\")\n\nif __name__ == \"__main__\":\n    main()\n"})}),"\n",(0,s.jsx)(e.h2,{id:"docker-integration",children:"Docker Integration"}),"\n",(0,s.jsx)(e.h3,{id:"1-custom-zap-container",children:"1. Custom ZAP Container"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"docker/zap/Dockerfile"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:"FROM owasp/zap2docker-stable\n\n# Install additional dependencies\nUSER root\nRUN apt-get update && apt-get install -y \\\n    python3-pip \\\n    jq \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python packages for custom scripts\nRUN pip3 install requests beautifulsoup4 lxml\n\n# Copy custom scripts\nCOPY scripts/ /zap/scripts/\nCOPY rules/ /zap/rules/\n\n# Make scripts executable\nRUN chmod +x /zap/scripts/*.py\n\nUSER zap\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-zap-configuration-script",children:"2. ZAP Configuration Script"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:"docker/zap/scripts/configure-zap.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#!/usr/bin/env python3\n"""\nConfigure ZAP for automated scanning.\n"""\n\nimport requests\nimport time\nimport sys\nimport json\n\nclass ZAPConfigurer:\n    def __init__(self, zap_url=\'http://localhost:8080\'):\n        self.zap_url = zap_url\n        self.api_key = None\n        \n    def wait_for_zap(self, timeout=60):\n        """Wait for ZAP to start up."""\n        start_time = time.time()\n        while time.time() - start_time < timeout:\n            try:\n                response = requests.get(f\'{self.zap_url}/JSON/core/view/version/\')\n                if response.status_code == 200:\n                    print("ZAP is ready")\n                    return True\n            except requests.ConnectionError:\n                print("Waiting for ZAP to start...")\n                time.sleep(2)\n        \n        print("Timeout waiting for ZAP to start")\n        return False\n    \n    def configure_api_key(self):\n        """Configure API key for ZAP."""\n        try:\n            # Generate API key\n            response = requests.get(f\'{self.zap_url}/JSON/core/action/generateApiKey/\')\n            if response.status_code == 200:\n                self.api_key = response.json()[\'Result\']\n                print(f"API key configured: {self.api_key}")\n                return True\n        except Exception as e:\n            print(f"Error configuring API key: {e}")\n        return False\n    \n    def configure_scanner_settings(self):\n        """Configure scanner settings."""\n        settings = {\n            \'scanner.maxResultsToList\': \'100\',\n            \'scanner.maxRuleDurationInMins\': \'5\',\n            \'scanner.maxScanDurationInMins\': \'60\',\n            \'scanner.threadPerHost\': \'2\'\n        }\n        \n        for key, value in settings.items():\n            try:\n                params = {\n                    \'apikey\': self.api_key,\n                    \'key\': key,\n                    \'value\': value\n                }\n                response = requests.get(f\'{self.zap_url}/JSON/core/action/setOptionValue/\', params=params)\n                if response.status_code == 200:\n                    print(f"Set {key} = {value}")\n            except Exception as e:\n                print(f"Error setting {key}: {e}")\n    \n    def configure_passive_rules(self):\n        """Enable/disable passive scan rules."""\n        # Enable important passive rules\n        important_rules = [\n            \'10015\',  # Incomplete or No Cache-control and Pragma HTTP Header Set\n            \'10020\',  # X-Frame-Options Header Not Set\n            \'10021\',  # X-Content-Type-Options Header Missing\n            \'10035\',  # Strict-Transport-Security Header Not Set\n            \'10038\',  # Content Security Policy (CSP) Header Not Set\n        ]\n        \n        for rule_id in important_rules:\n            try:\n                params = {\n                    \'apikey\': self.api_key,\n                    \'ids\': rule_id\n                }\n                response = requests.get(f\'{self.zap_url}/JSON/pscan/action/enableScanners/\', params=params)\n                if response.status_code == 200:\n                    print(f"Enabled passive rule: {rule_id}")\n            except Exception as e:\n                print(f"Error enabling rule {rule_id}: {e}")\n\ndef main():\n    configurator = ZAPConfigurer()\n    \n    if not configurator.wait_for_zap():\n        sys.exit(1)\n    \n    if not configurator.configure_api_key():\n        sys.exit(1)\n    \n    configurator.configure_scanner_settings()\n    configurator.configure_passive_rules()\n    \n    print("ZAP configuration completed successfully")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-configurations",children:"Advanced Configurations"}),"\n",(0,s.jsx)(e.h3,{id:"1-multi-application-pipeline",children:"1. Multi-Application Pipeline"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/workflows/multi-app-dast.yml"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'name: Multi-Application DAST\n\non:\n  schedule:\n    - cron: \'0 4 * * 1-5\'  # Weekdays at 4 AM\n\nenv:\n  APPLICATIONS: |\n    {\n      "frontend": {\n        "url": "https://app.example.com",\n        "auth_required": false,\n        "scan_type": "baseline"\n      },\n      "api": {\n        "url": "https://api.example.com",\n        "auth_required": true,\n        "scan_type": "api",\n        "openapi_url": "https://api.example.com/docs/json"\n      },\n      "admin": {\n        "url": "https://admin.example.com",\n        "auth_required": true,\n        "scan_type": "full"\n      }\n    }\n\njobs:\n  matrix-setup:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix: ${{ steps.set-matrix.outputs.matrix }}\n    \n    steps:\n    - id: set-matrix\n      run: |\n        echo "matrix=$(echo \'${{ env.APPLICATIONS }}\' | jq -c \'to_entries | map({app: .key, config: .value})\')" >> $GITHUB_OUTPUT\n\n  dast-scan:\n    needs: matrix-setup\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        include: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}\n      fail-fast: false\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup authentication\n      if: matrix.config.auth_required\n      run: |\n        # Setup authentication context for the application\n        echo "Setting up auth for ${{ matrix.app }}"\n        \n    - name: Run DAST scan\n      run: |\n        case "${{ matrix.config.scan_type }}" in\n          "baseline")\n            docker run --rm \\\n              -v $(pwd)/reports:/zap/reports \\\n              owasp/zap2docker-stable \\\n              zap-baseline.py -t ${{ matrix.config.url }} \\\n              -J /zap/reports/${{ matrix.app }}-baseline.json \\\n              -H /zap/reports/${{ matrix.app }}-baseline.html\n            ;;\n          "api")\n            curl -o openapi.json ${{ matrix.config.openapi_url }}\n            docker run --rm \\\n              -v $(pwd)/openapi.json:/zap/openapi.json \\\n              -v $(pwd)/reports:/zap/reports \\\n              owasp/zap2docker-stable \\\n              zap-api-scan.py -t ${{ matrix.config.url }} \\\n              -f openapi -d /zap/openapi.json \\\n              -J /zap/reports/${{ matrix.app }}-api.json \\\n              -H /zap/reports/${{ matrix.app }}-api.html\n            ;;\n          "full")\n            docker run --rm \\\n              -v $(pwd)/reports:/zap/reports \\\n              owasp/zap2docker-stable \\\n              zap-full-scan.py -t ${{ matrix.config.url }} \\\n              -J /zap/reports/${{ matrix.app }}-full.json \\\n              -H /zap/reports/${{ matrix.app }}-full.html\n            ;;\n        esac\n        \n    - name: Upload scan results\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: ${{ matrix.app }}-dast-results\n        path: reports/\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-custom-rule-configuration",children:"2. Custom Rule Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".zap/rules/custom-rules.tsv"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsv",children:'# Custom ZAP rules configuration\n# Format: PLUGIN_ID\tACTION\tDESCRIPTION\n\n# High severity rules (never ignore)\n40012\tFAIL\tCross Site Scripting (Reflected)\n40013\tFAIL\tCross Site Scripting (Persistent)\n40014\tFAIL\tCross Site Scripting (Persistent) - Prime\n40016\tFAIL\tCross Site Scripting (Persistent) - Spider\n40017\tFAIL\tCross Site Scripting (Persistent) - OData\n40018\tFAIL\tSQL Injection\n40019\tFAIL\tSQL Injection - MySQL\n40020\tFAIL\tSQL Injection - Hypersonic SQL\n40021\tFAIL\tSQL Injection - Oracle\n40022\tFAIL\tSQL Injection - PostgreSQL\n40023\tFAIL\tPossible Username Enumeration\n40024\tFAIL\tSQL Injection - SQLite\n40025\tFAIL\tProxy Disclosure\n40026\tFAIL\tCross Site Scripting (DOM Based)\n40027\tFAIL\tSQL Injection - MsSQL\n40028\tFAIL\tLDAP Injection\n40029\tFAIL\tXPath Injection\n\n# Medium severity rules (warn but don\'t fail)\n10016\tWARN\tWeb Browser XSS Protection Not Enabled\n10017\tWARN\tCross-Domain JavaScript Source File Inclusion\n10020\tWARN\tX-Frame-Options Header Not Set\n10021\tWARN\tX-Content-Type-Options Header Missing\n10038\tWARN\tContent Security Policy (CSP) Header Not Set\n10035\tWARN\tStrict-Transport-Security Header Not Set\n\n# Low severity rules (informational only)\n10009\tINFO\tFingerprinting\n10027\tINFO\tInformation Disclosure - Suspicious Comments\n10036\tINFO\tHTTP Server Response Header\n10037\tINFO\tServer Leaks Information via "X-Powered-By" HTTP Response Header Field(s)\n10049\tINFO\tContent Cacheability\n10096\tINFO\tTimestamp Disclosure\n10097\tINFO\tHash Disclosure\n\n# False positive rules (ignore in CI)\n10010\tIGNORE\tCookie No HttpOnly Flag\n10011\tIGNORE\tCookie Without Secure Flag\n10054\tIGNORE\tCookie Without SameSite Attribute\n10015\tIGNORE\tIncomplete or No Cache-control and Pragma HTTP Header Set\n10019\tIGNORE\tContent-Type Header Missing\n'})}),"\n",(0,s.jsx)(e.h2,{id:"reporting-and-integration",children:"Reporting and Integration"}),"\n",(0,s.jsx)(e.h3,{id:"1-slack-notification",children:"1. Slack Notification"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/slack-notification.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#!/usr/bin/env python3\n"""\nSend DAST results to Slack.\n"""\n\nimport json\nimport requests\nimport sys\nimport os\n\ndef send_slack_notification(webhook_url, scan_results):\n    """Send scan results to Slack."""\n    \n    # Determine color based on results\n    if scan_results[\'high_risk\'] > 0:\n        color = "danger"\n        status = "\ud83d\udea8 HIGH RISK"\n    elif scan_results[\'medium_risk\'] > 0:\n        color = "warning"\n        status = "\u26a0\ufe0f MEDIUM RISK"\n    elif scan_results[\'low_risk\'] > 0:\n        color = "good"\n        status = "\u2139\ufe0f LOW RISK"\n    else:\n        color = "good"\n        status = "\u2705 SECURE"\n    \n    # Build Slack message\n    message = {\n        "attachments": [\n            {\n                "color": color,\n                "title": f"DAST Security Scan Complete - {status}",\n                "fields": [\n                    {\n                        "title": "Repository",\n                        "value": os.environ.get(\'GITHUB_REPOSITORY\', \'Unknown\'),\n                        "short": True\n                    },\n                    {\n                        "title": "Branch",\n                        "value": os.environ.get(\'GITHUB_REF_NAME\', \'Unknown\'),\n                        "short": True\n                    },\n                    {\n                        "title": "High Risk",\n                        "value": str(scan_results[\'high_risk\']),\n                        "short": True\n                    },\n                    {\n                        "title": "Medium Risk",\n                        "value": str(scan_results[\'medium_risk\']),\n                        "short": True\n                    },\n                    {\n                        "title": "Low Risk",\n                        "value": str(scan_results[\'low_risk\']),\n                        "short": True\n                    },\n                    {\n                        "title": "Total Issues",\n                        "value": str(scan_results[\'total_vulnerabilities\']),\n                        "short": True\n                    }\n                ],\n                "footer": "OWASP ZAP DAST Scanner",\n                "ts": int(time.time())\n            }\n        ]\n    }\n    \n    # Add action buttons if there are issues\n    if scan_results[\'total_vulnerabilities\'] > 0:\n        message["attachments"][0]["actions"] = [\n            {\n                "type": "button",\n                "text": "View Details",\n                "url": f"https://github.com/{os.environ.get(\'GITHUB_REPOSITORY\')}/actions/runs/{os.environ.get(\'GITHUB_RUN_ID\')}"\n            }\n        ]\n    \n    # Send to Slack\n    response = requests.post(webhook_url, json=message)\n    \n    if response.status_code == 200:\n        print("Slack notification sent successfully")\n        return True\n    else:\n        print(f"Failed to send Slack notification: {response.status_code}")\n        return False\n\ndef main():\n    if len(sys.argv) != 3:\n        print("Usage: python3 slack-notification.py <webhook_url> <results.json>")\n        sys.exit(1)\n    \n    webhook_url = sys.argv[1]\n    results_file = sys.argv[2]\n    \n    try:\n        with open(results_file, \'r\') as f:\n            results = json.load(f)\n    except FileNotFoundError:\n        print(f"Results file not found: {results_file}")\n        sys.exit(1)\n    \n    send_slack_notification(webhook_url, results)\n\nif __name__ == "__main__":\n    import time\n    main()\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-jira-integration",children:"2. JIRA Integration"}),"\n",(0,s.jsxs)(e.p,{children:["Create ",(0,s.jsx)(e.code,{children:".github/scripts/jira-integration.py"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'#!/usr/bin/env python3\n"""\nCreate JIRA tickets for security vulnerabilities.\n"""\n\nimport json\nimport requests\nimport sys\nimport os\nfrom base64 import b64encode\n\nclass JiraIntegration:\n    def __init__(self, server, username, api_token):\n        self.server = server\n        self.auth = b64encode(f"{username}:{api_token}".encode()).decode()\n        self.headers = {\n            \'Authorization\': f\'Basic {self.auth}\',\n            \'Content-Type\': \'application/json\'\n        }\n    \n    def create_security_ticket(self, vulnerability):\n        """Create a JIRA ticket for a security vulnerability."""\n        \n        # Map ZAP risk levels to JIRA priorities\n        priority_map = {\n            \'High\': \'Highest\',\n            \'Medium\': \'High\',\n            \'Low\': \'Medium\',\n            \'Informational\': \'Low\'\n        }\n        \n        ticket_data = {\n            "fields": {\n                "project": {"key": "SEC"},\n                "summary": f"[DAST] {vulnerability[\'name\']}",\n                "description": {\n                    "type": "doc",\n                    "version": 1,\n                    "content": [\n                        {\n                            "type": "paragraph",\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": f"Security vulnerability detected by DAST scan:\\n\\n"\n                                }\n                            ]\n                        },\n                        {\n                            "type": "paragraph",\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": f"Risk Level: {vulnerability[\'risk\']}\\n"\n                                },\n                                {\n                                    "type": "text",\n                                    "text": f"Confidence: {vulnerability[\'confidence\']}\\n"\n                                },\n                                {\n                                    "type": "text",\n                                    "text": f"Instances: {vulnerability[\'instances\']}\\n\\n"\n                                }\n                            ]\n                        },\n                        {\n                            "type": "heading",\n                            "attrs": {"level": 3},\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": "Description"\n                                }\n                            ]\n                        },\n                        {\n                            "type": "paragraph",\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": vulnerability[\'description\']\n                                }\n                            ]\n                        },\n                        {\n                            "type": "heading",\n                            "attrs": {"level": 3},\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": "Recommended Solution"\n                                }\n                            ]\n                        },\n                        {\n                            "type": "paragraph",\n                            "content": [\n                                {\n                                    "type": "text",\n                                    "text": vulnerability[\'solution\']\n                                }\n                            ]\n                        }\n                    ]\n                },\n                "issuetype": {"name": "Bug"},\n                "priority": {"name": priority_map.get(vulnerability[\'risk\'], \'Medium\')},\n                "labels": ["security", "dast", "vulnerability", vulnerability[\'risk\'].lower()],\n                "components": [{"name": "Security"}]\n            }\n        }\n        \n        response = requests.post(\n            f"{self.server}/rest/api/3/issue",\n            headers=self.headers,\n            json=ticket_data\n        )\n        \n        if response.status_code == 201:\n            ticket = response.json()\n            print(f"Created JIRA ticket: {ticket[\'key\']}")\n            return ticket[\'key\']\n        else:\n            print(f"Failed to create JIRA ticket: {response.status_code}")\n            print(response.text)\n            return None\n\ndef main():\n    if len(sys.argv) != 2:\n        print("Usage: python3 jira-integration.py <vulnerabilities.json>")\n        sys.exit(1)\n    \n    # Get JIRA credentials from environment\n    server = os.environ.get(\'JIRA_SERVER\')\n    username = os.environ.get(\'JIRA_USERNAME\')\n    api_token = os.environ.get(\'JIRA_API_TOKEN\')\n    \n    if not all([server, username, api_token]):\n        print("Missing JIRA credentials in environment variables")\n        sys.exit(1)\n    \n    # Load vulnerabilities\n    vulns_file = sys.argv[1]\n    try:\n        with open(vulns_file, \'r\') as f:\n            vulnerabilities = json.load(f)\n    except FileNotFoundError:\n        print(f"Vulnerabilities file not found: {vulns_file}")\n        sys.exit(1)\n    \n    # Create JIRA integration\n    jira = JiraIntegration(server, username, api_token)\n    \n    # Create tickets for high and medium risk vulnerabilities\n    for vuln in vulnerabilities:\n        if vuln[\'risk\'] in [\'High\', \'Medium\']:\n            jira.create_security_ticket(vuln)\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,s.jsx)(e.h2,{id:"action-af-advanced-features-and-best-practices",children:"Action-AF Advanced Features and Best Practices"}),"\n",(0,s.jsx)(e.h3,{id:"action-af-unique-capabilities",children:"Action-AF Unique Capabilities"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"zaproxy/action-af@v0.2.0"})," action extends standard ZAP functionality with several advanced features designed for enterprise CI/CD environments:"]}),"\n",(0,s.jsx)(e.h4,{id:"1-intelligent-vulnerability-filtering",children:"1. Intelligent Vulnerability Filtering"}),"\n",(0,s.jsx)(e.p,{children:"Action-AF implements sophisticated filtering algorithms that go beyond simple rule-based exclusions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Advanced filtering configuration\nfilter_config:\n  intelligence_level: "adaptive"  # Options: basic, standard, adaptive, ml-enhanced\n  learning_mode: true             # Learns from manual reviews\n  confidence_weighting: true      # Adjusts findings based on confidence levels\n  context_awareness: true         # Considers application context for filtering\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Machine Learning Integration"}),": Uses ML models to predict false positives"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Context-Aware Filtering"}),": Understands application architecture for better filtering"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Adaptive Learning"}),": Improves filtering accuracy over time based on feedback"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Historical Analysis"}),": Compares against previous scans for trend detection"]}),"\n"]}),"\n",(0,s.jsx)(e.h4,{id:"2-advanced-risk-assessment",children:"2. Advanced Risk Assessment"}),"\n",(0,s.jsx)(e.p,{children:"Action-AF provides enhanced risk scoring beyond standard ZAP risk levels:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "risk_assessment": {\n    "environmental_factors": {\n      "production_impact": "high",\n      "data_sensitivity": "pii",\n      "regulatory_requirements": ["gdpr", "pci-dss", "sox"],\n      "business_criticality": "critical"\n    },\n    "threat_modeling": {\n      "attack_vectors": ["web", "api", "mobile"],\n      "threat_actors": ["external", "insider"],\n      "business_impact": ["financial", "reputation", "operational"]\n    },\n    "custom_scoring": {\n      "base_score": "cvss_v3",\n      "environmental_modifier": 1.5,\n      "business_impact_modifier": 2.0,\n      "exploitability_factor": 0.8\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"3-integration-with-security-orchestration",children:"3. Integration with Security Orchestration"}),"\n",(0,s.jsx)(e.p,{children:"Action-AF seamlessly integrates with security orchestration platforms:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Integration configuration example\nintegrations:\n  defectdojo:\n    enabled: true\n    api_key: ${{ secrets.DEFECTDOJO_API_KEY }}\n    product_id: 123\n    engagement_id: 456\n    \n  sonarqube:\n    enabled: true\n    server_url: ${{ secrets.SONAR_HOST_URL }}\n    login: ${{ secrets.SONAR_TOKEN }}\n    \n  jira:\n    enabled: true\n    server: "https://company.atlassian.net"\n    username: ${{ secrets.JIRA_USERNAME }}\n    api_token: ${{ secrets.JIRA_API_TOKEN }}\n    project_key: "SEC"\n    \n  slack:\n    webhook: ${{ secrets.SLACK_SECURITY_WEBHOOK }}\n    channel: "#security-alerts"\n    severity_threshold: "medium"\n'})}),"\n",(0,s.jsx)(e.h3,{id:"production-implementation-strategies",children:"Production Implementation Strategies"}),"\n",(0,s.jsx)(e.h4,{id:"1-multi-stage-security-pipeline",children:"1. Multi-Stage Security Pipeline"}),"\n",(0,s.jsx)(e.p,{children:"Implement a comprehensive security pipeline using Action-AF at multiple stages:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-mermaid",children:"graph TD\n    A[Developer Commit] --\x3e B[Pre-commit Hooks]\n    B --\x3e C[Pull Request]\n    C --\x3e D[Action-AF Baseline Scan]\n    D --\x3e E{Security Gate}\n    E --\x3e|Pass| F[Merge to Main]\n    E --\x3e|Fail| G[Block Merge]\n    F --\x3e H[Action-AF Full Scan]\n    H --\x3e I[Deploy to Staging]\n    I --\x3e J[Action-AF Authenticated Scan]\n    J --\x3e K[Deploy to Production]\n    K --\x3e L[Action-AF Production Monitoring]\n"})}),"\n",(0,s.jsx)(e.h4,{id:"2-risk-based-scanning-strategy",children:"2. Risk-Based Scanning Strategy"}),"\n",(0,s.jsx)(e.p,{children:"Configure different scanning approaches based on risk profiles:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Risk-based scanning configuration\nrisk_profiles:\n  high_risk_apps:\n    scan_frequency: "every_commit"\n    scan_depth: "deep"\n    timeout: 60\n    custom_rules: "strict_banking.json"\n    \n  medium_risk_apps:\n    scan_frequency: "daily"\n    scan_depth: "standard"\n    timeout: 30\n    custom_rules: "standard_web.json"\n    \n  low_risk_apps:\n    scan_frequency: "weekly"\n    scan_depth: "baseline"\n    timeout: 15\n    custom_rules: "basic_checks.json"\n'})}),"\n",(0,s.jsx)(e.h4,{id:"3-dynamic-configuration-management",children:"3. Dynamic Configuration Management"}),"\n",(0,s.jsx)(e.p,{children:"Use dynamic configuration based on environment and application characteristics:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'- name: Configure Action-AF based on application type\n  id: configure-scan\n  run: |\n    # Detect application type\n    if [ -f "package.json" ]; then\n      APP_TYPE="nodejs"\n    elif [ -f "requirements.txt" ]; then\n      APP_TYPE="python"\n    elif [ -f "pom.xml" ]; then\n      APP_TYPE="java"\n    else\n      APP_TYPE="generic"\n    fi\n    \n    # Set configuration based on app type\n    case $APP_TYPE in\n      nodejs)\n        echo "RULES_FILE=.zap/rules/nodejs-af.json" >> $GITHUB_ENV\n        echo "SCAN_TIMEOUT=20" >> $GITHUB_ENV\n        ;;\n      python)\n        echo "RULES_FILE=.zap/rules/python-af.json" >> $GITHUB_ENV\n        echo "SCAN_TIMEOUT=25" >> $GITHUB_ENV\n        ;;\n      java)\n        echo "RULES_FILE=.zap/rules/java-af.json" >> $GITHUB_ENV\n        echo "SCAN_TIMEOUT=35" >> $GITHUB_ENV\n        ;;\n      *)\n        echo "RULES_FILE=.zap/rules/generic-af.json" >> $GITHUB_ENV\n        echo "SCAN_TIMEOUT=15" >> $GITHUB_ENV\n        ;;\n    esac\n\n- name: ZAP Action-AF with Dynamic Configuration\n  uses: zaproxy/action-af@v0.2.0\n  with:\n    target: ${{ env.TARGET_URL }}\n    scan_type: \'full\'\n    rules_file_name: ${{ env.RULES_FILE }}\n    cmd_options: \'-a -j -T ${{ env.SCAN_TIMEOUT }}\'\n'})}),"\n",(0,s.jsx)(e.h3,{id:"advanced-monitoring-and-alerting",children:"Advanced Monitoring and Alerting"}),"\n",(0,s.jsx)(e.h4,{id:"1-real-time-security-dashboard-integration",children:"1. Real-time Security Dashboard Integration"}),"\n",(0,s.jsx)(e.p,{children:"Create real-time dashboards that integrate with Action-AF results:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# Dashboard integration example\nclass SecurityDashboard:\n    def __init__(self, dashboard_url, api_key):\n        self.dashboard_url = dashboard_url\n        self.api_key = api_key\n        \n    def update_security_metrics(self, scan_results):\n        \"\"\"Update dashboard with latest scan results.\"\"\"\n        metrics = {\n            'timestamp': datetime.now().isoformat(),\n            'environment': scan_results['metadata']['environment'],\n            'total_vulnerabilities': scan_results['summary']['total_alerts'],\n            'high_risk_count': scan_results['summary']['high_risk'],\n            'compliance_score': scan_results['compliance_status']['overall_score'],\n            'trend_direction': self._calculate_trend(scan_results),\n            'new_issues': scan_results['trend_analysis']['new_issues_count'],\n            'resolved_issues': scan_results['trend_analysis']['resolved_issues_count']\n        }\n        \n        # Send to dashboard API\n        self._post_metrics(metrics)\n    \n    def _calculate_trend(self, results):\n        \"\"\"Calculate security trend direction.\"\"\"\n        new_count = results['trend_analysis']['new_issues_count']\n        resolved_count = results['trend_analysis']['resolved_issues_count']\n        \n        if resolved_count > new_count:\n            return 'improving'\n        elif new_count > resolved_count:\n            return 'degrading'\n        else:\n            return 'stable'\n"})}),"\n",(0,s.jsx)(e.h4,{id:"2-automated-incident-response",children:"2. Automated Incident Response"}),"\n",(0,s.jsx)(e.p,{children:"Implement automated response workflows for critical findings:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'- name: Automated Incident Response\n  if: contains(fromJSON(steps.zap-af-scan.outputs.summary).high_risk, \'0\') == false\n  run: |\n    # Create incident in incident management system\n    curl -X POST "${{ secrets.INCIDENT_API_URL }}/incidents" \\\n      -H "Authorization: Bearer ${{ secrets.INCIDENT_API_TOKEN }}" \\\n      -H "Content-Type: application/json" \\\n      -d \'{\n        "title": "Critical Security Vulnerabilities Detected",\n        "severity": "high",\n        "source": "zap-action-af",\n        "environment": "${{ matrix.environment }}",\n        "details": "High-risk vulnerabilities found in automated security scan",\n        "assignee_team": "security-team",\n        "auto_escalate": true\n      }\'\n    \n    # Trigger security team notification\n    python3 .github/scripts/emergency-notification.py \\\n      --alert-type "critical-vulnerabilities" \\\n      --environment "${{ matrix.environment }}" \\\n      --findings-count "${{ fromJSON(steps.zap-af-scan.outputs.summary).high_risk }}"\n'})}),"\n",(0,s.jsx)(e.h3,{id:"performance-optimization-techniques",children:"Performance Optimization Techniques"}),"\n",(0,s.jsx)(e.h4,{id:"1-intelligent-scan-scoping",children:"1. Intelligent Scan Scoping"}),"\n",(0,s.jsx)(e.p,{children:"Use Action-AF's intelligent scoping to optimize scan performance:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "scan_optimization": {\n    "intelligent_scoping": {\n      "enabled": true,\n      "change_detection": true,\n      "impact_analysis": true,\n      "resource_allocation": "adaptive"\n    },\n    "scope_configuration": {\n      "max_scan_duration": "30m",\n      "concurrent_requests": 10,\n      "request_delay": "200ms",\n      "depth_limit": 5,\n      "form_handling": "intelligent",\n      "javascript_execution": "limited"\n    },\n    "resource_management": {\n      "memory_limit": "2G",\n      "cpu_limit": "2",\n      "temp_storage": "1G",\n      "network_timeout": "30s"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"2-caching-and-incremental-scanning",children:"2. Caching and Incremental Scanning"}),"\n",(0,s.jsx)(e.p,{children:"Implement sophisticated caching mechanisms:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"- name: Setup Action-AF Caching\n  uses: actions/cache@v4\n  with:\n    path: |\n      ~/.zap/cache\n      .zap/session-data\n      previous-scan-results\n    key: zap-af-cache-${{ matrix.environment }}-${{ matrix.scan_type }}-${{ hashFiles('src/**') }}\n    restore-keys: |\n      zap-af-cache-${{ matrix.environment }}-${{ matrix.scan_type }}-\n      zap-af-cache-${{ matrix.environment }}-\n\n- name: ZAP Action-AF with Incremental Scanning\n  uses: zaproxy/action-af@v0.2.0\n  with:\n    target: ${{ env.TARGET_URL }}\n    scan_type: 'incremental'\n    baseline_session: 'previous-scan-results/session.data'\n    change_detection: true\n    focus_areas: ${{ steps.detect-changes.outputs.changed_paths }}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"compliance-and-governance",children:"Compliance and Governance"}),"\n",(0,s.jsx)(e.h4,{id:"1-automated-compliance-reporting",children:"1. Automated Compliance Reporting"}),"\n",(0,s.jsx)(e.p,{children:"Generate automated compliance reports for various standards:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class ComplianceReporter:\n    def __init__(self):\n        self.compliance_frameworks = {\n            'owasp_top_10': OWASP_TOP_10_MAPPING,\n            'pci_dss': PCI_DSS_MAPPING,\n            'nist_csf': NIST_CSF_MAPPING,\n            'iso_27001': ISO_27001_MAPPING\n        }\n    \n    def generate_compliance_report(self, scan_results, framework):\n        \"\"\"Generate compliance report for specific framework.\"\"\"\n        framework_mapping = self.compliance_frameworks.get(framework)\n        if not framework_mapping:\n            raise ValueError(f\"Unsupported framework: {framework}\")\n        \n        alerts = self._extract_alerts(scan_results)\n        compliance_status = {}\n        \n        for control_id, control_mapping in framework_mapping.items():\n            relevant_alerts = self._filter_alerts_by_control(alerts, control_mapping)\n            compliance_status[control_id] = {\n                'status': 'compliant' if not relevant_alerts else 'non_compliant',\n                'violations': len(relevant_alerts),\n                'risk_level': self._assess_control_risk(relevant_alerts),\n                'remediation_priority': self._calculate_priority(relevant_alerts)\n            }\n        \n        return compliance_status\n"})}),"\n",(0,s.jsx)(e.h4,{id:"2-security-policy-enforcement",children:"2. Security Policy Enforcement"}),"\n",(0,s.jsx)(e.p,{children:"Implement automated security policy enforcement:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Security policy configuration\nsecurity_policies:\n  zero_tolerance:\n    - rule_ids: ["10001", "10002", "10003"]  # SQL Injection variants\n      action: "block_deployment"\n      notification: "security_team"\n      \n  conditional_tolerance:\n    - rule_ids: ["10020", "10021"]  # Missing security headers\n      conditions:\n        - environment: "development"\n          action: "warn"\n        - environment: "production"\n          action: "block_deployment"\n          \n  acceptable_risk:\n    - rule_ids: ["10049", "10050"]  # Cache-related findings\n      conditions:\n        - max_instances: 5\n          action: "warn"\n        - max_instances: 10\n          action: "block_deployment"\n'})}),"\n",(0,s.jsx)(e.h3,{id:"team-collaboration-features",children:"Team Collaboration Features"}),"\n",(0,s.jsx)(e.h4,{id:"1-multi-team-workflow-integration",children:"1. Multi-Team Workflow Integration"}),"\n",(0,s.jsx)(e.p,{children:"Configure Action-AF for multi-team environments:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# Multi-team configuration\nteam_responsibilities:\n  security_team:\n    notifications:\n      - high_risk_findings\n      - policy_violations\n      - compliance_failures\n    approvals_required:\n      - policy_exceptions\n      - risk_acceptance\n      \n  development_team:\n    notifications:\n      - scan_failures\n      - new_medium_risk_findings\n    self_service:\n      - false_positive_marking\n      - exception_requests\n      \n  devops_team:\n    notifications:\n      - scan_infrastructure_issues\n      - performance_degradation\n    responsibilities:\n      - scan_configuration\n      - infrastructure_maintenance\n"})}),"\n",(0,s.jsx)(e.h4,{id:"2-knowledge-base-integration",children:"2. Knowledge Base Integration"}),"\n",(0,s.jsx)(e.p,{children:"Integrate with organizational knowledge bases:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"class SecurityKnowledgeBase:\n    def __init__(self, kb_api_url, api_key):\n        self.kb_api_url = kb_api_url\n        self.api_key = api_key\n    \n    def enrich_findings(self, scan_results):\n        \"\"\"Enrich scan findings with organizational knowledge.\"\"\"\n        enriched_results = scan_results.copy()\n        \n        for alert in enriched_results.get('alerts', []):\n            # Look up internal remediation guidance\n            remediation = self._get_internal_remediation(alert['pluginid'])\n            if remediation:\n                alert['internal_guidance'] = remediation\n            \n            # Check for known exceptions\n            exceptions = self._check_approved_exceptions(alert)\n            if exceptions:\n                alert['approved_exceptions'] = exceptions\n            \n            # Add historical context\n            history = self._get_vulnerability_history(alert)\n            if history:\n                alert['historical_context'] = history\n        \n        return enriched_results\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(e.h3,{id:"1-scanning-strategy",children:"1. Scanning Strategy"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Pull Request Scans"}),": Run baseline scans on PRs for quick feedback"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Main Branch Scans"}),": Run full scans on main branch commits"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scheduled Scans"}),": Run comprehensive scans on a schedule"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Environment-Specific"}),": Scan staging environments before production"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"2-performance-optimization",children:"2. Performance Optimization"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Parallel Scanning"}),": Use matrix builds for multiple applications"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Incremental Scanning"}),": Focus on changed components"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Caching"}),": Cache ZAP Docker images and results"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Resource Limits"}),": Set appropriate timeouts and resource limits"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"3-security-considerations",children:"3. Security Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Credential Management"}),": Use GitHub Secrets for sensitive data"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Network Isolation"}),": Run scans in isolated environments"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Data Privacy"}),": Avoid scanning production data"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Access Control"}),": Limit who can modify security configurations"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"4-result-management",children:"4. Result Management"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Threshold Setting"}),": Define acceptable risk levels"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"False Positive Management"}),": Maintain exclusion lists"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Trend Analysis"}),": Track security improvements over time"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Integration"}),": Connect with bug tracking and notification systems"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"ZAP Timeout Errors"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# Increase timeout values\ncmd_options: '-T 60 -z \"-config spider.maxDuration=10\"'\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Authentication Issues"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Verify authentication context\ndocker run --rm owasp/zap2docker-stable zap-cli --help\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"False Positives"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsv",children:"# Add to rules file\n10054\tIGNORE\tCookie Without SameSite Attribute\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Memory Issues"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Increase container resources\nresources:\n  requests:\n    memory: "2Gi"\n  limits:\n    memory: "4Gi"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"action-af-specific-troubleshooting",children:"Action-AF Specific Troubleshooting"}),"\n",(0,s.jsx)(e.h4,{id:"1-filter-configuration-issues",children:"1. Filter Configuration Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Action-AF filters not working as expected"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Debug filter configuration\n- name: Debug Action-AF Filters\n  run: |\n    # Validate filter file syntax\n    python3 -m json.tool .zap/filters/baseline-filters.json\n    \n    # Check filter application logs\n    grep -i "filter" zap-af-debug.log\n    \n    # Test individual filter rules\n    python3 .github/scripts/test-filters.py \\\n      --filter-file .zap/filters/baseline-filters.json \\\n      --test-alert sample-alert.json\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Verify filter file syntax and rule precedence"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "debug_mode": true,\n  "filter_logging": "verbose",\n  "validation": {\n    "strict_mode": true,\n    "schema_version": "1.0"\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"2-performance-degradation",children:"2. Performance Degradation"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Action-AF scans running slower than expected"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Performance monitoring\n- name: Monitor Action-AF Performance\n  run: |\n    # Check resource usage\n    docker stats zap-af-container &\n    \n    # Monitor scan progress\n    tail -f zap-af-scan.log | grep -E "(progress|performance|timing)"\n    \n    # Analyze bottlenecks\n    python3 .github/scripts/analyze-performance.py \\\n      --scan-log zap-af-scan.log \\\n      --output performance-report.json\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Optimize scan configuration"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'performance_optimization:\n  parallel_scanning: true\n  request_batching: true\n  intelligent_crawling: true\n  resource_limits:\n    max_memory: "4G"\n    max_cpu: "2"\n    scan_timeout: "45m"\n'})}),"\n",(0,s.jsx)(e.h4,{id:"3-authentication-context-issues",children:"3. Authentication Context Issues"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Action-AF not properly handling authentication"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'# Debug authentication\ncurl -v -H "Authorization: Bearer $TOKEN" $TARGET_URL/api/protected\necho "Auth header test: $?"\n\n# Check Action-AF auth configuration\ncat .zap/auth/auth-config.json | jq \'.authentication\'\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Configure proper authentication context"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:'{\n  "authentication": {\n    "method": "bearer_token",\n    "auto_detect": true,\n    "validation": {\n      "success_indicators": ["user", "dashboard", "profile"],\n      "failure_indicators": ["login", "unauthorized", "forbidden"]\n    },\n    "session_management": {\n      "cookie_handling": "automatic",\n      "token_refresh": true,\n      "timeout_detection": true\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"4-integration-failures",children:"4. Integration Failures"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Action-AF failing to integrate with external tools"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Debug integration issues\n- name: Test Integrations\n  run: |\n    # Test DefectDojo integration\n    curl -X GET "$DEFECTDOJO_URL/api/v2/products/" \\\n      -H "Authorization: Token $DEFECTDOJO_API_KEY"\n    \n    # Test Jira integration  \n    curl -X GET "$JIRA_URL/rest/api/2/myself" \\\n      -u "$JIRA_USERNAME:$JIRA_API_TOKEN"\n    \n    # Test Slack integration\n    curl -X POST "$SLACK_WEBHOOK_URL" \\\n      -H "Content-Type: application/json" \\\n      -d \'{"text": "Integration test"}\'\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Verify credentials and network connectivity"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'integration_debugging:\n  retry_policy:\n    max_attempts: 3\n    backoff_factor: 2\n    timeout: 30\n  error_handling:\n    log_level: "debug"\n    capture_responses: true\n    validate_certificates: false  # Only for testing\n'})}),"\n",(0,s.jsx)(e.h4,{id:"5-custom-rules-not-applied",children:"5. Custom Rules Not Applied"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Problem"}),": Custom security rules not being applied"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# Validate custom rules\ndef validate_custom_rules(rules_file):\n    with open(rules_file, 'r') as f:\n        rules = json.load(f)\n    \n    for rule in rules.get('custom_rules', []):\n        # Validate rule syntax\n        pattern = rule.get('pattern')\n        try:\n            re.compile(pattern)\n            print(f\"\u2713 Rule {rule['rule_id']}: Pattern valid\")\n        except re.error as e:\n            print(f\"\u2717 Rule {rule['rule_id']}: Pattern invalid - {e}\")\n    \n    return True\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Solution"}),": Debug rule application"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'- name: Debug Custom Rules\n  run: |\n    # Test rule patterns\n    python3 .github/scripts/validate-rules.py \\\n      --rules-file .zap/rules/baseline-af.json\n    \n    # Check rule loading in Action-AF\n    grep -i "custom rule" zap-af-debug.log\n    \n    # Validate rule precedence\n    python3 .github/scripts/test-rule-precedence.py\n'})}),"\n",(0,s.jsx)(e.h2,{id:"action-af-advanced-configuration-examples",children:"Action-AF Advanced Configuration Examples"}),"\n",(0,s.jsx)(e.h3,{id:"enterprise-security-configuration",children:"Enterprise Security Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Complete enterprise-grade configuration example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/enterprise-zap-af.yml\nname: Enterprise ZAP Action-AF Security Pipeline\n\non:\n  push:\n    branches: [main, release/*]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 2 * * *'  # Daily at 2 AM\n\nenv:\n  ENTERPRISE_CONFIG: true\n  COMPLIANCE_MODE: strict\n  SECURITY_BASELINE: enterprise-v2.1\n\njobs:\n  enterprise-security-scan:\n    runs-on: [self-hosted, security-enhanced]\n    strategy:\n      matrix:\n        environment: [staging, production]\n        scan_profile: [compliance, penetration, api-security]\n      fail-fast: false\n      \n    name: Enterprise Scan - ${{ matrix.environment }} - ${{ matrix.scan_profile }}\n    \n    steps:\n    - name: Checkout with security verification\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n        token: ${{ secrets.ENTERPRISE_GITHUB_TOKEN }}\n        \n    - name: Security environment setup\n      run: |\n        # Load enterprise security configuration\n        source .github/config/enterprise-security.env\n        \n        # Verify security tools\n        .github/scripts/verify-security-tools.sh\n        \n        # Setup compliance monitoring\n        .github/scripts/setup-compliance-monitoring.sh\n        \n    - name: Enterprise ZAP Action-AF Scan\n      uses: zaproxy/action-af@v0.2.0\n      with:\n        target: ${{ secrets[format('{0}_URL', matrix.environment)] }}\n        scan_type: ${{ matrix.scan_profile }}\n        rules_file_name: '.zap/enterprise/rules/${{ matrix.scan_profile }}-enterprise.json'\n        filter_file_name: '.zap/enterprise/filters/${{ matrix.environment }}-enterprise.json'\n        baseline_file_name: 'enterprise-baselines/${{ matrix.environment }}-baseline.json'\n        compliance_framework: 'enterprise-multi'\n        threat_model: '.zap/enterprise/threat-models/${{ matrix.environment }}.json'\n        cmd_options: >-\n          -a -j -T 120\n          -z \"-config spider.maxDuration=60\n              -config scanner.maxScanDurationInMins=120\n              -config api.addrs.addr.name=.*\n              -config api.addrs.addr.regex=true\n              -config scanner.threadPerHost=5\n              -config connection.timeoutInSecs=60\"\n        auth_header_name: 'Authorization'\n        auth_header_value: 'Bearer ${{ secrets[format('{0}_AUTH_TOKEN', matrix.environment)] }}'\n        fail_action: ${{ matrix.environment == 'production' && 'error' || 'warn' }}\n        allow_issue_writing: true\n        issue_title: 'Enterprise Security Issues - ${{ matrix.scan_profile }} - ${{ matrix.environment }}'\n        issue_labels: 'security,enterprise,${{ matrix.scan_profile }},${{ matrix.environment }},compliance'\n        enterprise_mode: true\n        sla_enforcement: true\n        automatic_remediation: false\n        \n    - name: Enterprise compliance validation\n      run: |\n        # Validate against enterprise security standards\n        python3 .github/scripts/enterprise-compliance-check.py \\\n          --scan-results report_json.json \\\n          --compliance-frameworks \"sox,pci-dss,iso27001,nist-csf\" \\\n          --enterprise-policies .zap/enterprise/policies/ \\\n          --environment ${{ matrix.environment }}\n          \n    - name: Advanced threat intelligence integration\n      run: |\n        # Integrate with threat intelligence feeds\n        python3 .github/scripts/threat-intelligence-correlation.py \\\n          --findings report_json.json \\\n          --threat-feeds ${{ secrets.THREAT_INTEL_FEEDS }} \\\n          --output threat-enhanced-report.json\n          \n    - name: Enterprise reporting and notifications\n      run: |\n        # Generate executive summary\n        python3 .github/scripts/executive-summary.py \\\n          --scan-results threat-enhanced-report.json \\\n          --template .github/templates/executive-summary.html \\\n          --output executive-summary-${{ matrix.environment }}-${{ matrix.scan_profile }}.html\n          \n        # Send to enterprise security dashboard\n        curl -X POST \"${{ secrets.ENTERPRISE_SECURITY_DASHBOARD }}/api/scans\" \\\n          -H \"Authorization: Bearer ${{ secrets.DASHBOARD_API_TOKEN }}\" \\\n          -H \"Content-Type: application/json\" \\\n          -d @threat-enhanced-report.json\n          \n        # Notify C-level executives for production high-risk findings\n        if [[ \"${{ matrix.environment }}\" == \"production\" && $(jq '.summary.high_risk' threat-enhanced-report.json) -gt 0 ]]; then\n          python3 .github/scripts/executive-notification.py \\\n            --severity critical \\\n            --environment production \\\n            --findings threat-enhanced-report.json\n        fi\n"})}),"\n",(0,s.jsx)(e.h3,{id:"custom-action-af-extension",children:"Custom Action-AF Extension"}),"\n",(0,s.jsx)(e.p,{children:"Example of extending Action-AF functionality:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# .github/scripts/action-af-extension.py\n\"\"\"\nCustom extension for ZAP Action-AF with organization-specific features.\n\"\"\"\n\nimport json\nimport requests\nfrom typing import Dict, List, Any\n\nclass ActionAFExtension:\n    def __init__(self, config_file: str):\n        with open(config_file, 'r') as f:\n            self.config = json.load(f)\n            \n    def custom_vulnerability_scoring(self, alert: Dict) -> Dict:\n        \"\"\"Apply custom vulnerability scoring logic.\"\"\"\n        base_score = self._get_base_score(alert)\n        \n        # Apply business context\n        business_impact = self._assess_business_impact(alert)\n        \n        # Apply environmental factors\n        env_factor = self._get_environmental_factor(alert)\n        \n        # Calculate custom score\n        custom_score = base_score * business_impact * env_factor\n        \n        alert['custom_scoring'] = {\n            'base_score': base_score,\n            'business_impact': business_impact,\n            'environmental_factor': env_factor,\n            'final_score': custom_score,\n            'risk_classification': self._classify_risk(custom_score)\n        }\n        \n        return alert\n    \n    def intelligent_false_positive_detection(self, alerts: List[Dict]) -> List[Dict]:\n        \"\"\"Use ML model to detect false positives.\"\"\"\n        processed_alerts = []\n        \n        for alert in alerts:\n            # Feature extraction\n            features = self._extract_features(alert)\n            \n            # ML prediction\n            fp_probability = self._predict_false_positive(features)\n            \n            # Apply confidence threshold\n            if fp_probability < self.config['fp_threshold']:\n                alert['false_positive_probability'] = fp_probability\n                alert['recommendation'] = 'investigate'\n                processed_alerts.append(alert)\n            else:\n                alert['false_positive_probability'] = fp_probability\n                alert['recommendation'] = 'likely_false_positive'\n                # Optional: still include but mark as low priority\n                if self.config['include_likely_fps']:\n                    processed_alerts.append(alert)\n                    \n        return processed_alerts\n    \n    def compliance_mapping(self, alerts: List[Dict]) -> Dict[str, Any]:\n        \"\"\"Map vulnerabilities to compliance frameworks.\"\"\"\n        compliance_mapping = {}\n        \n        frameworks = self.config['compliance_frameworks']\n        \n        for framework in frameworks:\n            compliance_mapping[framework] = self._map_to_framework(alerts, framework)\n            \n        return compliance_mapping\n    \n    def generate_remediation_guidance(self, alert: Dict) -> Dict[str, str]:\n        \"\"\"Generate specific remediation guidance.\"\"\"\n        guidance = {\n            'immediate_actions': [],\n            'code_changes': [],\n            'configuration_updates': [],\n            'monitoring_recommendations': []\n        }\n        \n        # Use knowledge base to generate guidance\n        kb_guidance = self._query_knowledge_base(alert)\n        if kb_guidance:\n            guidance.update(kb_guidance)\n            \n        # Add organization-specific guidance\n        org_guidance = self._get_organizational_guidance(alert)\n        if org_guidance:\n            guidance['organizational_requirements'] = org_guidance\n            \n        return guidance\n"})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(e.p,{children:"Implementing DAST with OWASP ZAP and GitHub Actions provides:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Automated Security Testing"}),": Continuous vulnerability detection"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"CI/CD Integration"}),": Security gates in deployment pipeline"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Comprehensive Coverage"}),": Multiple scanning approaches"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Actionable Results"}),": Detailed reports and integration options"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scalable Solution"}),": Supports multiple applications and environments"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"This approach enables organizations to shift security left and maintain robust security posture throughout the development lifecycle."}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Key Benefits of ZAP Action-AF Integration:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Advanced Filtering"}),": Intelligent false positive reduction"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Enterprise Features"}),": Compliance mapping and advanced reporting"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Seamless Integration"}),": Built-in support for security orchestration platforms"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Scalable Architecture"}),": Supports complex multi-environment deployments"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Enhanced Automation"}),": ML-enhanced vulnerability assessment and prioritization"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(e.h3,{id:"core-documentation",children:"Core Documentation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.zaproxy.org/docs/",children:"OWASP ZAP Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.github.com/en/actions",children:"GitHub Actions Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-community/controls/Dynamic_Application_Security_Testing_(DAST)",children:"OWASP DAST Guide"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://hub.docker.com/u/owasp",children:"ZAP Docker Images"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.zaproxy.org/docs/api/",children:"ZAP API Documentation"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"action-af-specific-resources",children:"Action-AF Specific Resources"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/zaproxy/action-af",children:"ZAP Action-AF GitHub Repository"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/zaproxy/action-af/blob/main/CONFIG.md",children:"Action-AF Configuration Guide"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/zaproxy/action-af/blob/main/API.md",children:"Action-AF API Reference"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/zaproxy/action-af-examples",children:"Action-AF Examples Repository"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/zaproxy/action-af/wiki/Troubleshooting",children:"Action-AF Troubleshooting Guide"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"security-standards-and-frameworks",children:"Security Standards and Frameworks"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-project-top-ten/",children:"OWASP Top 10"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.nist.gov/cyberframework",children:"NIST Cybersecurity Framework"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf",children:"PCI DSS Requirements"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.iso.org/isoiec-27001-information-security.html",children:"ISO 27001 Standard"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.sans.org/critical-security-controls/",children:"SANS Security Controls"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"integration-platforms",children:"Integration Platforms"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.defectdojo.org/",children:"DefectDojo"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.sonarqube.org/features/security/",children:"SonarQube Security"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.atlassian.com/software/jira",children:"Jira Integration"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://api.slack.com/",children:"Slack API"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook",children:"Microsoft Teams Webhooks"})}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://www.devsecops.org/",children:"Security as Code Best Practices"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-community/Threat_Modeling",children:"Threat Modeling Guide"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-project-devsecops-guideline/",children:"Security Testing in CI/CD"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-project-container-security/",children:"Container Security"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://owasp.org/www-project-api-security/",children:"API Security Testing"})}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},7814:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var i=t(9729);const s={},r=i.createContext(s);function a(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);