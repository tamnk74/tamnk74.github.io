"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6620],{5741:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(9729);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}},7750:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"coding-conventions/react-best-practice","title":"React Best Practices","description":"Use JSX ShortHand","source":"@site/docs/coding-conventions/react-best-practice.md","sourceDirName":"coding-conventions","slug":"/coding-conventions/react-best-practice","permalink":"/fullstack-dev/docs/coding-conventions/react-best-practice","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/coding-conventions/react-best-practice.md","tags":[],"version":"current","frontMatter":{}}');var i=r(5813),o=r(5741);const t={},l="React Best Practices",a={},c=[{value:"Use JSX ShortHand",id:"use-jsx-shorthand",level:2},{value:"Use Ternary Operators",id:"use-ternary-operators",level:2},{value:"Use Object Literals",id:"use-object-literals",level:2},{value:"Use Fragments",id:"use-fragments",level:2},{value:"Do not define a function inside Render",id:"do-not-define-a-function-inside-render",level:2},{value:"Use Memo",id:"use-memo",level:2},{value:"Put CSS in JavaScript",id:"put-css-in-javascript",level:2},{value:"Use Object Destructuring",id:"use-object-destructuring",level:2},{value:"String Props do not need Curly Braces",id:"string-props-do-not-need-curly-braces",level:2},{value:"Remove JS Code From JSX",id:"remove-js-code-from-jsx",level:2},{value:"Use Template Literals",id:"use-template-literals",level:2},{value:"Import in Order",id:"import-in-order",level:2},{value:"Use Implicit return",id:"use-implicit-return",level:2},{value:"Component Naming",id:"component-naming",level:2},{value:"Reserved Prop Naming",id:"reserved-prop-naming",level:2},{value:"Quotes",id:"quotes",level:2},{value:"Prop Naming",id:"prop-naming",level:2},{value:"JSX in Parentheses",id:"jsx-in-parentheses",level:2},{value:"Self-Closing Tags",id:"self-closing-tags",level:2},{value:"Underscore in Method Name",id:"underscore-in-method-name",level:2},{value:"Alt Prop",id:"alt-prop",level:2},{value:"Short-Circuit evaluation in JSX",id:"short-circuit-evaluation-in-jsx",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"react-best-practices",children:"React Best Practices"})}),"\n",(0,i.jsx)(n.h2,{id:"use-jsx-shorthand",children:"Use JSX ShortHand"}),"\n",(0,i.jsx)(n.p,{children:"Try to use JSX shorthand for passing boolean variables. Let's say you want to control the title visibility of a Navbar component."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n  <Navbar showTitle={true} />\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return(\n  <Navbar showTitle />  \n)\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-ternary-operators",children:"Use Ternary Operators"}),"\n",(0,i.jsx)(n.p,{children:"Let's say you want to show a particular user's details based on role."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { role } = user;\n\nif(role === ADMIN) {\n  return <AdminUser />\n}else{\n  return <NormalUser />\n} \n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { role } = user;\n\nreturn role === ADMIN ? <AdminUser /> : <NormalUser />\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-object-literals",children:"Use Object Literals"}),"\n",(0,i.jsx)(n.p,{children:"Object literals can help make our code more readable. Let's say you want to show three types of users based on their role. You can't use ternary because the number of options is greater than two."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {role} = user\n\nswitch(role){\n  case ADMIN:\n    return <AdminUser />\n  case EMPLOYEE:\n    return <EmployeeUser />\n  case USER:\n    return <NormalUser />\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const {role} = user\n\nconst components = {\n  ADMIN: AdminUser,\n  EMPLOYEE: EmployeeUser,\n  USER: NormalUser\n};\n\nconst Component = components[role];\n\nreturn <Componenent />;\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-fragments",children:"Use Fragments"}),"\n",(0,i.jsx)(n.p,{children:"Always use Fragment over Div. It keeps the code clean and is also beneficial for performance because one less node is created in the virtual DOM."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n  <div>\n     <Component1 />\n     <Component2 />\n     <Component3 />\n  </div>  \n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n  <>\n     <Component1 />\n     <Component2 />\n     <Component3 />\n  </>  \n)\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"do-not-define-a-function-inside-render",children:"Do not define a function inside Render"}),"\n",(0,i.jsx)(n.p,{children:"Don't define a function inside render. Try to keep the logic inside render to an absolute minimum."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n    <button onClick={() => dispatch(ACTION_TO_SEND_DATA)}>    // NOTICE HERE\n      This is a bad example \n    </button>  \n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const submitData = () => dispatch(ACTION_TO_SEND_DATA)\n\nreturn (\n  <button onClick={submitData}>  \n    This is a good example \n  </button>  \n)\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-memo",children:"Use Memo"}),"\n",(0,i.jsx)(n.p,{children:"React.PureComponent and Memo can significantly improve the performance of your application. They help us to avoid unnecessary rendering."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import React, { useState } from "react";\n\nexport const TestMemo = () => {\n  const [userName, setUserName] = useState("faisal");\n  const [count, setCount] = useState(0);\n  \n  const increment = () => setCount((count) => count + 1);\n  \n  return (\n    <>\n      <ChildrenComponent userName={userName} />\n      <button onClick={increment}> Increment </button>\n    </>\n  );\n};\n\nconst ChildrenComponent =({ userName }) => {\n  console.log("rendered", userName);\n  return <div> {userName} </div>;\n};\n'})}),"\n",(0,i.jsx)(n.p,{children:"Although the child component should render only once because the value of count has nothing to do with the ChildComponent. But, it renders each time you click on the button.\nOutput"}),"\n",(0,i.jsx)(n.p,{children:"Let's edit the ChildrenComponent to this:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import React ,{useState} from \"react\";\n\nconst ChildrenComponent = React.memo(({userName}) => {\n    console.log('rendered')\n    return <div> {userName}</div>\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now no matter how many times you click on the button, it will render only when necessary."}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"put-css-in-javascript",children:"Put CSS in JavaScript"}),"\n",(0,i.jsx)(n.p,{children:"Try to avoid raw JavaScript when you are writing React applications because organizing CSS is far harder than organizing JS."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// CSS FILE\n\n.body {\n  height: 10px;\n}\n\n//JSX\n\nreturn <div className='body'>\n   \n</div>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const bodyStyle = {\n  height: "10px"\n}\n\nreturn <div style={bodyStyle}>\n\n</div>\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-object-destructuring",children:"Use Object Destructuring"}),"\n",(0,i.jsx)(n.p,{children:"Use object destructuring to your advantage. Let's say you need to show a user's details."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n  <>\n    <div> {user.name} </div>\n    <div> {user.age} </div>\n    <div> {user.profession} </div>\n  </>  \n)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { name, age, profession } = user;\n\nreturn (\n  <>\n    <div> {name} </div>\n    <div> {age} </div>\n    <div> {profession} </div>\n  </>  \n)\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"string-props-do-not-need-curly-braces",children:"String Props do not need Curly Braces"}),"\n",(0,i.jsx)(n.p,{children:"When passing string props to a children component."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'return(\n  <Navbar title={"My Special App"} />\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'return(\n  <Navbar title="My Special App" />  \n)\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"remove-js-code-from-jsx",children:"Remove JS Code From JSX"}),"\n",(0,i.jsx)(n.p,{children:"Move any JS code out of JSX if that doesn't serve any purpose of rendering or UI functionality."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"return (\n  <ul>\n    {posts.map((post) => (\n      <li onClick={event => {\n        console.log(event.target, 'clicked!'); // <- THIS IS BAD\n        }} key={post.id}>{post.title}\n      </li>\n    ))}\n  </ul>\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const onClickHandler = (event) => {\n   console.log(event.target, 'clicked!'); \n}\n\nreturn (\n  <ul>\n    {posts.map((post) => (\n      <li onClick={onClickHandler} key={post.id}> {post.title} </li>\n    ))}\n  </ul>\n);\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-template-literals",children:"Use Template Literals"}),"\n",(0,i.jsx)(n.p,{children:"Use template literals to build large strings. Avoid using string concatenation. It's nice and clean."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const userDetails = user.name + "\'s profession is" + user.proffession\n\nreturn (\n  <div> {userDetails} </div>  \n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const userDetails = `${user.name}'s profession is ${user.proffession}`\n\nreturn (\n  <div> {userDetails} </div>  \n)\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"import-in-order",children:"Import in Order"}),"\n",(0,i.jsx)(n.p,{children:"Always try to import things in a certain order. It improves code readability."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import React from 'react';\nimport ErrorImg from '../../assets/images/error.png';\nimport styled from 'styled-components/native';\nimport colors from '../../styles/colors';\nimport { PropTypes } from 'prop-types';\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.p,{children:"The rule of thumb is to keep the import order like this:\nBuilt-in\nExternal\nInternal\nSo the example above becomes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import React from 'react';\n\nimport { PropTypes } from 'prop-types';\nimport styled from 'styled-components/native';\n\nimport ErrorImg from '../../assets/images/error.png';\nimport colors from '../../styles/colors';\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"use-implicit-return",children:"Use Implicit return"}),"\n",(0,i.jsx)(n.p,{children:"Use the JavaScript feature of implicit return to write beautiful code. Let's say your function does a simple calculation and returns the result."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const add = (a, b) => {\n  return a + b;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const add = (a, b) => a + b;\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"component-naming",children:"Component Naming"}),"\n",(0,i.jsx)(n.p,{children:"Always use PascalCase for components and camelCase for instances."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import reservationCard from './ReservationCard';\n\nconst ReservationItem = <ReservationCard />;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import ReservationCard from './ReservationCard';\n\nconst reservationItem = <ReservationCard />;\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"reserved-prop-naming",children:"Reserved Prop Naming"}),"\n",(0,i.jsx)(n.p,{children:"Do not use DOM component prop names for passing props between components because others might not expect these names."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<MyComponent style="dark" />\n\n<MyComponent className="dark" />\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<MyComponent variant="fancy" />\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"quotes",children:"Quotes"}),"\n",(0,i.jsx)(n.p,{children:"Use double quotes for JSX attributes and single quotes for all other JS."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<Foo bar='bar' />\n\n<Foo style={{ left: \"20px\" }} />\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"<Foo bar=\"bar\" />\n\n<Foo style={{ left: '20px' }} />\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"prop-naming",children:"Prop Naming"}),"\n",(0,i.jsx)(n.p,{children:"Always use camelCase for prop names or PascalCase if the prop value is a React component."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<Component\n  UserName="hello"\n  phone_number={12345678}\n/>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<MyComponent\n  userName="hello"\n  phoneNumber={12345678}\n  Component={SomeComponent}\n/>\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"jsx-in-parentheses",children:"JSX in Parentheses"}),"\n",(0,i.jsx)(n.p,{children:"If your component spans more than one line, always wrap it in parentheses."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'return <MyComponent variant="long">\n           <MyChild />\n         </MyComponent>;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'return (\n    <MyComponent variant="long">\n      <MyChild />\n    </MyComponent>\n);\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"self-closing-tags",children:"Self-Closing Tags"}),"\n",(0,i.jsx)(n.p,{children:"If your component doesn't have any children, then use self-closing tags. It improves readability."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<SomeComponent variant="stuff"></SomeComponent>\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<SomeComponent variant="stuff" />\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"underscore-in-method-name",children:"Underscore in Method Name"}),"\n",(0,i.jsx)(n.p,{children:"Do not use underscores in any internal React method."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const _onClickHandler = () => {\n  // do stuff\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const onClickHandler = () => {\n  // do stuff\n}\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"alt-prop",children:"Alt Prop"}),"\n",(0,i.jsxs)(n.p,{children:["Always include an alt prop in your ",(0,i.jsx)(n.code,{children:"<img >"})," tags. And do not use picture or image in your alt property because the screenreaders already announce img elements as images. No need to include that."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<img src="hello.jpg" />\n\n<img src="hello.jpg" alt="Picture of me rowing a boat" />\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'<img src="hello.jpg" alt="Me waving hello" />\n'})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})}),"\n",(0,i.jsx)(n.h2,{id:"short-circuit-evaluation-in-jsx",children:"Short-Circuit evaluation in JSX"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Avoid\nconst sampleComponent = () => {\n  return isTrue ? <p>True!</p> : null\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Recommended: short-circuit evaluation\nconst sampleComponent = () => {\n  return isTrue && <p>True!</p>\n};\n"})}),"\n",(0,i.jsx)("div",{align:"right",children:(0,i.jsx)("b",{children:(0,i.jsx)("a",{href:"#",children:"\u21a5 back to top"})})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);