"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6592],{4616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var t=i(5102),r=i(5813),s=i(7814);const o={slug:"gitops-microservices-nodejs-gcp-practical-guide",title:"GitOps in Practice: Deploying Node.js Microservices to GCP GKE with ArgoCD and Kustomize",authors:["tam"],tags:["gitops","microservices","nodejs","nestjs","gcp","gke","argocd","kustomize","kubernetes","infrastructure-as-code","devops"]},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"The GitOps Promise",id:"the-gitops-promise",level:2},{value:"Key Benefits We&#39;ll Achieve",id:"key-benefits-well-achieve",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Step 1: Infrastructure Setup with Terraform",id:"step-1-infrastructure-setup-with-terraform",level:2},{value:"Project Structure",id:"project-structure",level:3},{value:"GKE Cluster Configuration",id:"gke-cluster-configuration",level:3},{value:"Environment-Specific Variables",id:"environment-specific-variables",level:3},{value:"Step 2: GitOps Repository Structure",id:"step-2-gitops-repository-structure",level:2},{value:"Step 3: Kustomize Configuration",id:"step-3-kustomize-configuration",level:2},{value:"Base Configuration",id:"base-configuration",level:3},{value:"Base Kustomization",id:"base-kustomization",level:3},{value:"Production Overlay",id:"production-overlay",level:3},{value:"Production Resource Patches",id:"production-resource-patches",level:3},{value:"Horizontal Pod Autoscaler",id:"horizontal-pod-autoscaler",level:3},{value:"Step 4: ArgoCD Installation and Configuration",id:"step-4-argocd-installation-and-configuration",level:2},{value:"ArgoCD Installation",id:"argocd-installation",level:3},{value:"ArgoCD Configuration",id:"argocd-configuration",level:3},{value:"Application Project",id:"application-project",level:3},{value:"Application Definition",id:"application-definition",level:3},{value:"Step 5: CI/CD Pipeline Implementation",id:"step-5-cicd-pipeline-implementation",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Application Dockerfile",id:"application-dockerfile",level:3},{value:"Step 6: Security Implementation",id:"step-6-security-implementation",level:2},{value:"Network Policies",id:"network-policies",level:3},{value:"Secret Management with External Secrets",id:"secret-management-with-external-secrets",level:3},{value:"Step 7: Monitoring and Observability",id:"step-7-monitoring-and-observability",level:2},{value:"Prometheus ServiceMonitor",id:"prometheus-servicemonitor",level:3},{value:"Application Health Checks",id:"application-health-checks",level:3},{value:"Step 8: Deployment and Validation",id:"step-8-deployment-and-validation",level:2},{value:"Bootstrap Script",id:"bootstrap-script",level:3},{value:"Validation Commands",id:"validation-commands",level:3},{value:"Benefits Achieved",id:"benefits-achieved",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Implementing GitOps for microservices deployment brings consistency, reliability, and traceability to your deployment pipeline. This practical guide walks through setting up a complete GitOps workflow for Node.js microservices on Google Cloud Platform (GCP) using Google Kubernetes Engine (GKE), ArgoCD, and Kustomize."}),"\n",(0,r.jsx)(n.p,{children:"We'll build a production-ready deployment pipeline that follows infrastructure as code principles and implements security best practices for enterprise-grade applications."}),"\n",(0,r.jsx)(n.h2,{id:"the-gitops-promise",children:"The GitOps Promise"}),"\n",(0,r.jsx)(n.p,{children:"GitOps transforms how we think about deployments by making Git the single source of truth for both application code and infrastructure configuration. Instead of pushing deployments to environments, GitOps pulls the desired state from Git repositories and continuously reconciles the actual state with the declared state."}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits-well-achieve",children:"Key Benefits We'll Achieve"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Declarative Infrastructure"}),": Everything defined as code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Control"}),": Full audit trail of all changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automated Deployments"}),": Reduced human error and faster delivery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": No direct cluster access required for deployments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rollback Capability"}),": Easy recovery from failed deployments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Environment Management"}),": Consistent configuration across environments"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(n.p,{children:"Our GitOps implementation uses a three-repository strategy:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Application Repos] --\x3e B[CI Pipeline]\n    B --\x3e C[Container Registry]\n    B --\x3e D[GitOps Repo Update]\n    D --\x3e E[ArgoCD Sync]\n    E --\x3e F[GKE Deployment]\n    \n    G[Infrastructure Repo] --\x3e H[Terraform]\n    H --\x3e I[GCP Resources]\n    \n    J[GitOps Repo] --\x3e K[Kustomize Overlays]\n    K --\x3e E\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-1-infrastructure-setup-with-terraform",children:"Step 1: Infrastructure Setup with Terraform"}),"\n",(0,r.jsx)(n.p,{children:"First, let's set up our GKE cluster using Terraform for infrastructure as code."}),"\n",(0,r.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"infrastructure/\n\u251c\u2500\u2500 terraform/\n\u2502   \u251c\u2500\u2500 environments/\n\u2502   \u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2514\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u2502   \u251c\u2500\u2500 gke/\n\u2502   \u2502   \u251c\u2500\u2500 networking/\n\u2502   \u2502   \u2514\u2500\u2500 security/\n\u2502   \u2514\u2500\u2500 shared/\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 setup.sh\n    \u2514\u2500\u2500 teardown.sh\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gke-cluster-configuration",children:"GKE Cluster Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# terraform/modules/gke/main.tf\nresource "google_container_cluster" "microservices" {\n  name     = var.cluster_name\n  location = var.region\n  \n  # Remove default node pool\n  remove_default_node_pool = true\n  initial_node_count       = 1\n  \n  # Network configuration\n  network    = google_compute_network.vpc.name\n  subnetwork = google_compute_subnetwork.subnet.name\n  \n  # Enable workload identity for secure pod-to-GCP service communication\n  workload_identity_config {\n    workload_pool = "${var.project_id}.svc.id.goog"\n  }\n  \n  # Private cluster for enhanced security\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = "172.16.0.0/28"\n  }\n  \n  # Networking features\n  network_policy {\n    enabled = true\n  }\n  \n  # Enable necessary APIs\n  addons_config {\n    horizontal_pod_autoscaling {\n      disabled = false\n    }\n    network_policy_config {\n      disabled = false\n    }\n    http_load_balancing {\n      disabled = false\n    }\n  }\n  \n  # Logging and monitoring\n  logging_service    = "logging.googleapis.com/kubernetes"\n  monitoring_service = "monitoring.googleapis.com/kubernetes"\n}\n\nresource "google_container_node_pool" "primary_nodes" {\n  name       = "${var.cluster_name}-nodes"\n  location   = var.region\n  cluster    = google_container_cluster.microservices.name\n  \n  # Auto-scaling configuration\n  autoscaling {\n    min_node_count = var.min_node_count\n    max_node_count = var.max_node_count\n  }\n  \n  node_config {\n    preemptible  = var.preemptible\n    machine_type = var.machine_type\n    disk_size_gb = var.disk_size_gb\n    disk_type    = "pd-ssd"\n    \n    # Service account for nodes\n    service_account = google_service_account.gke_nodes.email\n    oauth_scopes = [\n      "https://www.googleapis.com/auth/logging.write",\n      "https://www.googleapis.com/auth/monitoring",\n      "https://www.googleapis.com/auth/devstorage.read_only"\n    ]\n    \n    # Security settings\n    workload_metadata_config {\n      mode = "GKE_METADATA"\n    }\n    \n    labels = {\n      environment = var.environment\n      managed-by  = "terraform"\n    }\n  }\n  \n  management {\n    auto_repair  = true\n    auto_upgrade = true\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"environment-specific-variables",children:"Environment-Specific Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-hcl",children:'# terraform/environments/production/terraform.tfvars\nproject_id     = "your-microservices-project"\ncluster_name   = "microservices-prod"\nregion         = "us-central1"\nenvironment    = "production"\n\n# Node configuration\nmachine_type   = "e2-standard-4"\nmin_node_count = 3\nmax_node_count = 10\ndisk_size_gb   = 100\npreemptible    = false\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-gitops-repository-structure",children:"Step 2: GitOps Repository Structure"}),"\n",(0,r.jsx)(n.p,{children:"Create a dedicated GitOps repository with a clear structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"gitops-microservices/\n\u251c\u2500\u2500 applications/\n\u2502   \u251c\u2500\u2500 api-gateway/\n\u2502   \u2502   \u251c\u2500\u2500 base/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 deployment.yaml\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 service.yaml\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 configmap.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 kustomization.yaml\n\u2502   \u2502   \u2514\u2500\u2500 overlays/\n\u2502   \u2502       \u251c\u2500\u2500 development/\n\u2502   \u2502       \u251c\u2500\u2500 staging/\n\u2502   \u2502       \u2514\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 user-service/\n\u2502   \u251c\u2500\u2500 order-service/\n\u2502   \u2514\u2500\u2500 payment-service/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 argocd/\n\u2502   \u251c\u2500\u2500 ingress-nginx/\n\u2502   \u251c\u2500\u2500 cert-manager/\n\u2502   \u2514\u2500\u2500 monitoring/\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 bootstrap.sh\n    \u2514\u2500\u2500 validate.sh\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-kustomize-configuration",children:"Step 3: Kustomize Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Kustomize enables environment-specific configurations without duplicating YAML files."}),"\n",(0,r.jsx)(n.h3,{id:"base-configuration",children:"Base Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# applications/user-service/base/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  labels:\n    app: user-service\n    version: v1\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n        version: v1\n    spec:\n      serviceAccountName: user-service\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        fsGroup: 1000\n      containers:\n      - name: user-service\n        image: gcr.io/PROJECT_ID/user-service:latest\n        ports:\n        - containerPort: 3000\n          name: http\n        env:\n        - name: NODE_ENV\n          value: production\n        - name: PORT\n          value: "3000"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: user-service-secrets\n              key: database-url\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n'})}),"\n",(0,r.jsx)(n.h3,{id:"base-kustomization",children:"Base Kustomization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nmetadata:\n  name: user-service-base\n\nresources:\n  - deployment.yaml\n  - service.yaml\n  - serviceaccount.yaml\n  - networkpolicy.yaml\n\ncommonLabels:\n  app: user-service\n  component: backend\n  part-of: microservices\n\nimages:\n  - name: gcr.io/PROJECT_ID/user-service\n    newTag: latest\n\nconfigMapGenerator:\n  - name: user-service-config\n    literals:\n      - PORT=3000\n      - LOG_LEVEL=info\n      - METRICS_ENABLED=true\n      - HEALTH_CHECK_TIMEOUT=5000\n\nsecretGenerator:\n  - name: user-service-secrets\n    literals:\n      - database-url=placeholder\n      - jwt-secret=placeholder\n    type: Opaque\n"})}),"\n",(0,r.jsx)(n.h3,{id:"production-overlay",children:"Production Overlay"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/overlays/production/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: microservices-prod\n\nresources:\n  - ../../base\n  - hpa.yaml\n  - pdb.yaml\n  - networkpolicy-prod.yaml\n\npatchesStrategicMerge:\n  - deployment-patch.yaml\n\nreplicas:\n  - name: user-service\n    count: 3\n\nimages:\n  - name: gcr.io/PROJECT_ID/user-service\n    newTag: v1.2.3\n\nconfigMapGenerator:\n  - name: user-service-config\n    behavior: merge\n    literals:\n      - LOG_LEVEL=warn\n      - CACHE_TTL=3600\n      - DB_POOL_SIZE=20\n\nsecretGenerator:\n  - name: user-service-secrets\n    behavior: replace\n    files:\n      - database-url=secrets/database-url\n      - jwt-secret=secrets/jwt-secret\n"})}),"\n",(0,r.jsx)(n.h3,{id:"production-resource-patches",children:"Production Resource Patches"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# applications/user-service/overlays/production/deployment-patch.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  template:\n    spec:\n      containers:\n      - name: user-service\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "500m"\n          limits:\n            memory: "1Gi"\n            cpu: "1000m"\n        env:\n        - name: NODE_ENV\n          value: production\n        - name: LOG_LEVEL\n          value: warn\n        - name: DB_CONNECTION_POOL\n          value: "20"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"horizontal-pod-autoscaler",children:"Horizontal Pod Autoscaler"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/overlays/production/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: user-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: user-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n      - type: Pods\n        value: 4\n        periodSeconds: 15\n      selectPolicy: Max\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-argocd-installation-and-configuration",children:"Step 4: ArgoCD Installation and Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"argocd-installation",children:"ArgoCD Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create ArgoCD namespace\nkubectl create namespace argocd\n\n# Install ArgoCD\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Wait for deployment\nkubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd\n\n# Get initial admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d\n\n# Port forward to access UI\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n'})}),"\n",(0,r.jsx)(n.h3,{id:"argocd-configuration",children:"ArgoCD Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# infrastructure/argocd/argocd-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\ndata:\n  repositories: |\n    - type: git\n      url: https://github.com/your-org/gitops-microservices\n      passwordSecret:\n        name: gitops-repo-secret\n        key: password\n      usernameSecret:\n        name: gitops-repo-secret\n        key: username\n  \n  application.instanceLabelKey: argocd.argoproj.io/instance\n  \n  server.rbac.log.enforce.enable: "true"\n  \n  policy.default: role:readonly\n  policy.csv: |\n    p, role:admin, applications, *, */*, allow\n    p, role:admin, clusters, *, *, allow\n    p, role:admin, repositories, *, *, allow\n    p, role:developer, applications, get, */*, allow\n    p, role:developer, applications, sync, microservices/*, allow\n    g, argocd-admins, role:admin\n    g, developers, role:developer\n'})}),"\n",(0,r.jsx)(n.h3,{id:"application-project",children:"Application Project"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/projects/microservices.yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: microservices\n  namespace: argocd\nspec:\n  description: Microservices applications\n  \n  sourceRepos:\n  - 'https://github.com/your-org/gitops-microservices'\n  \n  destinations:\n  - namespace: 'microservices-*'\n    server: https://kubernetes.default.svc\n  \n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n  \n  namespaceResourceWhitelist:\n  - group: ''\n    kind: ConfigMap\n  - group: ''\n    kind: Secret\n  - group: ''\n    kind: Service\n  - group: ''\n    kind: ServiceAccount\n  - group: apps\n    kind: Deployment\n  - group: networking.k8s.io\n    kind: Ingress\n  - group: autoscaling\n    kind: HorizontalPodAutoscaler\n  - group: policy\n    kind: PodDisruptionBudget\n  \n  roles:\n  - name: developer\n    policies:\n    - p, proj:microservices:developer, applications, get, microservices/*, allow\n    - p, proj:microservices:developer, applications, sync, microservices/*, allow\n    groups:\n    - developers\n"})}),"\n",(0,r.jsx)(n.h3,{id:"application-definition",children:"Application Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/applications/user-service.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: user-service-prod\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: microservices\n  \n  source:\n    repoURL: https://github.com/your-org/gitops-microservices\n    targetRevision: HEAD\n    path: applications/user-service/overlays/production\n  \n  destination:\n    server: https://kubernetes.default.svc\n    namespace: microservices-prod\n  \n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n      allowEmpty: false\n    syncOptions:\n    - CreateNamespace=true\n    - PrunePropagationPolicy=foreground\n    - PruneLast=true\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n  \n  revisionHistoryLimit: 10\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-cicd-pipeline-implementation",children:"Step 5: CI/CD Pipeline Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/user-service.yml\nname: User Service CI/CD\n\non:\n  push:\n    branches: [main, develop]\n    paths:\n    - 'services/user-service/**'\n  pull_request:\n    branches: [main]\n    paths:\n    - 'services/user-service/**'\n\nenv:\n  SERVICE_NAME: user-service\n  GCP_PROJECT: your-project-id\n  REGISTRY: gcr.io\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n        cache-dependency-path: services/${{ env.SERVICE_NAME }}/package-lock.json\n    \n    - name: Install dependencies\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm ci\n    \n    - name: Run tests\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm run test:coverage\n    \n    - name: Security audit\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm audit --audit-level high\n\n  build-and-deploy:\n    needs: test\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    outputs:\n      image-tag: ${{ steps.build.outputs.image-tag }}\n    steps:\n    - uses: actions/checkout@v4\n    \n    - name: Setup Google Cloud CLI\n      uses: google-github-actions/setup-gcloud@v1\n      with:\n        service_account_key: ${{ secrets.GCP_SA_KEY }}\n        project_id: ${{ env.GCP_PROJECT }}\n    \n    - name: Configure Docker\n      run: gcloud auth configure-docker\n    \n    - name: Build and push image\n      id: build\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        \n        IMAGE_TAG=\"v$(date +'%Y%m%d')-${GITHUB_SHA::8}\"\n        IMAGE_NAME=\"${REGISTRY}/${GCP_PROJECT}/${SERVICE_NAME}:${IMAGE_TAG}\"\n        \n        docker build -t $IMAGE_NAME .\n        docker push $IMAGE_NAME\n        \n        echo \"image-tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n    \n    - name: Security scan\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT }}/${{ env.SERVICE_NAME }}:${{ steps.build.outputs.image-tag }}\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n\n  update-gitops:\n    needs: build-and-deploy\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout GitOps repo\n      uses: actions/checkout@v4\n      with:\n        repository: your-org/gitops-microservices\n        token: ${{ secrets.GITOPS_TOKEN }}\n        path: gitops\n    \n    - name: Update image tag\n      run: |\n        cd gitops/applications/${SERVICE_NAME}/overlays/production\n        \n        kustomize edit set image \\\n          ${REGISTRY}/${GCP_PROJECT}/${SERVICE_NAME}:${{ needs.build-and-deploy.outputs.image-tag }}\n    \n    - name: Commit and push\n      run: |\n        cd gitops\n        git config user.name \"github-actions[bot]\"\n        git config user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n        \n        git add .\n        git commit -m \"Update ${SERVICE_NAME} to ${{ needs.build-and-deploy.outputs.image-tag }}\"\n        git push\n"})}),"\n",(0,r.jsx)(n.h3,{id:"application-dockerfile",children:"Application Dockerfile"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# services/user-service/Dockerfile\nFROM node:18-alpine AS base\n\n# Install security updates\nRUN apk update && apk upgrade && apk add --no-cache dumb-init\n\n# Create app user\nRUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001\n\nFROM base AS deps\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production && npm cache clean --force\n\nFROM base AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM base AS runtime\nWORKDIR /app\nUSER nodejs\n\nCOPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules\nCOPY --from=build --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=build --chown=nodejs:nodejs /app/package*.json ./\n\nEXPOSE 3000\n\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node ./dist/health-check.js || exit 1\n\nENTRYPOINT ["dumb-init", "--"]\nCMD ["node", "dist/main.js"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-6-security-implementation",children:"Step 6: Security Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/networkpolicy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: user-service-netpol\nspec:\n  podSelector:\n    matchLabels:\n      app: user-service\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: api-gateway\n    ports:\n    - protocol: TCP\n      port: 3000\n  egress:\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 5432 # PostgreSQL\n    - protocol: TCP\n      port: 443  # HTTPS\n    - protocol: TCP\n      port: 53   # DNS\n    - protocol: UDP\n      port: 53   # DNS\n"})}),"\n",(0,r.jsx)(n.h3,{id:"secret-management-with-external-secrets",children:"Secret Management with External Secrets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/external-secrets/user-service-secrets.yaml\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: user-service-secrets\n  namespace: microservices-prod\nspec:\n  refreshInterval: 15s\n  secretStoreRef:\n    name: gcpsm-secret-store\n    kind: SecretStore\n  target:\n    name: user-service-secrets\n    creationPolicy: Owner\n  data:\n  - secretKey: database-url\n    remoteRef:\n      key: user-service-database-url\n  - secretKey: jwt-secret\n    remoteRef:\n      key: user-service-jwt-secret\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-7-monitoring-and-observability",children:"Step 7: Monitoring and Observability"}),"\n",(0,r.jsx)(n.h3,{id:"prometheus-servicemonitor",children:"Prometheus ServiceMonitor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/servicemonitor.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: user-service\nspec:\n  selector:\n    matchLabels:\n      app: user-service\n  endpoints:\n  - port: http\n    path: /metrics\n    interval: 30s\n"})}),"\n",(0,r.jsx)(n.h3,{id:"application-health-checks",children:"Application Health Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// services/user-service/src/health/health.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, HealthCheck } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('database', 'http://localhost:3000/api/database/ping'),\n    ]);\n  }\n\n  @Get('ready')\n  ready() {\n    return { status: 'ready' };\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-8-deployment-and-validation",children:"Step 8: Deployment and Validation"}),"\n",(0,r.jsx)(n.h3,{id:"bootstrap-script",children:"Bootstrap Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/bootstrap.sh\n\nset -e\n\necho "\ud83d\ude80 Bootstrapping GitOps environment..."\n\n# Apply ArgoCD installation\nkubectl apply -k infrastructure/argocd/\n\n# Wait for ArgoCD to be ready\nkubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd\n\n# Apply projects and applications\nkubectl apply -f infrastructure/argocd/projects/\nkubectl apply -f infrastructure/argocd/applications/\n\necho "\u2705 GitOps environment ready!"\necho "ArgoCD UI: kubectl port-forward svc/argocd-server -n argocd 8080:443"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"validation-commands",children:"Validation Commands"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check ArgoCD applications\nargocd app list\n\n# Sync specific application\nargocd app sync user-service-prod\n\n# Check deployment status\nkubectl get deployments -n microservices-prod\n\n# View application logs\nkubectl logs -f deployment/user-service -n microservices-prod\n\n# Check HPA status\nkubectl get hpa -n microservices-prod\n"})}),"\n",(0,r.jsx)(n.h2,{id:"benefits-achieved",children:"Benefits Achieved"}),"\n",(0,r.jsx)(n.p,{children:"After implementing this GitOps workflow, you'll have:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent Deployments"}),": Every environment uses the same deployment process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Full Audit Trail"}),": Every change is tracked in Git"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automated Security"}),": Security scanning and policies enforced"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Easy Rollbacks"}),": Git-based rollback capability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Parity"}),": Configuration drift eliminated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Developer Productivity"}),": Self-service deployments via Git"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Cluster Management"}),": Extend to multiple GKE clusters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced Deployment Strategies"}),": Implement canary and blue-green deployments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Policy as Code"}),": Add Open Policy Agent (OPA) for governance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Enhanced monitoring with distributed tracing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Disaster Recovery"}),": Automated backup and recovery procedures"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This GitOps implementation provides a solid foundation for scaling your microservices deployment pipeline while maintaining security, reliability, and developer productivity."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5102:e=>{e.exports=JSON.parse('{"permalink":"/fullstack-dev/blog/gitops-microservices-nodejs-gcp-practical-guide","editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/blog/2025-10-07-gitops-microservices-nodejs-gcp-practical-guide.md","source":"@site/blog/2025-10-07-gitops-microservices-nodejs-gcp-practical-guide.md","title":"GitOps in Practice: Deploying Node.js Microservices to GCP GKE with ArgoCD and Kustomize","description":"Implementing GitOps for microservices deployment brings consistency, reliability, and traceability to your deployment pipeline. This practical guide walks through setting up a complete GitOps workflow for Node.js microservices on Google Cloud Platform (GCP) using Google Kubernetes Engine (GKE), ArgoCD, and Kustomize.","date":"2025-10-07T00:00:00.000Z","tags":[{"inline":false,"label":"GitOps","permalink":"/fullstack-dev/blog/tags/gitops","description":"GitOps deployment practices"},{"inline":false,"label":"Microservices","permalink":"/fullstack-dev/blog/tags/microservices","description":"Microservices architecture and patterns"},{"inline":false,"label":"Node.js","permalink":"/fullstack-dev/blog/tags/nodejs","description":"Node.js runtime and development"},{"inline":false,"label":"NestJS","permalink":"/fullstack-dev/blog/tags/nestjs","description":"NestJS framework for Node.js applications"},{"inline":false,"label":"Google Cloud Platform","permalink":"/fullstack-dev/blog/tags/gcp","description":"Google Cloud Platform services"},{"inline":false,"label":"Google Kubernetes Engine","permalink":"/fullstack-dev/blog/tags/gke","description":"Google Kubernetes Engine"},{"inline":false,"label":"ArgoCD","permalink":"/fullstack-dev/blog/tags/argocd","description":"ArgoCD GitOps deployment"},{"inline":false,"label":"Kustomize","permalink":"/fullstack-dev/blog/tags/kustomize","description":"Kubernetes configuration management"},{"inline":false,"label":"Kubernetes","permalink":"/fullstack-dev/blog/tags/kubernetes","description":"Kubernetes container orchestration"},{"inline":false,"label":"Infrastructure as Code","permalink":"/fullstack-dev/blog/tags/infrastructure-as-code","description":"Infrastructure automation and versioning"},{"inline":false,"label":"DevOps","permalink":"/fullstack-dev/blog/tags/devops","description":"DevOps practices and tools"}],"readingTime":10.65,"hasTruncateMarker":true,"authors":[{"name":"Tam Nguyen","title":"Full Stack Developer, Next.js for Production Creator","url":"https://github.com/tamnk74","page":{"permalink":"/fullstack-dev/blog/authors/tam"},"socials":{"github":"https://github.com/tamnk74"},"imageURL":"https://github.com/tamnk74.png","key":"tam"}],"frontMatter":{"slug":"gitops-microservices-nodejs-gcp-practical-guide","title":"GitOps in Practice: Deploying Node.js Microservices to GCP GKE with ArgoCD and Kustomize","authors":["tam"],"tags":["gitops","microservices","nodejs","nestjs","gcp","gke","argocd","kustomize","kubernetes","infrastructure-as-code","devops"]},"unlisted":false,"prevItem":{"title":"Building Smart Location-Aware Applications: Complete Geo-targeting Implementation with Node.js and React","permalink":"/fullstack-dev/blog/geo-targeting-implementation-nodejs-react"},"nextItem":{"title":"Global Cookie Privacy Compliance: A Complete Guide to Country-Specific Regulations in 2025","permalink":"/fullstack-dev/blog/global-cookie-privacy-compliance-guide-2025"}}')},7814:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(9729);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);