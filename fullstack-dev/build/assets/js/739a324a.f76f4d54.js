"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[5241],{5741:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(9729);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},5978:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"backend/opentelemetry-implementation","title":"OpenTelemetry Implementation Guide","description":"Overview","source":"@site/docs/backend/opentelemetry-implementation.md","sourceDirName":"backend","slug":"/backend/opentelemetry-implementation","permalink":"/fullstack-dev/docs/backend/opentelemetry-implementation","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/backend/opentelemetry-implementation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kafka Implementation Guide for E-commerce Microservices","permalink":"/fullstack-dev/docs/backend/kafka-implementation"},"next":{"title":"Getting Started with Vertex AI and Gemini Models","permalink":"/fullstack-dev/docs/ai-machine-learning/vertex-ai-gemini-guide"}}');var s=t(5813),i=t(5741);const a={},o="OpenTelemetry Implementation Guide",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Benefits of OpenTelemetry for Ecommerce",id:"benefits-of-opentelemetry-for-ecommerce",level:2},{value:"Business Benefits",id:"business-benefits",level:3},{value:"Technical Benefits",id:"technical-benefits",level:3},{value:"Security &amp; Compliance Benefits",id:"security--compliance-benefits",level:3},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Observability Stack",id:"observability-stack",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Installation &amp; Dependencies",id:"installation--dependencies",level:2},{value:"Backend Dependencies (NestJS)",id:"backend-dependencies-nestjs",level:3},{value:"Frontend Dependencies (Next.js)",id:"frontend-dependencies-nextjs",level:3},{value:"Backend Implementation (NestJS)",id:"backend-implementation-nestjs",level:2},{value:"1. Base Telemetry Configuration",id:"1-base-telemetry-configuration",level:3},{value:"2. Custom Instrumentation Decorator",id:"2-custom-instrumentation-decorator",level:3},{value:"3. Business Logic Instrumentation",id:"3-business-logic-instrumentation",level:3},{value:"4. Message Queue Instrumentation",id:"4-message-queue-instrumentation",level:3},{value:"Frontend Implementation (Next.js)",id:"frontend-implementation-nextjs",level:2},{value:"1. Client-Side Telemetry Setup",id:"1-client-side-telemetry-setup",level:3},{value:"2. Next.js App Integration",id:"2-nextjs-app-integration",level:3},{value:"3. Custom Frontend Spans",id:"3-custom-frontend-spans",level:3},{value:"4. Component-Level Tracing",id:"4-component-level-tracing",level:3},{value:"Infrastructure Configuration",id:"infrastructure-configuration",level:2},{value:"1. OpenTelemetry Collector (Kubernetes)",id:"1-opentelemetry-collector-kubernetes",level:3},{value:"2. Environment Configuration",id:"2-environment-configuration",level:3},{value:"3. Docker Configuration",id:"3-docker-configuration",level:3},{value:"Monitoring &amp; Alerting",id:"monitoring--alerting",level:2},{value:"1. Datadog Dashboard Configuration",id:"1-datadog-dashboard-configuration",level:3},{value:"2. SLI/SLO Configuration",id:"2-slislo-configuration",level:3},{value:"3. Alert Configuration",id:"3-alert-configuration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Span Naming Conventions",id:"1-span-naming-conventions",level:3},{value:"2. Attribute Guidelines",id:"2-attribute-guidelines",level:3},{value:"3. Performance Optimization",id:"3-performance-optimization",level:3},{value:"4. Error Handling",id:"4-error-handling",level:3},{value:"5. Ecommerce-Specific Instrumentation",id:"5-ecommerce-specific-instrumentation",level:3},{value:"6. Context Propagation Best Practices",id:"6-context-propagation-best-practices",level:3},{value:"Advanced Best Practices",id:"advanced-best-practices",level:2},{value:"1. Custom Metrics for Ecommerce KPIs",id:"1-custom-metrics-for-ecommerce-kpis",level:3},{value:"2. Advanced Sampling Strategies",id:"2-advanced-sampling-strategies",level:3},{value:"3. Correlation IDs and Request Tracking",id:"3-correlation-ids-and-request-tracking",level:3},{value:"4. Health Check and Readiness Probes",id:"4-health-check-and-readiness-probes",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"1. PII and Sensitive Data Protection",id:"1-pii-and-sensitive-data-protection",level:3},{value:"2. Access Control and Audit Trails",id:"2-access-control-and-audit-trails",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"1. Intelligent Span Creation",id:"1-intelligent-span-creation",level:3},{value:"2. Resource-Aware Sampling",id:"2-resource-aware-sampling",level:3},{value:"3. Batch Processing Optimization",id:"3-batch-processing-optimization",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Configuration",id:"debug-configuration",level:3},{value:"Validation Tools",id:"validation-tools",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"opentelemetry-implementation-guide",children:"OpenTelemetry Implementation Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This guide provides comprehensive instructions for implementing OpenTelemetry in your ecommerce microservices architecture using NestJS, Next.js, and Google Cloud Platform."}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-opentelemetry-for-ecommerce",children:"Benefits of OpenTelemetry for Ecommerce"}),"\n",(0,s.jsx)(n.h3,{id:"business-benefits",children:"Business Benefits"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Improved Customer Experience"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Faster issue detection and resolution reduces customer-facing downtime"}),"\n",(0,s.jsx)(n.li,{children:"Performance insights help optimize checkout flows and reduce cart abandonment"}),"\n",(0,s.jsx)(n.li,{children:"Real-time monitoring of critical user journeys (search, add to cart, payment)"}),"\n",(0,s.jsx)(n.li,{children:"Proactive identification of performance bottlenecks before they impact customers"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Revenue Protection"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rapid detection of payment processing issues prevents revenue loss"}),"\n",(0,s.jsx)(n.li,{children:"Monitoring of recommendation engines ensures optimal product discovery"}),"\n",(0,s.jsx)(n.li,{children:"Inventory synchronization tracking prevents overselling scenarios"}),"\n",(0,s.jsx)(n.li,{children:"Performance optimization leads to higher conversion rates"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Operational Efficiency"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reduced mean time to resolution (MTTR) from hours to minutes"}),"\n",(0,s.jsx)(n.li,{children:"Automated root cause analysis across distributed services"}),"\n",(0,s.jsx)(n.li,{children:"Simplified debugging of complex microservices interactions"}),"\n",(0,s.jsx)(n.li,{children:"Unified observability reduces tool sprawl and training overhead"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"technical-benefits",children:"Technical Benefits"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Distributed Tracing"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"End-to-end request visibility across all microservices"}),"\n",(0,s.jsx)(n.li,{children:"Automatic correlation of logs, metrics, and traces"}),"\n",(0,s.jsx)(n.li,{children:"Performance bottleneck identification in complex service meshes"}),"\n",(0,s.jsx)(n.li,{children:"Context propagation maintains request flow visibility"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Vendor Neutrality"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Standardized telemetry data format prevents vendor lock-in"}),"\n",(0,s.jsx)(n.li,{children:"Easy migration between observability platforms (Datadog, New Relic, Grafana)"}),"\n",(0,s.jsx)(n.li,{children:"Future-proof instrumentation as the industry standard"}),"\n",(0,s.jsx)(n.li,{children:"Reduced integration complexity with multiple monitoring tools"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Auto-Instrumentation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Zero-code instrumentation for popular frameworks and libraries"}),"\n",(0,s.jsx)(n.li,{children:"Automatic HTTP, database, and message queue tracing"}),"\n",(0,s.jsx)(n.li,{children:"Reduced development overhead and maintenance burden"}),"\n",(0,s.jsx)(n.li,{children:"Consistent telemetry data across all services"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Custom Business Metrics"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Track ecommerce-specific KPIs (conversion rates, cart abandonment, search performance)"}),"\n",(0,s.jsx)(n.li,{children:"Real-time business intelligence through operational data"}),"\n",(0,s.jsx)(n.li,{children:"Service Level Indicator (SLI) and Service Level Objective (SLO) monitoring"}),"\n",(0,s.jsx)(n.li,{children:"Custom dashboards for business stakeholders"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security--compliance-benefits",children:"Security & Compliance Benefits"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Privacy"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Built-in PII sanitization and data masking capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Configurable data retention policies"}),"\n",(0,s.jsx)(n.li,{children:"Audit trails for compliance requirements (GDPR, PCI-DSS)"}),"\n",(0,s.jsx)(n.li,{children:"Secure data transmission and storage"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security Monitoring"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Anomaly detection in user behavior patterns"}),"\n",(0,s.jsx)(n.li,{children:"Monitoring of authentication and authorization flows"}),"\n",(0,s.jsx)(n.li,{children:"Detection of suspicious API usage patterns"}),"\n",(0,s.jsx)(n.li,{children:"Integration with security information and event management (SIEM) systems"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#benefits-of-opentelemetry-for-ecommerce",children:"Benefits of OpenTelemetry for Ecommerce"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#architecture-overview",children:"Architecture Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#installation--dependencies",children:"Installation & Dependencies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#backend-implementation-nestjs",children:"Backend Implementation (NestJS)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#frontend-implementation-nextjs",children:"Frontend Implementation (Next.js)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#infrastructure-configuration",children:"Infrastructure Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#monitoring--alerting",children:"Monitoring & Alerting"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#advanced-best-practices",children:"Advanced Best Practices"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#security-considerations",children:"Security Considerations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.h3,{id:"observability-stack",children:"Observability Stack"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend      \u2502    \u2502   API Gateway   \u2502    \u2502  Microservices  \u2502\n\u2502   (Next.js)     \u2502\u2500\u2500\u2500\u25b6\u2502   (NestJS)      \u2502\u2500\u2500\u2500\u25b6\u2502   (NestJS)      \u2502\n\u2502                 \u2502    \u2502                 \u2502    \u2502                 \u2502\n\u2502 \u2022 Browser Spans \u2502    \u2502 \u2022 HTTP Traces   \u2502    \u2502 \u2022 Business Logic\u2502\n\u2502 \u2022 User Actions  \u2502    \u2502 \u2022 Auth Spans    \u2502    \u2502 \u2022 DB Operations \u2502\n\u2502 \u2022 Performance   \u2502    \u2502 \u2022 Rate Limiting \u2502    \u2502 \u2022 Queue Messages\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502\n         \u2502                       \u2502                       \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                                 \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502    OpenTelemetry        \u2502\n                    \u2502    Collector            \u2502\n                    \u2502                         \u2502\n                    \u2502 \u2022 Trace Processing      \u2502\n                    \u2502 \u2022 Metric Aggregation   \u2502\n                    \u2502 \u2022 Log Correlation      \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                                 \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502      Datadog           \u2502\n                    \u2502                         \u2502\n                    \u2502 \u2022 APM Dashboard        \u2502\n                    \u2502 \u2022 Custom Metrics       \u2502\n                    \u2502 \u2022 Alerting Rules       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Traces"}),": Request flow across microservices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics"}),": Performance and business metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logs"}),": Structured logging with correlation IDs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Context Propagation"}),": Maintaining trace context across service boundaries"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation--dependencies",children:"Installation & Dependencies"}),"\n",(0,s.jsx)(n.h3,{id:"backend-dependencies-nestjs",children:"Backend Dependencies (NestJS)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Core OpenTelemetry packages\nnpm install @opentelemetry/api\nnpm install @opentelemetry/sdk-node\nnpm install @opentelemetry/resources\nnpm install @opentelemetry/semantic-conventions\n\n# Auto-instrumentations\nnpm install @opentelemetry/auto-instrumentations-node\n\n# Specific instrumentations for your stack\nnpm install @opentelemetry/instrumentation-http\nnpm install @opentelemetry/instrumentation-express\nnpm install @opentelemetry/instrumentation-typeorm\nnpm install @opentelemetry/instrumentation-redis\nnpm install @opentelemetry/instrumentation-kafkajs\n\n# Exporters\nnpm install @opentelemetry/exporter-datadog\nnpm install @opentelemetry/exporter-otlp-http\nnpm install @opentelemetry/exporter-prometheus\n\n# Development dependencies\nnpm install --save-dev @types/node\n"})}),"\n",(0,s.jsx)(n.h3,{id:"frontend-dependencies-nextjs",children:"Frontend Dependencies (Next.js)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Web instrumentations\nnpm install @opentelemetry/api\nnpm install @opentelemetry/sdk-web\nnpm install @opentelemetry/resources\nnpm install @opentelemetry/instrumentation-fetch\nnpm install @opentelemetry/instrumentation-xml-http-request\nnpm install @opentelemetry/instrumentation-user-interaction\n\n# Next.js specific\nnpm install @vercel/otel\n"})}),"\n",(0,s.jsx)(n.h2,{id:"backend-implementation-nestjs",children:"Backend Implementation (NestJS)"}),"\n",(0,s.jsx)(n.h3,{id:"1-base-telemetry-configuration",children:"1. Base Telemetry Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/telemetry/telemetry.service.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DatadogExporter } from '@opentelemetry/exporter-datadog';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-otlp-http';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\n\n@Injectable()\nexport class TelemetryService implements OnModuleInit {\n  private sdk: NodeSDK;\n\n  constructor() {\n    this.initializeSDK();\n  }\n\n  private initializeSDK() {\n    const serviceName = process.env.SERVICE_NAME || 'ecommerce-api';\n    const serviceVersion = process.env.SERVICE_VERSION || '1.0.0';\n    const environment = process.env.NODE_ENV || 'development';\n\n    // Configure resource attributes\n    const resource = new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n      [SemanticResourceAttributes.SERVICE_VERSION]: serviceVersion,\n      [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: environment,\n      [SemanticResourceAttributes.SERVICE_NAMESPACE]: 'ecommerce',\n    });\n\n    // Configure exporters\n    const traceExporter = new DatadogExporter({\n      url: process.env.DATADOG_TRACE_URL || 'https://trace.agent.datadoghq.com',\n      headers: {\n        'DD-API-KEY': process.env.DATADOG_API_KEY,\n      },\n    });\n\n    // Initialize SDK\n    this.sdk = new NodeSDK({\n      resource,\n      traceExporter,\n      instrumentations: [\n        getNodeAutoInstrumentations({\n          // Disable file system instrumentation for performance\n          '@opentelemetry/instrumentation-fs': { enabled: false },\n\n          // Configure HTTP instrumentation\n          '@opentelemetry/instrumentation-http': {\n            requestHook: (span, request) => {\n              span.setAttributes({\n                'http.request.header.user-agent': request.headers['user-agent'],\n                'http.request.header.x-forwarded-for': request.headers['x-forwarded-for'],\n              });\n            },\n          },\n\n          // Configure Express instrumentation\n          '@opentelemetry/instrumentation-express': {\n            requestHook: (span, info) => {\n              span.setAttributes({\n                'express.route': info.route,\n                'express.method': info.req.method,\n              });\n            },\n          },\n\n          // Configure TypeORM instrumentation\n          '@opentelemetry/instrumentation-typeorm': {\n            enabled: true,\n            logQueries: true,\n          },\n\n          // Configure Redis instrumentation\n          '@opentelemetry/instrumentation-redis': {\n            enabled: true,\n            dbStatementSerializer: (cmdName, cmdArgs) => {\n              return `${cmdName} ${cmdArgs.slice(0, 2).join(' ')}`;\n            },\n          },\n        }),\n      ],\n    });\n  }\n\n  onModuleInit() {\n    this.sdk.start();\n    console.log('OpenTelemetry started successfully');\n  }\n\n  async shutdown() {\n    await this.sdk.shutdown();\n    console.log('OpenTelemetry terminated');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-custom-instrumentation-decorator",children:"2. Custom Instrumentation Decorator"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/telemetry/trace.decorator.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { trace, context, SpanStatusCode } from '@opentelemetry/api';\n\nexport function Trace(operationName?: string) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const tracer = trace.getTracer('ecommerce-service');\n\n    descriptor.value = async function (...args: any[]) {\n      const spanName = operationName || `${target.constructor.name}.${propertyKey}`;\n\n      return tracer.startActiveSpan(spanName, async (span) => {\n        try {\n          // Add method metadata\n          span.setAttributes({\n            'code.function': propertyKey,\n            'code.namespace': target.constructor.name,\n            'operation.type': 'business_logic',\n          });\n\n          // Execute original method\n          const result = await originalMethod.apply(this, args);\n\n          // Mark span as successful\n          span.setStatus({ code: SpanStatusCode.OK });\n\n          return result;\n        } catch (error) {\n          // Record error\n          span.recordException(error);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message,\n          });\n\n          throw error;\n        } finally {\n          span.end();\n        }\n      });\n    };\n\n    return descriptor;\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-business-logic-instrumentation",children:"3. Business Logic Instrumentation"}),"\n",(0,s.jsx)(n.p,{children:"Example service with tracing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { trace, metrics } from '@opentelemetry/api';\nimport { Trace } from '../telemetry/trace.decorator';\nimport { Product } from './entities/product.entity';\n\n@Injectable()\nexport class ProductService {\n  private readonly tracer = trace.getTracer('product-service');\n  private readonly meter = metrics.getMeter('product-service');\n  private readonly productSearchCounter = this.meter.createCounter('product_searches_total');\n  private readonly productSearchDuration = this.meter.createHistogram('product_search_duration_ms');\n\n  constructor(\n    @InjectRepository(Product)\n    private productRepository: Repository<Product>,\n  ) {}\n\n  @Trace('search-products')\n  async searchProducts(query: string, filters: any): Promise<Product[]> {\n    const startTime = Date.now();\n\n    try {\n      // Add custom attributes to current span\n      const span = trace.getActiveSpan();\n      span?.setAttributes({\n        'search.query': query,\n        'search.filters': JSON.stringify(filters),\n        'operation.type': 'database_query',\n      });\n\n      // Perform search\n      const products = await this.productRepository\n        .createQueryBuilder('product')\n        .where('product.name ILIKE :query', { query: `%${query}%` })\n        .andWhere(filters)\n        .getMany();\n\n      // Record metrics\n      this.productSearchCounter.add(1, {\n        'search.type': 'text',\n        'results.count': products.length.toString(),\n      });\n\n      // Add result metadata to span\n      span?.setAttributes({\n        'search.results.count': products.length,\n        'search.results.found': products.length > 0,\n      });\n\n      return products;\n    } finally {\n      const duration = Date.now() - startTime;\n      this.productSearchDuration.record(duration, {\n        'search.type': 'text',\n      });\n    }\n  }\n\n  @Trace('get-product-recommendations')\n  async getRecommendations(userId: string, productId: string): Promise<Product[]> {\n    return this.tracer.startActiveSpan('recommendation-algorithm', async (span) => {\n      span.setAttributes({\n        'user.id': userId,\n        'product.id': productId,\n        'algorithm.type': 'collaborative_filtering',\n      });\n\n      // Your recommendation logic here\n      const recommendations = await this.calculateRecommendations(userId, productId);\n\n      span.setAttributes({\n        'recommendations.count': recommendations.length,\n      });\n\n      return recommendations;\n    });\n  }\n\n  private async calculateRecommendations(userId: string, productId: string): Promise<Product[]> {\n    // Implementation details...\n    return [];\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-message-queue-instrumentation",children:"4. Message Queue Instrumentation"}),"\n",(0,s.jsx)(n.p,{children:"For Kafka/RabbitMQ integration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { trace, context, SpanKind } from '@opentelemetry/api';\nimport { KafkaService } from './kafka.service';\n\n@Injectable()\nexport class OrderEventService {\n  private readonly tracer = trace.getTracer('order-events');\n\n  constructor(private kafkaService: KafkaService) {}\n\n  async publishOrderCreated(order: any) {\n    return this.tracer.startActiveSpan(\n      'order.created.publish',\n      {\n        kind: SpanKind.PRODUCER,\n        attributes: {\n          'messaging.system': 'kafka',\n          'messaging.destination': 'order-events',\n          'messaging.operation': 'publish',\n          'order.id': order.id,\n          'order.total': order.total,\n        },\n      },\n      async (span) => {\n        try {\n          // Inject trace context into message headers\n          const headers = {};\n          trace.setSpanContext(context.active(), span.spanContext());\n\n          await this.kafkaService.publish('order-events', {\n            ...order,\n            traceContext: headers,\n          });\n\n          span.setStatus({ code: SpanStatusCode.OK });\n        } catch (error) {\n          span.recordException(error);\n          span.setStatus({ code: SpanStatusCode.ERROR, message: error.message });\n          throw error;\n        } finally {\n          span.end();\n        }\n      },\n    );\n  }\n\n  async handleOrderEvent(message: any) {\n    // Extract trace context from message headers\n    const parentContext = trace.setSpanContext(context.active(), message.traceContext);\n\n    return this.tracer.startActiveSpan(\n      'order.event.process',\n      {\n        kind: SpanKind.CONSUMER,\n        attributes: {\n          'messaging.system': 'kafka',\n          'messaging.source': 'order-events',\n          'messaging.operation': 'receive',\n          'order.id': message.orderId,\n        },\n      },\n      parentContext,\n      async (span) => {\n        // Process the order event\n        // Implementation details...\n      },\n    );\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"frontend-implementation-nextjs",children:"Frontend Implementation (Next.js)"}),"\n",(0,s.jsx)(n.h3,{id:"1-client-side-telemetry-setup",children:"1. Client-Side Telemetry Setup"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"lib/telemetry.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { WebSDK } from '@opentelemetry/sdk-web';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-otlp-http';\n\nexport function initializeTelemetry() {\n  // Only initialize in browser\n  if (typeof window === 'undefined') return;\n\n  const sdk = new WebSDK({\n    resource: new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: 'ecommerce-frontend',\n      [SemanticResourceAttributes.SERVICE_VERSION]: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV,\n    }),\n\n    traceExporter: new OTLPTraceExporter({\n      url: process.env.NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT,\n    }),\n\n    instrumentations: [\n      getWebAutoInstrumentations({\n        // Configure fetch instrumentation\n        '@opentelemetry/instrumentation-fetch': {\n          propagateTraceHeaderCorsUrls: [/^https:\\/\\/api\\.yourdomain\\.com\\/.*/],\n          clearTimingResources: true,\n        },\n\n        // Configure user interaction instrumentation\n        '@opentelemetry/instrumentation-user-interaction': {\n          enabled: true,\n          eventNames: ['click', 'submit', 'keydown'],\n        },\n\n        // Configure XMLHttpRequest instrumentation\n        '@opentelemetry/instrumentation-xml-http-request': {\n          propagateTraceHeaderCorsUrls: [/^https:\\/\\/api\\.yourdomain\\.com\\/.*/],\n        },\n      }),\n    ],\n  });\n\n  sdk.start();\n  console.log('OpenTelemetry Web SDK started');\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-nextjs-app-integration",children:"2. Next.js App Integration"}),"\n",(0,s.jsxs)(n.p,{children:["Update ",(0,s.jsx)(n.code,{children:"app/layout.tsx"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'use client';\n\nimport { useEffect } from 'react';\nimport { initializeTelemetry } from '../lib/telemetry';\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  useEffect(() => {\n    initializeTelemetry();\n  }, []);\n\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-custom-frontend-spans",children:"3. Custom Frontend Spans"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"hooks/useTracing.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { trace, context } from '@opentelemetry/api';\nimport { useCallback } from 'react';\n\nexport function useTracing() {\n  const tracer = trace.getTracer('ecommerce-frontend-user-actions');\n\n  const traceUserAction = useCallback(\n    async (actionName: string, actionData: any, callback: () => Promise<any>) => {\n      return tracer.startActiveSpan(\n        `user.${actionName}`,\n        {\n          attributes: {\n            'user.action': actionName,\n            'user.action.data': JSON.stringify(actionData),\n            'page.url': window.location.href,\n            'page.title': document.title,\n          },\n        },\n        async (span) => {\n          try {\n            const result = await callback();\n            span.setStatus({ code: SpanStatusCode.OK });\n            return result;\n          } catch (error) {\n            span.recordException(error);\n            span.setStatus({ code: SpanStatusCode.ERROR, message: error.message });\n            throw error;\n          } finally {\n            span.end();\n          }\n        },\n      );\n    },\n    [tracer],\n  );\n\n  return { traceUserAction };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-component-level-tracing",children:"4. Component-Level Tracing"}),"\n",(0,s.jsx)(n.p,{children:"Example usage in components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"'use client';\n\nimport { useState } from 'react';\nimport { useTracing } from '../hooks/useTracing';\n\nexport default function ProductSearch() {\n  const [query, setQuery] = useState('');\n  const [products, setProducts] = useState([]);\n  const { traceUserAction } = useTracing();\n\n  const handleSearch = async () => {\n    await traceUserAction('product_search', { query, timestamp: Date.now() }, async () => {\n      const response = await fetch(`/api/products/search?q=${query}`);\n      const data = await response.json();\n      setProducts(data);\n      return data;\n    });\n  };\n\n  const handleAddToCart = async (productId: string) => {\n    await traceUserAction('add_to_cart', { productId, timestamp: Date.now() }, async () => {\n      const response = await fetch('/api/cart/add', {\n        method: 'POST',\n        body: JSON.stringify({ productId }),\n      });\n      return response.json();\n    });\n  };\n\n  return (\n    <div>\n      <input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Search products...\" />\n      <button onClick={handleSearch}>Search</button>\n\n      {products.map((product) => (\n        <div key={product.id}>\n          <h3>{product.name}</h3>\n          <button onClick={() => handleAddToCart(product.id)}>Add to Cart</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"infrastructure-configuration",children:"Infrastructure Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"1-opentelemetry-collector-kubernetes",children:"1. OpenTelemetry Collector (Kubernetes)"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/otel-collector.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: otel-collector-config\n  namespace: ecommerce\ndata:\n  config.yaml: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n      \n      prometheus:\n        config:\n          scrape_configs:\n            - job_name: \'kubernetes-pods\'\n              kubernetes_sd_configs:\n                - role: pod\n\n    processors:\n      batch:\n        timeout: 1s\n        send_batch_size: 1024\n        send_batch_max_size: 2048\n      \n      memory_limiter:\n        limit_mib: 512\n      \n      resource:\n        attributes:\n          - key: cluster.name\n            value: "ecommerce-gke"\n            action: upsert\n          - key: k8s.cluster.name\n            value: "ecommerce-gke"\n            action: upsert\n\n    exporters:\n      datadog:\n        api:\n          key: "${DATADOG_API_KEY}"\n          site: "datadoghq.com"\n        \n      otlphttp/datadog:\n        endpoint: "https://otlp.datadoghq.com"\n        headers:\n          "DD-API-KEY": "${DATADOG_API_KEY}"\n\n      prometheus:\n        endpoint: "0.0.0.0:8889"\n\n    service:\n      telemetry:\n        logs:\n          level: "info"\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [memory_limiter, batch, resource]\n          exporters: [datadog]\n        \n        metrics:\n          receivers: [otlp, prometheus]\n          processors: [memory_limiter, batch, resource]\n          exporters: [datadog, prometheus]\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: otel-collector\n  namespace: ecommerce\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: otel-collector\n  template:\n    metadata:\n      labels:\n        app: otel-collector\n    spec:\n      containers:\n        - name: otel-collector\n          image: otel/opentelemetry-collector-contrib:latest\n          command:\n            - \'/otelcol-contrib\'\n            - \'--config=/etc/otel-collector-config.yaml\'\n          volumeMounts:\n            - name: config-volume\n              mountPath: /etc/otel-collector-config.yaml\n              subPath: config.yaml\n          env:\n            - name: DATADOG_API_KEY\n              valueFrom:\n                secretKeyRef:\n                  name: datadog-secret\n                  key: api-key\n          ports:\n            - containerPort: 4317\n              name: otlp-grpc\n            - containerPort: 4318\n              name: otlp-http\n            - containerPort: 8889\n              name: prometheus\n          resources:\n            limits:\n              memory: \'1Gi\'\n              cpu: \'500m\'\n            requests:\n              memory: \'512Mi\'\n              cpu: \'250m\'\n      volumes:\n        - name: config-volume\n          configMap:\n            name: otel-collector-config\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: otel-collector\n  namespace: ecommerce\nspec:\n  selector:\n    app: otel-collector\n  ports:\n    - name: otlp-grpc\n      port: 4317\n      targetPort: 4317\n    - name: otlp-http\n      port: 4318\n      targetPort: 4318\n    - name: prometheus\n      port: 8889\n      targetPort: 8889\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-environment-configuration",children:"2. Environment Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create environment-specific configurations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# config/production.env\nNODE_ENV=production\nSERVICE_NAME=ecommerce-api\nSERVICE_VERSION=1.2.3\nOTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318\nDATADOG_API_KEY=your-datadog-api-key\nOTEL_RESOURCE_ATTRIBUTES=service.namespace=ecommerce,deployment.environment=production\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# config/staging.env\nNODE_ENV=staging\nSERVICE_NAME=ecommerce-api\nSERVICE_VERSION=1.2.3-staging\nOTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318\nDATADOG_API_KEY=your-staging-datadog-api-key\nOTEL_RESOURCE_ATTRIBUTES=service.namespace=ecommerce,deployment.environment=staging\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-docker-configuration",children:"3. Docker Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Update your ",(0,s.jsx)(n.code,{children:"Dockerfile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy application code\nCOPY . .\n\n# Install OpenTelemetry auto-instrumentation\nRUN npm install @opentelemetry/auto-instrumentations-node\n\n# Build application\nRUN npm run build\n\n# Set OpenTelemetry environment variables\nENV NODE_OPTIONS="--require @opentelemetry/auto-instrumentations-node/register"\nENV OTEL_SERVICE_NAME=ecommerce-api\nENV OTEL_RESOURCE_ATTRIBUTES="service.name=ecommerce-api,service.version=1.0.0"\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring--alerting",children:"Monitoring & Alerting"}),"\n",(0,s.jsx)(n.h3,{id:"1-datadog-dashboard-configuration",children:"1. Datadog Dashboard Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create custom dashboards for your ecommerce metrics:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "title": "Ecommerce Application Performance",\n  "widgets": [\n    {\n      "definition": {\n        "type": "timeseries",\n        "requests": [\n          {\n            "q": "avg:trace.http.request.duration{service:ecommerce-api} by {resource_name}",\n            "display_type": "line"\n          }\n        ],\n        "title": "API Response Times"\n      }\n    },\n    {\n      "definition": {\n        "type": "query_value",\n        "requests": [\n          {\n            "q": "sum:product_searches_total{*}.as_rate()",\n            "aggregator": "sum"\n          }\n        ],\n        "title": "Product Searches per Second"\n      }\n    },\n    {\n      "definition": {\n        "type": "heatmap",\n        "requests": [\n          {\n            "q": "avg:product_search_duration_ms{*} by {search.type}"\n          }\n        ],\n        "title": "Search Performance Heatmap"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-slislo-configuration",children:"2. SLI/SLO Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Define Service Level Indicators and Objectives:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# SLI/SLO Configuration\nslis:\n  - name: 'api_availability'\n    description: 'API endpoint availability'\n    query: 'sum:trace.http.request.hits{service:ecommerce-api,http.status_code:2*}.as_rate() / sum:trace.http.request.hits{service:ecommerce-api}.as_rate()'\n\n  - name: 'api_latency'\n    description: '95th percentile API response time'\n    query: 'p95:trace.http.request.duration{service:ecommerce-api}'\n\n  - name: 'search_performance'\n    description: 'Product search response time'\n    query: 'p95:product_search_duration_ms{*}'\n\nslos:\n  - name: 'api_availability_slo'\n    sli: 'api_availability'\n    target: 99.9\n    time_window: '30d'\n\n  - name: 'api_latency_slo'\n    sli: 'api_latency'\n    target: 500 # milliseconds\n    time_window: '30d'\n\n  - name: 'search_performance_slo'\n    sli: 'search_performance'\n    target: 200 # milliseconds\n    time_window: '7d'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-alert-configuration",children:"3. Alert Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Alert Rules\nalerts:\n  - name: 'High Error Rate'\n    condition: 'avg(last_5m):sum:trace.http.request.hits{service:ecommerce-api,http.status_code:5*}.as_rate() > 0.05'\n    message: |\n      High error rate detected in ecommerce API\n      @slack-#alerts @pagerduty-ecommerce-oncall\n\n  - name: 'High Response Time'\n    condition: 'avg(last_10m):p95:trace.http.request.duration{service:ecommerce-api} > 1000'\n    message: |\n      API response time is above 1 second\n      @slack-#performance\n\n  - name: 'Database Connection Issues'\n    condition: 'avg(last_5m):sum:trace.typeorm.connection.errors{*}.as_rate() > 0.1'\n    message: |\n      Database connection errors detected\n      @slack-#database @pagerduty-database-oncall\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-span-naming-conventions",children:"1. Span Naming Conventions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good span names\n'GET /api/products/search'; // HTTP operations\n'products.search'; // Business operations\n'db.products.find'; // Database operations\n'cache.redis.get'; // Cache operations\n'queue.order-events.publish'; // Message queue operations\n\n// Bad span names\n'function1'; // Too generic\n'search'; // Missing context\n'GET /api/products/search?q=shoes'; // Contains PII\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-attribute-guidelines",children:"2. Attribute Guidelines"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Standard attributes\nspan.setAttributes({\n  // HTTP attributes\n  'http.method': 'GET',\n  'http.status_code': 200,\n  'http.url': '/api/products/search',\n\n  // Database attributes\n  'db.system': 'postgresql',\n  'db.statement': 'SELECT * FROM products WHERE name ILIKE ?',\n  'db.operation': 'SELECT',\n\n  // Business attributes\n  'user.id': 'user123', // Hash if sensitive\n  'order.id': 'order456',\n  'product.category': 'electronics',\n  'search.query': 'laptop', // Avoid PII\n  'search.results.count': 25,\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-performance-optimization",children:"3. Performance Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Sampling configuration\nconst samplingRatio = process.env.NODE_ENV === 'production' ? 0.1 : 1.0;\n\n// Batch processing\nconst batchProcessor = new BatchSpanProcessor(exporter, {\n  maxQueueSize: 2048,\n  maxExportBatchSize: 512,\n  scheduledDelayMillis: 1000,\n});\n\n// Memory management\nconst memoryLimiter = new MemoryLimiter({\n  limitMiB: 256,\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-error-handling",children:"4. Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  // Business logic\n  const result = await processOrder(orderData);\n  span.setStatus({ code: SpanStatusCode.OK });\n  return result;\n} catch (error) {\n  // Record structured error information\n  span.recordException(error);\n  span.setAttributes({\n    'error.type': error.constructor.name,\n    'error.message': error.message,\n    'error.stack': error.stack,\n    'error.handled': true,\n  });\n  span.setStatus({\n    code: SpanStatusCode.ERROR,\n    message: error.message,\n  });\n  throw error;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-ecommerce-specific-instrumentation",children:"5. Ecommerce-Specific Instrumentation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Track business-critical operations\n@Trace('checkout-process')\nasync processCheckout(cartId: string, paymentInfo: any) {\n  const span = trace.getActiveSpan();\n\n  span?.setAttributes({\n    'checkout.cart_id': cartId,\n    'checkout.payment_method': paymentInfo.method,\n    'checkout.currency': paymentInfo.currency,\n    'checkout.amount': paymentInfo.amount,\n  });\n\n  // Your checkout logic here\n}\n\n// Monitor inventory operations\n@Trace('inventory-check')\nasync checkInventory(productId: string, quantity: number) {\n  const span = trace.getActiveSpan();\n\n  const availableStock = await this.getProductStock(productId);\n\n  span?.setAttributes({\n    'inventory.product_id': productId,\n    'inventory.requested_quantity': quantity,\n    'inventory.available_stock': availableStock,\n    'inventory.sufficient': availableStock >= quantity,\n  });\n\n  return availableStock >= quantity;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"6-context-propagation-best-practices",children:"6. Context Propagation Best Practices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Proper context propagation in async operations\nasync function processOrderWithContext(orderId: string) {\n  return trace.getActiveSpan()?.tracer.startActiveSpan('order.processing', async (span) => {\n    // All operations within this span maintain context\n    await validateOrder(orderId);\n    await processPayment(orderId);\n    await updateInventory(orderId);\n    await sendConfirmationEmail(orderId);\n  });\n}\n\n// Context injection for background jobs\nasync function scheduleBackgroundJob(jobData: any) {\n  const currentContext = context.active();\n\n  await jobQueue.add('process-order', {\n    ...jobData,\n    traceContext: getCurrentTraceHeaders(currentContext),\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-best-practices",children:"Advanced Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-custom-metrics-for-ecommerce-kpis",children:"1. Custom Metrics for Ecommerce KPIs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { metrics } from '@opentelemetry/api';\n\nexport class EcommerceMetrics {\n  private readonly meter = metrics.getMeter('ecommerce-business-metrics');\n\n  // Revenue tracking\n  private readonly revenueCounter = this.meter.createCounter('revenue_total', {\n    description: 'Total revenue generated',\n    unit: 'currency',\n  });\n\n  // Conversion funnel metrics\n  private readonly funnelCounter = this.meter.createCounter('conversion_funnel_events', {\n    description: 'Events in the conversion funnel',\n  });\n\n  // Cart metrics\n  private readonly cartValueHistogram = this.meter.createHistogram('cart_value_distribution', {\n    description: 'Distribution of cart values',\n    unit: 'currency',\n  });\n\n  // Search performance\n  private readonly searchLatency = this.meter.createHistogram('search_latency_ms', {\n    description: 'Search operation latency',\n    unit: 'ms',\n  });\n\n  recordRevenue(amount: number, currency: string, category: string) {\n    this.revenueCounter.add(amount, {\n      currency,\n      category,\n      timestamp: Date.now().toString(),\n    });\n  }\n\n  recordFunnelEvent(event: string, userId: string, sessionId: string) {\n    this.funnelCounter.add(1, {\n      event,\n      user_id: userId,\n      session_id: sessionId,\n    });\n  }\n\n  recordCartValue(value: number, itemCount: number) {\n    this.cartValueHistogram.record(value, {\n      item_count: itemCount.toString(),\n    });\n  }\n\n  recordSearchLatency(latencyMs: number, resultCount: number, searchType: string) {\n    this.searchLatency.record(latencyMs, {\n      result_count: resultCount.toString(),\n      search_type: searchType,\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-advanced-sampling-strategies",children:"2. Advanced Sampling Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { TraceIdRatioBasedSampler, ParentBasedSampler } from '@opentelemetry/sdk-trace-base';\n\n// Custom sampling based on operation importance\nclass EcommerceSampler implements Sampler {\n  private highPrioritySampler = new TraceIdRatioBasedSampler(1.0); // 100% sampling\n  private normalSampler = new TraceIdRatioBasedSampler(0.1); // 10% sampling\n  private lowPrioritySampler = new TraceIdRatioBasedSampler(0.01); // 1% sampling\n\n  shouldSample(context: Context, traceId: string, spanName: string, spanKind: SpanKind): SamplingResult {\n    // Always sample critical ecommerce operations\n    if (spanName.includes('checkout') || spanName.includes('payment') || spanName.includes('order.create')) {\n      return this.highPrioritySampler.shouldSample(context, traceId, spanName, spanKind);\n    }\n\n    // Medium sampling for user interactions\n    if (spanName.includes('user.') || spanName.includes('search') || spanName.includes('cart')) {\n      return this.normalSampler.shouldSample(context, traceId, spanName, spanKind);\n    }\n\n    // Low sampling for background operations\n    return this.lowPrioritySampler.shouldSample(context, traceId, spanName, spanKind);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-correlation-ids-and-request-tracking",children:"3. Correlation IDs and Request Tracking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { randomUUID } from 'crypto';\nimport { AsyncLocalStorage } from 'async_hooks';\n\n// Request context management\nexport class RequestContext {\n  private static storage = new AsyncLocalStorage<Map<string, any>>();\n\n  static run<T>(fn: () => T): T {\n    return this.storage.run(new Map(), fn);\n  }\n\n  static set(key: string, value: any): void {\n    const store = this.storage.getStore();\n    if (store) {\n      store.set(key, value);\n    }\n  }\n\n  static get(key: string): any {\n    const store = this.storage.getStore();\n    return store?.get(key);\n  }\n}\n\n// Middleware for request correlation\n@Injectable()\nexport class CorrelationMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const correlationId = req.headers['x-correlation-id'] || randomUUID();\n\n    RequestContext.run(() => {\n      RequestContext.set('correlationId', correlationId);\n      RequestContext.set('userId', req.user?.id);\n      RequestContext.set('sessionId', req.sessionID);\n\n      // Add correlation ID to response headers\n      res.setHeader('x-correlation-id', correlationId);\n\n      // Add to current span\n      const span = trace.getActiveSpan();\n      span?.setAttributes({\n        'correlation.id': correlationId,\n        'user.id': req.user?.id,\n        'session.id': req.sessionID,\n      });\n\n      next();\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-health-check-and-readiness-probes",children:"4. Health Check and Readiness Probes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Controller('health')\nexport class HealthController {\n  private readonly healthCheckSpan = trace.getTracer('health-checks');\n\n  @Get('live')\n  async liveness() {\n    return this.healthCheckSpan.startActiveSpan('health.liveness', async (span) => {\n      try {\n        span.setAttributes({\n          'health.check.type': 'liveness',\n          'service.version': process.env.SERVICE_VERSION,\n        });\n\n        // Basic health check\n        const isHealthy = await this.performBasicHealthCheck();\n\n        span.setAttributes({\n          'health.status': isHealthy ? 'healthy' : 'unhealthy',\n        });\n\n        if (!isHealthy) {\n          span.setStatus({ code: SpanStatusCode.ERROR, message: 'Service unhealthy' });\n          throw new ServiceUnavailableException('Service is not healthy');\n        }\n\n        return { status: 'healthy', timestamp: new Date().toISOString() };\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  @Get('ready')\n  async readiness() {\n    return this.healthCheckSpan.startActiveSpan('health.readiness', async (span) => {\n      try {\n        span.setAttributes({\n          'health.check.type': 'readiness',\n        });\n\n        // Check dependencies\n        const checks = await Promise.allSettled([\n          this.checkDatabase(),\n          this.checkRedis(),\n          this.checkKafka(),\n          this.checkExternalServices(),\n        ]);\n\n        const results = checks.map((check, index) => ({\n          service: ['database', 'redis', 'kafka', 'external'][index],\n          status: check.status === 'fulfilled' ? 'healthy' : 'unhealthy',\n          error: check.status === 'rejected' ? check.reason.message : null,\n        }));\n\n        const allHealthy = results.every((r) => r.status === 'healthy');\n\n        span.setAttributes({\n          'health.overall.status': allHealthy ? 'ready' : 'not_ready',\n          'health.dependencies.count': results.length,\n          'health.dependencies.healthy': results.filter((r) => r.status === 'healthy').length,\n        });\n\n        if (!allHealthy) {\n          span.setStatus({ code: SpanStatusCode.ERROR, message: 'Dependencies not ready' });\n        }\n\n        return {\n          status: allHealthy ? 'ready' : 'not_ready',\n          checks: results,\n          timestamp: new Date().toISOString(),\n        };\n      } finally {\n        span.end();\n      }\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"1-pii-and-sensitive-data-protection",children:"1. PII and Sensitive Data Protection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Data sanitization utilities\nexport class DataSanitizer {\n  private static readonly PII_PATTERNS = {\n    email: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n    phone: /\\b\\d{3}-?\\d{3}-?\\d{4}\\b/g,\n    ssn: /\\b\\d{3}-?\\d{2}-?\\d{4}\\b/g,\n    creditCard: /\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b/g,\n  };\n\n  static sanitizeForTracing(data: any): any {\n    if (typeof data === 'string') {\n      let sanitized = data;\n      Object.entries(this.PII_PATTERNS).forEach(([type, pattern]) => {\n        sanitized = sanitized.replace(pattern, `[REDACTED_${type.toUpperCase()}]`);\n      });\n      return sanitized;\n    }\n\n    if (typeof data === 'object' && data !== null) {\n      const sanitized = {};\n      Object.entries(data).forEach(([key, value]) => {\n        if (this.isSensitiveField(key)) {\n          sanitized[key] = '[REDACTED]';\n        } else {\n          sanitized[key] = this.sanitizeForTracing(value);\n        }\n      });\n      return sanitized;\n    }\n\n    return data;\n  }\n\n  private static isSensitiveField(fieldName: string): boolean {\n    const sensitiveFields = [\n      'password',\n      'token',\n      'secret',\n      'key',\n      'ssn',\n      'credit_card',\n      'cvv',\n      'pin',\n      'bank_account',\n      'routing_number',\n    ];\n    return sensitiveFields.some((field) => fieldName.toLowerCase().includes(field));\n  }\n}\n\n// Secure span decorator\nexport function SecureTrace(operationName?: string) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const tracer = trace.getTracer('secure-service');\n\n    descriptor.value = async function (...args: any[]) {\n      const spanName = operationName || `${target.constructor.name}.${propertyKey}`;\n\n      return tracer.startActiveSpan(spanName, async (span) => {\n        try {\n          // Sanitize arguments before logging\n          const sanitizedArgs = args.map((arg) => DataSanitizer.sanitizeForTracing(arg));\n\n          span.setAttributes({\n            'code.function': propertyKey,\n            'code.namespace': target.constructor.name,\n            'operation.args.count': args.length,\n            // Don't log actual argument values for security\n          });\n\n          const result = await originalMethod.apply(this, args);\n          span.setStatus({ code: SpanStatusCode.OK });\n          return result;\n        } catch (error) {\n          // Sanitize error messages\n          const sanitizedError = DataSanitizer.sanitizeForTracing(error.message);\n          span.recordException(new Error(sanitizedError));\n          span.setStatus({ code: SpanStatusCode.ERROR, message: sanitizedError });\n          throw error;\n        } finally {\n          span.end();\n        }\n      });\n    };\n\n    return descriptor;\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-access-control-and-audit-trails",children:"2. Access Control and Audit Trails"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Injectable()\nexport class AuditService {\n  private readonly auditTracer = trace.getTracer('audit-service');\n\n  async logDataAccess(userId: string, resource: string, action: string, metadata?: any) {\n    return this.auditTracer.startActiveSpan('audit.data_access', async (span) => {\n      span.setAttributes({\n        'audit.user_id': userId,\n        'audit.resource': resource,\n        'audit.action': action,\n        'audit.timestamp': new Date().toISOString(),\n        'audit.ip_address': RequestContext.get('clientIP'),\n        'audit.user_agent': RequestContext.get('userAgent'),\n      });\n\n      if (metadata) {\n        span.setAttributes({\n          'audit.metadata': JSON.stringify(DataSanitizer.sanitizeForTracing(metadata)),\n        });\n      }\n\n      // Log to audit system\n      await this.writeAuditLog({\n        userId,\n        resource,\n        action,\n        timestamp: new Date(),\n        metadata: DataSanitizer.sanitizeForTracing(metadata),\n      });\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"1-intelligent-span-creation",children:"1. Intelligent Span Creation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Conditional instrumentation based on load\nexport class AdaptiveInstrumentation {\n  private static currentLoad = 0;\n  private static readonly LOAD_THRESHOLD = 0.8;\n\n  static shouldCreateSpan(spanType: 'critical' | 'normal' | 'debug'): boolean {\n    switch (spanType) {\n      case 'critical':\n        return true; // Always create critical spans\n      case 'normal':\n        return this.currentLoad < this.LOAD_THRESHOLD;\n      case 'debug':\n        return this.currentLoad < 0.5 && process.env.NODE_ENV !== 'production';\n      default:\n        return false;\n    }\n  }\n\n  static updateLoad(cpuUsage: number, memoryUsage: number) {\n    this.currentLoad = Math.max(cpuUsage, memoryUsage);\n  }\n}\n\n// Adaptive tracing decorator\nexport function AdaptiveTrace(spanType: 'critical' | 'normal' | 'debug' = 'normal') {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const tracer = trace.getTracer('adaptive-service');\n\n    descriptor.value = async function (...args: any[]) {\n      if (!AdaptiveInstrumentation.shouldCreateSpan(spanType)) {\n        return originalMethod.apply(this, args);\n      }\n\n      const spanName = `${target.constructor.name}.${propertyKey}`;\n      return tracer.startActiveSpan(spanName, async (span) => {\n        try {\n          const result = await originalMethod.apply(this, args);\n          span.setStatus({ code: SpanStatusCode.OK });\n          return result;\n        } catch (error) {\n          span.recordException(error);\n          span.setStatus({ code: SpanStatusCode.ERROR, message: error.message });\n          throw error;\n        } finally {\n          span.end();\n        }\n      });\n    };\n\n    return descriptor;\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-resource-aware-sampling",children:"2. Resource-Aware Sampling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class ResourceAwareSampler implements Sampler {\n  private readonly systemMetrics = new SystemMetrics();\n\n  shouldSample(context: Context, traceId: string, spanName: string): SamplingResult {\n    const { cpuUsage, memoryUsage, diskIO } = this.systemMetrics.getCurrentMetrics();\n\n    // Reduce sampling under high load\n    let samplingRate = 0.1; // Default 10%\n\n    if (cpuUsage > 0.8 || memoryUsage > 0.8) {\n      samplingRate = 0.01; // Reduce to 1%\n    } else if (cpuUsage > 0.6 || memoryUsage > 0.6) {\n      samplingRate = 0.05; // Reduce to 5%\n    }\n\n    // Always sample errors and critical operations\n    if (spanName.includes('error') || spanName.includes('checkout')) {\n      samplingRate = 1.0;\n    }\n\n    return {\n      decision: Math.random() < samplingRate ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n    };\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-batch-processing-optimization",children:"3. Batch Processing Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Optimized batch processor configuration\nconst createOptimizedBatchProcessor = () => {\n  const exporter = new DatadogExporter({\n    // Configuration\n  });\n\n  return new BatchSpanProcessor(exporter, {\n    maxQueueSize: process.env.NODE_ENV === 'production' ? 4096 : 1024,\n    maxExportBatchSize: process.env.NODE_ENV === 'production' ? 1024 : 256,\n    scheduledDelayMillis: process.env.NODE_ENV === 'production' ? 2000 : 1000,\n    exportTimeoutMillis: 10000,\n  });\n};\n\n// Memory-efficient resource management\nconst createResourceOptimizedSDK = () => {\n  return new NodeSDK({\n    resource: new Resource({\n      // Minimal required attributes\n      [SemanticResourceAttributes.SERVICE_NAME]: process.env.SERVICE_NAME,\n      [SemanticResourceAttributes.SERVICE_VERSION]: process.env.SERVICE_VERSION,\n    }),\n\n    spanProcessor: createOptimizedBatchProcessor(),\n\n    instrumentations: [\n      getNodeAutoInstrumentations({\n        // Disable high-overhead instrumentations\n        '@opentelemetry/instrumentation-fs': { enabled: false },\n        '@opentelemetry/instrumentation-dns': { enabled: false },\n        '@opentelemetry/instrumentation-net': { enabled: false },\n      }),\n    ],\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Missing Traces"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check exporter configuration"}),"\n",(0,s.jsx)(n.li,{children:"Verify network connectivity to collector"}),"\n",(0,s.jsx)(n.li,{children:"Ensure proper environment variables"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"High Memory Usage"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement memory limiters"}),"\n",(0,s.jsx)(n.li,{children:"Adjust batch sizes"}),"\n",(0,s.jsx)(n.li,{children:"Check for memory leaks in custom instrumentation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance Impact"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use appropriate sampling rates"}),"\n",(0,s.jsx)(n.li,{children:"Optimize span creation frequency"}),"\n",(0,s.jsx)(n.li,{children:"Monitor collector resource usage"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-configuration",children:"Debug Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Enable debug logging\nprocess.env.OTEL_LOG_LEVEL = 'debug';\n\n// Trace SDK operations\nimport { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"validation-tools",children:"Validation Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check collector status\nkubectl logs -n ecommerce deployment/otel-collector\n\n# Verify trace export\ncurl -X POST http://localhost:4318/v1/traces \\\n  -H "Content-Type: application/json" \\\n  -d \'{"resourceSpans": []}\'\n\n# Test instrumentation\nnpm run test:telemetry\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive OpenTelemetry implementation provides:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full-stack observability"})," across your microservices architecture"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production-ready configuration"})," for your tech stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalable monitoring"})," with proper SLIs/SLOs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance optimization"})," strategies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actionable alerting"})," for operational excellence"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remember to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start with core instrumentation and gradually add custom spans"}),"\n",(0,s.jsx)(n.li,{children:"Monitor the performance impact of telemetry overhead"}),"\n",(0,s.jsx)(n.li,{children:"Regularly review and optimize your sampling strategies"}),"\n",(0,s.jsx)(n.li,{children:"Keep trace data secure and compliant with privacy regulations"}),"\n",(0,s.jsx)(n.li,{children:"Train your team on interpreting distributed traces"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For questions or issues, refer to the troubleshooting section or consult the OpenTelemetry documentation."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);