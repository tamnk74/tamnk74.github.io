"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[669],{1867:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"architecture-practices/architecture-definition/input-validation","title":"Input Validation Guide","description":"This guide provides comprehensive input validation strategies for NestJS microservices and Next.js microfrontend applications to ensure data integrity and security.","source":"@site/docs/architecture-practices/architecture-definition/input-validation.md","sourceDirName":"architecture-practices/architecture-definition","slug":"/architecture-practices/architecture-definition/input-validation","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/input-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-definition/input-validation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Foundation","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/architecture-foundation"},"next":{"title":"Third-Party Integration Strategy","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/third-party-integration"}}');var r=t(5813),s=t(7814);const i={},o="Input Validation Guide",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Validation Architecture",id:"validation-architecture",level:2},{value:"Multi-Layer Validation Strategy",id:"multi-layer-validation-strategy",level:3},{value:"NestJS Server-Side Validation",id:"nestjs-server-side-validation",level:2},{value:"DTO Validation with Class Validator",id:"dto-validation-with-class-validator",level:3},{value:"Custom Validation Decorators",id:"custom-validation-decorators",level:3},{value:"Advanced Validation Techniques",id:"advanced-validation-techniques",level:3},{value:"Input Validation Middleware",id:"input-validation-middleware",level:3},{value:"Next.js Client-Side Validation",id:"nextjs-client-side-validation",level:2},{value:"Form Validation with React Hook Form",id:"form-validation-with-react-hook-form",level:3},{value:"Real-time Validation Components",id:"real-time-validation-components",level:3},{value:"Database Constraints",id:"database-constraints",level:2},{value:"Entity Validation",id:"entity-validation",level:3},{value:"Database Migration with Constraints",id:"database-migration-with-constraints",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Input Sanitization",id:"input-sanitization",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Validation Principles",id:"validation-principles",level:3},{value:"Implementation Guidelines",id:"implementation-guidelines",level:3},{value:"Testing Validation",id:"testing-validation",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"input-validation-guide",children:"Input Validation Guide"})}),"\n",(0,r.jsx)(e.p,{children:"This guide provides comprehensive input validation strategies for NestJS microservices and Next.js microfrontend applications to ensure data integrity and security."}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(e.p,{children:"Input validation is a critical security and data integrity practice that must be implemented at multiple layers of the application. This guide covers client-side validation for user experience, server-side validation for security, and database constraints for data integrity."}),"\n",(0,r.jsx)(e.h2,{id:"validation-architecture",children:"Validation Architecture"}),"\n",(0,r.jsx)(e.h3,{id:"multi-layer-validation-strategy",children:"Multi-Layer Validation Strategy"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-mermaid",children:"graph TD\n    A[User Input] --\x3e B[Client-Side Validation]\n    B --\x3e C[API Gateway Validation]\n    C --\x3e D[Service-Level Validation]\n    D --\x3e E[Database Constraints]\n    \n    B --\x3e F[User Feedback]\n    C --\x3e G[Request Rejection]\n    D --\x3e H[Business Rule Validation]\n    E --\x3e I[Data Integrity Protection]\n"})}),"\n",(0,r.jsx)(e.h2,{id:"nestjs-server-side-validation",children:"NestJS Server-Side Validation"}),"\n",(0,r.jsx)(e.h3,{id:"dto-validation-with-class-validator",children:"DTO Validation with Class Validator"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/dtos/create-user.dto.ts\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  IsPhoneNumber,\n  IsDate,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsEnum,\n  ValidateNested,\n  ArrayMinSize,\n  ArrayMaxSize,\n} from 'class-validator';\nimport { Transform, Type } from 'class-transformer';\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  USER = 'user',\n  MODERATOR = 'moderator',\n}\n\nexport class AddressDto {\n  @IsString()\n  @MinLength(1)\n  @MaxLength(100)\n  street: string;\n\n  @IsString()\n  @MinLength(1)\n  @MaxLength(50)\n  city: string;\n\n  @IsString()\n  @Matches(/^\\d{5}(-\\d{4})?$/, { message: 'Invalid postal code format' })\n  postalCode: string;\n\n  @IsString()\n  @MinLength(2)\n  @MaxLength(3)\n  country: string;\n}\n\nexport class CreateUserDto {\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  @MaxLength(255)\n  @Transform(({ value }) => value?.toLowerCase()?.trim())\n  email: string;\n\n  @IsString()\n  @MinLength(8, { message: 'Password must be at least 8 characters long' })\n  @MaxLength(128)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message: 'Password must contain uppercase, lowercase, number and special character',\n  })\n  password: string;\n\n  @IsString()\n  @MinLength(2)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z\\s-']+$/, { message: 'First name can only contain letters, spaces, hyphens, and apostrophes' })\n  firstName: string;\n\n  @IsString()\n  @MinLength(2)\n  @MaxLength(50)\n  @Matches(/^[a-zA-Z\\s-']+$/, { message: 'Last name can only contain letters, spaces, hyphens, and apostrophes' })\n  lastName: string;\n\n  @IsOptional()\n  @IsPhoneNumber(null, { message: 'Please provide a valid phone number' })\n  phoneNumber?: string;\n\n  @IsOptional()\n  @IsDate()\n  @Type(() => Date)\n  @Transform(({ value }) => value && new Date(value))\n  dateOfBirth?: Date;\n\n  @IsEnum(UserRole, { message: 'Role must be one of: admin, user, moderator' })\n  role: UserRole;\n\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => AddressDto)\n  address?: AddressDto;\n\n  @IsOptional()\n  @IsString({ each: true })\n  @ArrayMinSize(0)\n  @ArrayMaxSize(10)\n  @Transform(({ value }) => value?.map((tag: string) => tag.trim().toLowerCase()))\n  tags?: string[];\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"custom-validation-decorators",children:"Custom Validation Decorators"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/validators/custom-validators.ts\nimport { registerDecorator, ValidationOptions, ValidationArguments } from 'class-validator';\n\n// Unique email validator\nexport function IsUniqueEmail(validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isUniqueEmail',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      validator: {\n        async validate(value: any, args: ValidationArguments) {\n          const userService = Container.get(UserService);\n          const existingUser = await userService.findByEmail(value);\n          return !existingUser;\n        },\n        defaultMessage(args: ValidationArguments) {\n          return `Email ${args.value} is already taken`;\n        },\n      },\n    });\n  };\n}\n\n// Strong password validator\nexport function IsStrongPassword(validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isStrongPassword',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      validator: {\n        validate(value: any, args: ValidationArguments) {\n          if (typeof value !== 'string') return false;\n          \n          const hasMinLength = value.length >= 8;\n          const hasUpperCase = /[A-Z]/.test(value);\n          const hasLowerCase = /[a-z]/.test(value);\n          const hasNumbers = /\\d/.test(value);\n          const hasSpecialChar = /[@$!%*?&]/.test(value);\n          const hasNoSequence = !/(.)\\1{2,}/.test(value); // No 3+ consecutive same chars\n          \n          return hasMinLength && hasUpperCase && hasLowerCase && \n                 hasNumbers && hasSpecialChar && hasNoSequence;\n        },\n        defaultMessage(args: ValidationArguments) {\n          return 'Password must be at least 8 characters with uppercase, lowercase, number, special character, and no repetitive sequences';\n        },\n      },\n    });\n  };\n}\n\n// File type validator\nexport function IsValidFileType(allowedTypes: string[], validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isValidFileType',\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [allowedTypes],\n      options: validationOptions,\n      validator: {\n        validate(value: any, args: ValidationArguments) {\n          if (!value || !value.mimetype) return false;\n          const [allowedTypes] = args.constraints;\n          return allowedTypes.includes(value.mimetype);\n        },\n        defaultMessage(args: ValidationArguments) {\n          const [allowedTypes] = args.constraints;\n          return `File type must be one of: ${allowedTypes.join(', ')}`;\n        },\n      },\n    });\n  };\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"advanced-validation-techniques",children:"Advanced Validation Techniques"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/validation/validation.service.ts\n@Injectable()\nexport class ValidationService {\n  private readonly logger = new Logger(ValidationService.name);\n\n  // Sanitize input to prevent XSS\n  sanitizeInput(input: string): string {\n    return input\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '') // Remove script tags\n      .replace(/javascript:/gi, '') // Remove javascript: protocol\n      .replace(/on\\w+=\"[^\"]*\"/gi, '') // Remove event handlers\n      .trim();\n  }\n\n  // Validate business rules\n  async validateBusinessRules(dto: any, context: string): Promise<ValidationResult> {\n    const errors: string[] = [];\n\n    switch (context) {\n      case 'user-creation':\n        await this.validateUserCreationRules(dto, errors);\n        break;\n      case 'order-creation':\n        await this.validateOrderCreationRules(dto, errors);\n        break;\n      default:\n        this.logger.warn(`Unknown validation context: ${context}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  private async validateUserCreationRules(dto: CreateUserDto, errors: string[]): Promise<void> {\n    // Age validation\n    if (dto.dateOfBirth) {\n      const age = this.calculateAge(dto.dateOfBirth);\n      if (age < 13) {\n        errors.push('User must be at least 13 years old');\n      }\n    }\n\n    // Email domain validation\n    const emailDomain = dto.email.split('@')[1];\n    const blockedDomains = await this.getBlockedEmailDomains();\n    if (blockedDomains.includes(emailDomain)) {\n      errors.push('Email domain is not allowed');\n    }\n\n    // Password history check\n    if (dto.password) {\n      const passwordHistory = await this.getUserPasswordHistory(dto.email);\n      const isPasswordReused = await this.checkPasswordReuse(dto.password, passwordHistory);\n      if (isPasswordReused) {\n        errors.push('Password has been used recently, please choose a different password');\n      }\n    }\n  }\n\n  // Rate limiting validation\n  async validateRateLimit(identifier: string, action: string): Promise<boolean> {\n    const key = `rate_limit:${action}:${identifier}`;\n    const current = await this.redisService.get(key);\n    \n    const limits = {\n      'user-creation': { count: 5, window: 3600 }, // 5 attempts per hour\n      'password-reset': { count: 3, window: 1800 }, // 3 attempts per 30 minutes\n      'login': { count: 10, window: 900 }, // 10 attempts per 15 minutes\n    };\n\n    const limit = limits[action];\n    if (!limit) return true;\n\n    if (current >= limit.count) {\n      return false;\n    }\n\n    await this.redisService.incr(key, limit.window);\n    return true;\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"input-validation-middleware",children:"Input Validation Middleware"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/middleware/validation.middleware.ts\n@Injectable()\nexport class ValidationMiddleware implements NestMiddleware {\n  constructor(private readonly validationService: ValidationService) {}\n\n  use(req: Request, res: Response, next: NextFunction) {\n    // Sanitize query parameters\n    if (req.query) {\n      for (const [key, value] of Object.entries(req.query)) {\n        if (typeof value === 'string') {\n          req.query[key] = this.validationService.sanitizeInput(value);\n        }\n      }\n    }\n\n    // Sanitize body parameters\n    if (req.body && typeof req.body === 'object') {\n      this.sanitizeObject(req.body);\n    }\n\n    // Validate content type for POST/PUT requests\n    if (['POST', 'PUT', 'PATCH'].includes(req.method)) {\n      const contentType = req.headers['content-type'];\n      if (!contentType || !contentType.includes('application/json')) {\n        return res.status(400).json({\n          statusCode: 400,\n          message: 'Content-Type must be application/json',\n          error: 'Bad Request',\n        });\n      }\n    }\n\n    // Check payload size\n    const contentLength = parseInt(req.headers['content-length'] || '0');\n    if (contentLength > 10 * 1024 * 1024) { // 10MB limit\n      return res.status(413).json({\n        statusCode: 413,\n        message: 'Payload too large',\n        error: 'Payload Too Large',\n      });\n    }\n\n    next();\n  }\n\n  private sanitizeObject(obj: any): void {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        obj[key] = this.validationService.sanitizeInput(value);\n      } else if (typeof value === 'object' && value !== null) {\n        this.sanitizeObject(value);\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"nextjs-client-side-validation",children:"Next.js Client-Side Validation"}),"\n",(0,r.jsx)(e.h3,{id:"form-validation-with-react-hook-form",children:"Form Validation with React Hook Form"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// components/forms/user-registration-form.tsx\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst userRegistrationSchema = z.object({\n  email: z\n    .string()\n    .email('Please enter a valid email address')\n    .max(255, 'Email must be less than 255 characters'),\n  \n  password: z\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n      'Password must contain uppercase, lowercase, number and special character'\n    ),\n  \n  confirmPassword: z.string(),\n  \n  firstName: z\n    .string()\n    .min(2, 'First name must be at least 2 characters')\n    .max(50, 'First name must be less than 50 characters')\n    .regex(/^[a-zA-Z\\s-']+$/, 'First name can only contain letters, spaces, hyphens, and apostrophes'),\n  \n  lastName: z\n    .string()\n    .min(2, 'Last name must be at least 2 characters')\n    .max(50, 'Last name must be less than 50 characters')\n    .regex(/^[a-zA-Z\\s-']+$/, 'Last name can only contain letters, spaces, hyphens, and apostrophes'),\n  \n  phoneNumber: z\n    .string()\n    .regex(/^\\+?[\\d\\s-()]+$/, 'Please enter a valid phone number')\n    .optional()\n    .or(z.literal('')),\n  \n  dateOfBirth: z\n    .date()\n    .refine((date) => {\n      const age = new Date().getFullYear() - date.getFullYear();\n      return age >= 13;\n    }, 'You must be at least 13 years old'),\n  \n  terms: z.boolean().refine(val => val === true, 'You must accept the terms and conditions'),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype UserRegistrationForm = z.infer<typeof userRegistrationSchema>;\n\nexport const UserRegistrationForm: React.FC = () => {\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isSubmitting, isValid },\n    watch,\n    trigger,\n  } = useForm<UserRegistrationForm>({\n    resolver: zodResolver(userRegistrationSchema),\n    mode: 'onChange',\n    defaultValues: {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      terms: false,\n    },\n  });\n\n  const password = watch('password');\n\n  const onSubmit = async (data: UserRegistrationForm) => {\n    try {\n      // Additional client-side validation\n      const validationResult = await validateWithServer(data);\n      if (!validationResult.isValid) {\n        // Handle server-side validation errors\n        return;\n      }\n\n      await registerUser(data);\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Controller\n          name=\"firstName\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">\n                First Name *\n              </label>\n              <input\n                {...field}\n                type=\"text\"\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${\n                  errors.firstName ? 'border-red-500' : ''\n                }`}\n                placeholder=\"John\"\n              />\n              {errors.firstName && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.firstName.message}</p>\n              )}\n            </div>\n          )}\n        />\n\n        <Controller\n          name=\"lastName\"\n          control={control}\n          render={({ field }) => (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">\n                Last Name *\n              </label>\n              <input\n                {...field}\n                type=\"text\"\n                className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${\n                  errors.lastName ? 'border-red-500' : ''\n                }`}\n                placeholder=\"Doe\"\n              />\n              {errors.lastName && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.lastName.message}</p>\n              )}\n            </div>\n          )}\n        />\n      </div>\n\n      <Controller\n        name=\"email\"\n        control={control}\n        render={({ field }) => (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Email Address *\n            </label>\n            <input\n              {...field}\n              type=\"email\"\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${\n                errors.email ? 'border-red-500' : ''\n              }`}\n              placeholder=\"john.doe@example.com\"\n              onBlur={() => trigger('email')}\n            />\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n        )}\n      />\n\n      <Controller\n        name=\"password\"\n        control={control}\n        render={({ field }) => (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Password *\n            </label>\n            <PasswordInput\n              {...field}\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${\n                errors.password ? 'border-red-500' : ''\n              }`}\n              showStrengthIndicator\n            />\n            {errors.password && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.password.message}</p>\n            )}\n            <PasswordStrengthIndicator password={password} />\n          </div>\n        )}\n      />\n\n      <Controller\n        name=\"confirmPassword\"\n        control={control}\n        render={({ field }) => (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Confirm Password *\n            </label>\n            <input\n              {...field}\n              type=\"password\"\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm ${\n                errors.confirmPassword ? 'border-red-500' : ''\n              }`}\n            />\n            {errors.confirmPassword && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.confirmPassword.message}</p>\n            )}\n          </div>\n        )}\n      />\n\n      <Controller\n        name=\"terms\"\n        control={control}\n        render={({ field }) => (\n          <div className=\"flex items-center\">\n            <input\n              {...field}\n              type=\"checkbox\"\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label className=\"ml-2 block text-sm text-gray-900\">\n              I agree to the{' '}\n              <a href=\"/terms\" className=\"text-blue-600 hover:text-blue-500\">\n                Terms and Conditions\n              </a>\n            </label>\n          </div>\n        )}\n      />\n      {errors.terms && (\n        <p className=\"mt-1 text-sm text-red-600\">{errors.terms.message}</p>\n      )}\n\n      <button\n        type=\"submit\"\n        disabled={isSubmitting || !isValid}\n        className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n      >\n        {isSubmitting ? 'Creating Account...' : 'Create Account'}\n      </button>\n    </form>\n  );\n};\n"})}),"\n",(0,r.jsx)(e.h3,{id:"real-time-validation-components",children:"Real-time Validation Components"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"// components/validation/password-strength-indicator.tsx\ninterface PasswordStrengthIndicatorProps {\n  password: string;\n}\n\nexport const PasswordStrengthIndicator: React.FC<PasswordStrengthIndicatorProps> = ({\n  password,\n}) => {\n  const getPasswordStrength = (password: string): {\n    score: number;\n    label: string;\n    color: string;\n  } => {\n    if (!password) return { score: 0, label: '', color: '' };\n\n    let score = 0;\n    const checks = {\n      length: password.length >= 8,\n      lowercase: /[a-z]/.test(password),\n      uppercase: /[A-Z]/.test(password),\n      numbers: /\\d/.test(password),\n      special: /[@$!%*?&]/.test(password),\n      noSequence: !/(.)\\1{2,}/.test(password),\n    };\n\n    score = Object.values(checks).filter(Boolean).length;\n\n    const strengthLevels = [\n      { score: 0, label: '', color: '' },\n      { score: 1, label: 'Very Weak', color: 'red' },\n      { score: 2, label: 'Weak', color: 'orange' },\n      { score: 3, label: 'Fair', color: 'yellow' },\n      { score: 4, label: 'Good', color: 'blue' },\n      { score: 5, label: 'Strong', color: 'green' },\n      { score: 6, label: 'Very Strong', color: 'green' },\n    ];\n\n    return strengthLevels[score] || strengthLevels[0];\n  };\n\n  const strength = getPasswordStrength(password);\n\n  if (!password) return null;\n\n  return (\n    <div className=\"mt-2\">\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n          <div\n            className={`h-2 rounded-full bg-${strength.color}-500 transition-all duration-300`}\n            style={{ width: `${(strength.score / 6) * 100}%` }}\n          />\n        </div>\n        <span className={`text-sm font-medium text-${strength.color}-600`}>\n          {strength.label}\n        </span>\n      </div>\n      \n      <div className=\"mt-2 space-y-1\">\n        <PasswordRequirement\n          met={password.length >= 8}\n          text=\"At least 8 characters\"\n        />\n        <PasswordRequirement\n          met={/[a-z]/.test(password)}\n          text=\"Contains lowercase letter\"\n        />\n        <PasswordRequirement\n          met={/[A-Z]/.test(password)}\n          text=\"Contains uppercase letter\"\n        />\n        <PasswordRequirement\n          met={/\\d/.test(password)}\n          text=\"Contains number\"\n        />\n        <PasswordRequirement\n          met={/[@$!%*?&]/.test(password)}\n          text=\"Contains special character\"\n        />\n      </div>\n    </div>\n  );\n};\n\nconst PasswordRequirement: React.FC<{ met: boolean; text: string }> = ({\n  met,\n  text,\n}) => (\n  <div className=\"flex items-center space-x-2\">\n    {met ? (\n      <CheckIcon className=\"h-4 w-4 text-green-500\" />\n    ) : (\n      <XIcon className=\"h-4 w-4 text-gray-400\" />\n    )}\n    <span className={`text-xs ${met ? 'text-green-600' : 'text-gray-500'}`}>\n      {text}\n    </span>\n  </div>\n);\n"})}),"\n",(0,r.jsx)(e.h2,{id:"database-constraints",children:"Database Constraints"}),"\n",(0,r.jsx)(e.h3,{id:"entity-validation",children:"Entity Validation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/entities/user.entity.ts\nimport { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, Check } from 'typeorm';\n\n@Entity('users')\n@Check('check_email_format', \"email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$'\")\n@Check('check_age_limit', 'date_of_birth IS NULL OR date_of_birth <= CURRENT_DATE - INTERVAL \\'13 years\\'')\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 60, // For bcrypt hash\n    nullable: false,\n  })\n  password: string;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: false,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 20,\n    nullable: true,\n  })\n  phoneNumber?: string;\n\n  @Column({\n    type: 'date',\n    nullable: true,\n  })\n  dateOfBirth?: Date;\n\n  @Column({\n    type: 'enum',\n    enum: ['admin', 'user', 'moderator'],\n    default: 'user',\n  })\n  role: string;\n\n  @Column({\n    type: 'boolean',\n    default: true,\n  })\n  isActive: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  lastLoginAt?: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"database-migration-with-constraints",children:"Database Migration with Constraints"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/migrations/001-create-users-table.ts\nimport { MigrationInterface, QueryRunner, Table, Index } from 'typeorm';\n\nexport class CreateUsersTable1234567890 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.createTable(\n      new Table({\n        name: 'users',\n        columns: [\n          {\n            name: 'id',\n            type: 'uuid',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()',\n          },\n          {\n            name: 'email',\n            type: 'varchar',\n            length: '255',\n            isUnique: true,\n            isNullable: false,\n          },\n          {\n            name: 'password',\n            type: 'varchar',\n            length: '60',\n            isNullable: false,\n          },\n          {\n            name: 'first_name',\n            type: 'varchar',\n            length: '50',\n            isNullable: false,\n          },\n          {\n            name: 'last_name',\n            type: 'varchar',\n            length: '50',\n            isNullable: false,\n          },\n          {\n            name: 'phone_number',\n            type: 'varchar',\n            length: '20',\n            isNullable: true,\n          },\n          {\n            name: 'date_of_birth',\n            type: 'date',\n            isNullable: true,\n          },\n          {\n            name: 'role',\n            type: 'enum',\n            enum: ['admin', 'user', 'moderator'],\n            default: \"'user'\",\n          },\n          {\n            name: 'is_active',\n            type: 'boolean',\n            default: true,\n          },\n          {\n            name: 'last_login_at',\n            type: 'timestamp',\n            isNullable: true,\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp',\n            default: 'CURRENT_TIMESTAMP',\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp',\n            default: 'CURRENT_TIMESTAMP',\n            onUpdate: 'CURRENT_TIMESTAMP',\n          },\n        ],\n        checks: [\n          {\n            name: 'check_email_format',\n            expression: \"email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$'\",\n          },\n          {\n            name: 'check_age_limit',\n            expression: 'date_of_birth IS NULL OR date_of_birth <= CURRENT_DATE - INTERVAL \\'13 years\\'',\n          },\n          {\n            name: 'check_phone_format',\n            expression: 'phone_number IS NULL OR phone_number ~* \\'^\\\\+?[0-9\\\\s\\\\-\\\\(\\\\)]+$\\'',\n          },\n          {\n            name: 'check_name_length',\n            expression: 'LENGTH(first_name) >= 2 AND LENGTH(last_name) >= 2',\n          },\n        ],\n      }),\n      true\n    );\n\n    // Create indexes for performance\n    await queryRunner.createIndex(\n      'users',\n      new Index('idx_users_email', ['email'])\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('idx_users_active', ['is_active'])\n    );\n\n    await queryRunner.createIndex(\n      'users',\n      new Index('idx_users_role', ['role'])\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    await queryRunner.dropTable('users');\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(e.h3,{id:"input-sanitization",children:"Input Sanitization"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/security/sanitization.service.ts\n@Injectable()\nexport class SanitizationService {\n  // HTML sanitization\n  sanitizeHtml(input: string): string {\n    const allowedTags = ['p', 'br', 'strong', 'em', 'u', 'ol', 'ul', 'li'];\n    const allowedAttributes = {\n      'a': ['href'],\n    };\n\n    return sanitizeHtml(input, {\n      allowedTags,\n      allowedAttributes,\n      disallowedTagsMode: 'discard',\n    });\n  }\n\n  // SQL injection prevention\n  sanitizeSqlInput(input: string): string {\n    return input\n      .replace(/['\";\\\\]/g, '') // Remove dangerous characters\n      .trim()\n      .substring(0, 1000); // Limit length\n  }\n\n  // File name sanitization\n  sanitizeFileName(fileName: string): string {\n    return fileName\n      .replace(/[^a-zA-Z0-9._-]/g, '') // Only allow safe characters\n      .replace(/\\.{2,}/g, '.') // Prevent directory traversal\n      .substring(0, 255); // Limit length\n  }\n\n  // URL sanitization\n  sanitizeUrl(url: string): string {\n    try {\n      const parsed = new URL(url);\n      \n      // Only allow specific protocols\n      if (!['http:', 'https:'].includes(parsed.protocol)) {\n        throw new Error('Invalid protocol');\n      }\n      \n      return parsed.toString();\n    } catch {\n      throw new ValidationException('Invalid URL format');\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"validation-principles",children:"Validation Principles"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Defense in Depth"}),": Validate at multiple layers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fail Securely"}),": Default to rejection when validation fails"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Clear Error Messages"}),": Provide helpful feedback to users"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Performance"}),": Validate efficiently without blocking"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Consistency"}),": Use consistent validation patterns"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"implementation-guidelines",children:"Implementation Guidelines"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Server-Side Priority"}),": Never rely solely on client-side validation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Sanitization"}),": Clean inputs before validation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Business Rules"}),": Separate technical from business validation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rate Limiting"}),": Prevent abuse through validation endpoints"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Logging"}),": Log validation failures for security monitoring"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"testing-validation",children:"Testing Validation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// src/validation/validation.spec.ts\ndescribe('UserValidation', () => {\n  let validationService: ValidationService;\n\n  beforeEach(() => {\n    validationService = new ValidationService();\n  });\n\n  describe('Email Validation', () => {\n    it('should accept valid email addresses', async () => {\n      const validEmails = [\n        'user@example.com',\n        'test.email+tag@example.org',\n        'user123@sub.domain.com',\n      ];\n\n      for (const email of validEmails) {\n        const result = await validate({ email });\n        expect(result.isValid).toBe(true);\n      }\n    });\n\n    it('should reject invalid email addresses', async () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@example.com',\n        'user@',\n        'user@.com',\n        'user..name@example.com',\n      ];\n\n      for (const email of invalidEmails) {\n        const result = await validate({ email });\n        expect(result.isValid).toBe(false);\n        expect(result.errors).toContain('Please provide a valid email address');\n      }\n    });\n  });\n\n  describe('Password Validation', () => {\n    it('should accept strong passwords', async () => {\n      const strongPasswords = [\n        'StrongP@ssw0rd!',\n        'MySecure123$',\n        'C0mpl3x&Pass',\n      ];\n\n      for (const password of strongPasswords) {\n        const result = await validate({ password });\n        expect(result.isValid).toBe(true);\n      }\n    });\n\n    it('should reject weak passwords', async () => {\n      const weakPasswords = [\n        'weak',\n        'password123',\n        'PASSWORD',\n        'Pa$$w0rd!!!',\n      ];\n\n      for (const password of weakPasswords) {\n        const result = await validate({ password });\n        expect(result.isValid).toBe(false);\n      }\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards",children:"Coding Standards"})})," - Code quality and security standards"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})})," - Development tools configuration"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/code-quality-tools",children:"Code Quality Tools"})})," - Automated validation tools"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.p,{children:"This input validation guide should be regularly updated to address new security threats and validation requirements."})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},7814:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var a=t(9729);const r={},s=a.createContext(r);function i(n){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);