"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[623],{5741:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(9729);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}},5864:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"devops/gcp/microservices-terraform-guide","title":"Comprehensive Microservices Architecture on GCP with Terraform","description":"This guide provides a complete Infrastructure as Code (IaC) solution for deploying production-ready microservices applications on Google Cloud Platform using Terraform.","source":"@site/docs/devops/gcp/microservices-terraform-guide.md","sourceDirName":"devops/gcp","slug":"/devops/gcp/microservices-terraform-guide","permalink":"/fullstack-dev/docs/devops/gcp/microservices-terraform-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/devops/gcp/microservices-terraform-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GKE Ingress Setup Guide","permalink":"/fullstack-dev/docs/devops/gcp/gke-ingress-setup"},"next":{"title":"Testing","permalink":"/fullstack-dev/docs/testing"}}');var o=r(5813),t=r(5741);const s={},a="Comprehensive Microservices Architecture on GCP with Terraform",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"High-Level Architecture",id:"high-level-architecture",level:3},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Tools",id:"required-tools",level:3},{value:"GCP Project Setup",id:"gcp-project-setup",level:3},{value:"Service Account Setup",id:"service-account-setup",level:3},{value:"Project Structure",id:"project-structure",level:2},{value:"Core Infrastructure Setup",id:"core-infrastructure-setup",level:2},{value:"Provider Configuration",id:"provider-configuration",level:3},{value:"Main Variables",id:"main-variables",level:3},{value:"Main Terraform Configuration",id:"main-terraform-configuration",level:3},{value:"Networking Module",id:"networking-module",level:2},{value:"Artifact Registry Configuration",id:"artifact-registry-configuration",level:2},{value:"Artifact Registry Module",id:"artifact-registry-module",level:3},{value:"Security Module",id:"security-module",level:2},{value:"KMS, Secret Manager, and IAM Configuration",id:"kms-secret-manager-and-iam-configuration",level:3},{value:"Databases Module",id:"databases-module",level:2},{value:"Cloud SQL PostgreSQL and Memorystore Redis",id:"cloud-sql-postgresql-and-memorystore-redis",level:3},{value:"Storage Module",id:"storage-module",level:2},{value:"Cloud Storage and Filestore Configuration",id:"cloud-storage-and-filestore-configuration",level:3},{value:"Messaging Module",id:"messaging-module",level:2},{value:"Pub/Sub Configuration",id:"pubsub-configuration",level:3},{value:"Cloud Run Module",id:"cloud-run-module",level:2},{value:"Serverless Microservices Configuration",id:"serverless-microservices-configuration",level:3},{value:"Monitoring Module",id:"monitoring-module",level:2},{value:"Cloud Operations Integration",id:"cloud-operations-integration",level:3},{value:"Complete Terraform Configuration",id:"complete-terraform-configuration",level:2},{value:"Main Outputs",id:"main-outputs",level:3},{value:"Deployment Guide",id:"deployment-guide",level:2},{value:"Step 1: Prerequisites Setup",id:"step-1-prerequisites-setup",level:3},{value:"Step 2: Plan and Deploy",id:"step-2-plan-and-deploy",level:3},{value:"Step 3: Post-Deployment Setup",id:"step-3-post-deployment-setup",level:3},{value:"Step 4: Deploy Application",id:"step-4-deploy-application",level:3},{value:"Step 5: Verify Deployment",id:"step-5-verify-deployment",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Cost Optimization",id:"cost-optimization",level:3},{value:"Operational Excellence",id:"operational-excellence",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Terraform Issues",id:"terraform-issues",level:4},{value:"GKE Issues",id:"gke-issues",level:4},{value:"Database Issues",id:"database-issues",level:4},{value:"Application Issues",id:"application-issues",level:4},{value:"Monitoring and Debugging",id:"monitoring-and-debugging",level:3},{value:"Health Checks",id:"health-checks",level:4},{value:"Log Analysis",id:"log-analysis",level:4},{value:"Remaining Sections to Add:",id:"remaining-sections-to-add",level:2},{value:"\ud83d\udcca <strong>Complete Module Set</strong>",id:"-complete-module-set",level:3},{value:"\ud83d\ude80 <strong>Deployment &amp; Operations</strong>",id:"-deployment--operations",level:3},{value:"\ud83d\udccb <strong>Best Practices &amp; Examples</strong>",id:"-best-practices--examples",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"comprehensive-microservices-architecture-on-gcp-with-terraform",children:"Comprehensive Microservices Architecture on GCP with Terraform"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides a complete Infrastructure as Code (IaC) solution for deploying production-ready microservices applications on Google Cloud Platform using Terraform."}),"\n",(0,o.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#architecture-overview",children:"Architecture Overview"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#project-structure",children:"Project Structure"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#core-infrastructure-setup",children:"Core Infrastructure Setup"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#networking-module",children:"Networking Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#artifact-registry-configuration",children:"Artifact Registry Configuration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#security-module",children:"Security Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#databases-module",children:"Databases Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#storage-module",children:"Storage Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#messaging-module",children:"Messaging Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#cloud-run-module",children:"Cloud Run Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#monitoring-module",children:"Monitoring Module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#complete-terraform-configuration",children:"Complete Terraform Configuration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#deployment-guide",children:"Deployment Guide"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,o.jsx)(n.h3,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          Google Cloud Platform                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502   Cloud     \u2502  \u2502   Cloud     \u2502  \u2502   Cloud     \u2502              \u2502\n\u2502  \u2502   Load      \u2502  \u2502     CDN     \u2502  \u2502   Armor     \u2502              \u2502\n\u2502  \u2502 Balancer    \u2502  \u2502             \u2502  \u2502  (WAF)      \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502           \u2502               \u2502               \u2502                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502                    VPC Network                               \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502 \u2502\n\u2502  \u2502  \u2502   Public    \u2502  \u2502   Private   \u2502  \u2502   Database  \u2502         \u2502 \u2502\n\u2502  \u2502  \u2502   Subnet    \u2502  \u2502   Subnet    \u2502  \u2502   Subnet    \u2502         \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502 \u2502\n\u2502  \u2502         \u2502               \u2502               \u2502                   \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502 \u2502\n\u2502  \u2502  \u2502 Cloud Run   \u2502 \u2502           GKE Cluster               \u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 Services    \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502             \u2502 \u2502  \u2502 Node    \u2502 \u2502 Node    \u2502 \u2502 Node    \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502  \u2502 Pool 1  \u2502 \u2502 Pool 2  \u2502 \u2502 Pool 3  \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2502Gateway  \u2502 \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2502Service  \u2502 \u2502 \u2502                                     \u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502  \u2502        Microservices            \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2502Auth     \u2502 \u2502 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2502Service  \u2502 \u2502 \u2502  \u2502 \u2502User \u2502 \u2502Order\u2502 \u2502Pay  \u2502 \u2502Notif\u2502 \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502  \u2502 \u2502 Svc \u2502 \u2502 Svc \u2502 \u2502 Svc \u2502 \u2502 Svc \u2502 \u2502\u2502   \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\u2502   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502   \u2502 \u2502\n\u2502                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502                 Data Layer                                   \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502 \u2502\n\u2502  \u2502  \u2502  Cloud SQL  \u2502  \u2502 Memorystore \u2502  \u2502 Cloud       \u2502         \u2502 \u2502\n\u2502  \u2502  \u2502 (PostgreSQL)\u2502  \u2502   (Redis)   \u2502  \u2502 Storage     \u2502         \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502 \u2502\n\u2502  \u2502  \u2502  Pub/Sub    \u2502  \u2502 Filestore   \u2502  \u2502 Artifact    \u2502         \u2502 \u2502\n\u2502  \u2502  \u2502 (Messaging) \u2502  \u2502   (NFS)     \u2502  \u2502 Registry    \u2502         \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502               Security & Management                          \u2502 \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502 \u2502\n\u2502  \u2502  \u2502   Secret    \u2502  \u2502 Cloud IAM   \u2502  \u2502 Cloud KMS   \u2502         \u2502 \u2502\n\u2502  \u2502  \u2502  Manager    \u2502  \u2502             \u2502  \u2502             \u2502         \u2502 \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,o.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Container Orchestration"}),": Google Kubernetes Engine (GKE)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Serverless"}),": Cloud Run"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Container Registry"}),": Artifact Registry"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Databases"}),": Cloud SQL (PostgreSQL), Memorystore (Redis)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storage"}),": Cloud Storage, Filestore"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Messaging"}),": Pub/Sub"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security"}),": Secret Manager, Cloud IAM, Cloud KMS"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Networking"}),": VPC, Cloud Load Balancer, Cloud CDN"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Infrastructure"}),": Terraform"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Monitoring"}),": Cloud Monitoring, Cloud Logging"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"required-tools",children:"Required Tools"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Install required tools (macOS)\nbrew install terraform\nbrew install google-cloud-sdk\nbrew install kubectl\nbrew install helm\n\n# Install required tools (Linux)\n# Terraform\nwget https://releases.hashicorp.com/terraform/1.6.2/terraform_1.6.2_linux_amd64.zip\nunzip terraform_1.6.2_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n\n# Google Cloud SDK\ncurl https://sdk.cloud.google.com | bash\nsource ~/.bashrc\n\n# kubectl\ncurl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n\n# Helm\ncurl https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz | tar xz\nsudo mv linux-amd64/helm /usr/local/bin/\n'})}),"\n",(0,o.jsx)(n.h3,{id:"gcp-project-setup",children:"GCP Project Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Authenticate with Google Cloud\ngcloud auth login\ngcloud auth application-default login\n\n# Set project\nexport PROJECT_ID="your-microservices-project"\ngcloud config set project $PROJECT_ID\n\n# Enable required APIs\ngcloud services enable \\\n    container.googleapis.com \\\n    compute.googleapis.com \\\n    cloudresourcemanager.googleapis.com \\\n    monitoring.googleapis.com \\\n    logging.googleapis.com \\\n    storage.googleapis.com \\\n    sql-component.googleapis.com \\\n    redis.googleapis.com \\\n    pubsub.googleapis.com \\\n    file.googleapis.com \\\n    run.googleapis.com \\\n    secretmanager.googleapis.com \\\n    artifactregistry.googleapis.com \\\n    cloudkms.googleapis.com \\\n    certificatemanager.googleapis.com \\\n    dns.googleapis.com\n'})}),"\n",(0,o.jsx)(n.h3,{id:"service-account-setup",children:"Service Account Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Create Terraform service account\ngcloud iam service-accounts create terraform-microservices \\\n    --description="Terraform service account for microservices infrastructure" \\\n    --display-name="Terraform Microservices"\n\n# Grant necessary roles\nROLES=(\n    "roles/editor"\n    "roles/container.admin"\n    "roles/compute.admin"\n    "roles/storage.admin"\n    "roles/sql.admin"\n    "roles/redis.admin"\n    "roles/pubsub.admin"\n    "roles/file.admin"\n    "roles/run.admin"\n    "roles/secretmanager.admin"\n    "roles/artifactregistry.admin"\n    "roles/cloudkms.admin"\n    "roles/iam.serviceAccountAdmin"\n    "roles/resourcemanager.projectIamAdmin"\n    "roles/dns.admin"\n)\n\nfor role in "${ROLES[@]}"; do\n    gcloud projects add-iam-policy-binding $PROJECT_ID \\\n        --member="serviceAccount:terraform-microservices@$PROJECT_ID.iam.gserviceaccount.com" \\\n        --role="$role"\ndone\n\n# Download service account key\ngcloud iam service-accounts keys create terraform-key.json \\\n    --iam-account=terraform-microservices@$PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/terraform-key.json"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Create project structure\nmkdir -p microservices-terraform/{modules,environments,scripts,k8s-manifests}\ncd microservices-terraform\n\n# Directory structure\nmkdir -p modules/{networking,gke,storage,databases,messaging,security,monitoring,cloudrun}\nmkdir -p environments/{dev,staging,prod}\nmkdir -p scripts/{deploy,backup,monitoring}\nmkdir -p k8s-manifests/{base,overlays}\n\ntree\n# microservices-terraform/\n# \u251c\u2500\u2500 main.tf\n# \u251c\u2500\u2500 variables.tf\n# \u251c\u2500\u2500 outputs.tf\n# \u251c\u2500\u2500 terraform.tfvars\n# \u251c\u2500\u2500 versions.tf\n# \u251c\u2500\u2500 modules/\n# \u2502   \u251c\u2500\u2500 networking/          # VPC, subnets, firewall rules\n# \u2502   \u251c\u2500\u2500 gke/                # GKE cluster and node pools\n# \u2502   \u251c\u2500\u2500 storage/            # Cloud Storage, Filestore\n# \u2502   \u251c\u2500\u2500 databases/          # Cloud SQL, Memorystore\n# \u2502   \u251c\u2500\u2500 messaging/          # Pub/Sub topics and subscriptions\n# \u2502   \u251c\u2500\u2500 security/           # Secret Manager, IAM, KMS\n# \u2502   \u251c\u2500\u2500 monitoring/         # Cloud Monitoring, Logging\n# \u2502   \u2514\u2500\u2500 cloudrun/           # Cloud Run services\n# \u251c\u2500\u2500 environments/\n# \u2502   \u251c\u2500\u2500 dev/                # Development environment\n# \u2502   \u251c\u2500\u2500 staging/            # Staging environment\n# \u2502   \u2514\u2500\u2500 prod/               # Production environment\n# \u251c\u2500\u2500 scripts/\n# \u2502   \u251c\u2500\u2500 deploy/             # Deployment scripts\n# \u2502   \u251c\u2500\u2500 backup/             # Backup scripts\n# \u2502   \u2514\u2500\u2500 monitoring/         # Monitoring scripts\n# \u2514\u2500\u2500 k8s-manifests/\n#     \u251c\u2500\u2500 base/               # Base Kubernetes manifests\n#     \u2514\u2500\u2500 overlays/           # Environment-specific overlays\n"})}),"\n",(0,o.jsx)(n.h2,{id:"core-infrastructure-setup",children:"Core Infrastructure Setup"}),"\n",(0,o.jsx)(n.h3,{id:"provider-configuration",children:"Provider Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# versions.tf\nterraform {\n  required_version = ">= 1.6"\n  \n  required_providers {\n    google = {\n      source  = "hashicorp/google"\n      version = "~> 5.0"\n    }\n    google-beta = {\n      source  = "hashicorp/google-beta"\n      version = "~> 5.0"\n    }\n    kubernetes = {\n      source  = "hashicorp/kubernetes"\n      version = "~> 2.23"\n    }\n    helm = {\n      source  = "hashicorp/helm"\n      version = "~> 2.11"\n    }\n  }\n\n  backend "gcs" {\n    bucket = "your-terraform-state-bucket"\n    prefix = "microservices"\n  }\n}\n\nprovider "google" {\n  project = var.project_id\n  region  = var.region\n}\n\nprovider "google-beta" {\n  project = var.project_id\n  region  = var.region\n}\n\ndata "google_client_config" "default" {}\n\nprovider "kubernetes" {\n  host                   = "https://${module.gke.cluster_endpoint}"\n  token                  = data.google_client_config.default.access_token\n  cluster_ca_certificate = base64decode(module.gke.cluster_ca_certificate)\n}\n\nprovider "helm" {\n  kubernetes {\n    host                   = "https://${module.gke.cluster_endpoint}"\n    token                  = data.google_client_config.default.access_token\n    cluster_ca_certificate = base64decode(module.gke.cluster_ca_certificate)\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"main-variables",children:"Main Variables"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n  default     = "us-central1"\n}\n\nvariable "zones" {\n  description = "The GCP zones"\n  type        = list(string)\n  default     = ["us-central1-a", "us-central1-b", "us-central1-c"]\n}\n\nvariable "environment" {\n  description = "Environment name (dev, staging, prod)"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n  default     = "microservices-app"\n}\n\n# Networking variables\nvariable "network_name" {\n  description = "VPC network name"\n  type        = string\n  default     = "microservices-network"\n}\n\nvariable "subnet_ranges" {\n  description = "Subnet CIDR ranges"\n  type = object({\n    public_subnet           = string\n    private_subnet          = string\n    database_subnet         = string\n    gke_pods_range         = string\n    gke_services_range     = string\n  })\n  default = {\n    public_subnet      = "10.1.0.0/24"\n    private_subnet     = "10.1.1.0/24"\n    database_subnet    = "10.1.2.0/24"\n    gke_pods_range     = "10.2.0.0/16"\n    gke_services_range = "10.3.0.0/16"\n  }\n}\n\n# GKE variables\nvariable "gke_config" {\n  description = "GKE cluster configuration"\n  type = object({\n    cluster_name           = string\n    kubernetes_version     = string\n    enable_private_nodes   = bool\n    enable_private_endpoint = bool\n    master_ipv4_cidr_block = string\n    enable_network_policy  = bool\n    enable_workload_identity = bool\n  })\n  default = {\n    cluster_name           = "microservices-cluster"\n    kubernetes_version     = "1.28"\n    enable_private_nodes   = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block = "172.16.0.0/28"\n    enable_network_policy  = true\n    enable_workload_identity = true\n  }\n}\n\nvariable "node_pools" {\n  description = "GKE node pool configurations"\n  type = map(object({\n    machine_type     = string\n    disk_size_gb     = number\n    disk_type        = string\n    image_type       = string\n    auto_repair      = bool\n    auto_upgrade     = bool\n    preemptible      = bool\n    min_count        = number\n    max_count        = number\n    initial_node_count = number\n    node_labels      = map(string)\n    node_taints = list(object({\n      key    = string\n      value  = string\n      effect = string\n    }))\n  }))\n  default = {\n    system = {\n      machine_type       = "e2-medium"\n      disk_size_gb       = 50\n      disk_type          = "pd-ssd"\n      image_type         = "COS_CONTAINERD"\n      auto_repair        = true\n      auto_upgrade       = true\n      preemptible        = false\n      min_count          = 1\n      max_count          = 3\n      initial_node_count = 2\n      node_labels = {\n        workload-type = "system"\n      }\n      node_taints = []\n    }\n    applications = {\n      machine_type       = "e2-standard-4"\n      disk_size_gb       = 100\n      disk_type          = "pd-ssd"\n      image_type         = "COS_CONTAINERD"\n      auto_repair        = true\n      auto_upgrade       = true\n      preemptible        = false\n      min_count          = 2\n      max_count          = 20\n      initial_node_count = 3\n      node_labels = {\n        workload-type = "applications"\n      }\n      node_taints = []\n    }\n    spot = {\n      machine_type       = "e2-standard-2"\n      disk_size_gb       = 50\n      disk_type          = "pd-standard"\n      image_type         = "COS_CONTAINERD"\n      auto_repair        = true\n      auto_upgrade       = true\n      preemptible        = true\n      min_count          = 0\n      max_count          = 50\n      initial_node_count = 0\n      node_labels = {\n        workload-type = "spot"\n      }\n      node_taints = [{\n        key    = "spot"\n        value  = "true"\n        effect = "NO_SCHEDULE"\n      }]\n    }\n  }\n}\n\n# Database variables\nvariable "database_config" {\n  description = "Database configuration"\n  type = object({\n    postgres_version     = string\n    postgres_tier        = string\n    postgres_disk_size   = number\n    postgres_disk_type   = string\n    redis_memory_size_gb = number\n    redis_tier           = string\n    redis_version        = string\n  })\n  default = {\n    postgres_version     = "15"\n    postgres_tier        = "db-custom-2-4096"\n    postgres_disk_size   = 100\n    postgres_disk_type   = "PD_SSD"\n    redis_memory_size_gb = 1\n    redis_tier           = "STANDARD_HA"\n    redis_version        = "REDIS_7_0"\n  }\n}\n\n# Storage variables\nvariable "storage_config" {\n  description = "Storage configuration"\n  type = object({\n    filestore_tier         = string\n    filestore_capacity_gb  = number\n    bucket_force_destroy   = bool\n    bucket_versioning      = bool\n  })\n  default = {\n    filestore_tier        = "STANDARD"\n    filestore_capacity_gb = 1024\n    bucket_force_destroy  = true\n    bucket_versioning     = true\n  }\n}\n\n# Cloud Run variables\nvariable "cloud_run_services" {\n  description = "Cloud Run service configurations"\n  type = map(object({\n    image           = string\n    port            = number\n    cpu             = string\n    memory          = string\n    min_instances   = number\n    max_instances   = number\n    concurrency     = number\n    timeout_seconds = number\n    env_vars        = map(string)\n  }))\n  default = {\n    gateway = {\n      image           = "gcr.io/PROJECT_ID/gateway:latest"\n      port            = 8080\n      cpu             = "1"\n      memory          = "512Mi"\n      min_instances   = 1\n      max_instances   = 10\n      concurrency     = 100\n      timeout_seconds = 300\n      env_vars = {\n        PORT = "8080"\n        ENV  = "production"\n      }\n    }\n    auth = {\n      image           = "gcr.io/PROJECT_ID/auth:latest"\n      port            = 8080\n      cpu             = "0.5"\n      memory          = "256Mi"\n      min_instances   = 0\n      max_instances   = 5\n      concurrency     = 50\n      timeout_seconds = 60\n      env_vars = {\n        PORT = "8080"\n        ENV  = "production"\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"main-terraform-configuration",children:"Main Terraform Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# main.tf\n# Enable required APIs\nresource "google_project_service" "required_apis" {\n  for_each = toset([\n    "container.googleapis.com",\n    "compute.googleapis.com",\n    "cloudresourcemanager.googleapis.com",\n    "monitoring.googleapis.com",\n    "logging.googleapis.com",\n    "storage.googleapis.com",\n    "sqladmin.googleapis.com",\n    "redis.googleapis.com",\n    "pubsub.googleapis.com",\n    "file.googleapis.com",\n    "run.googleapis.com",\n    "secretmanager.googleapis.com",\n    "artifactregistry.googleapis.com",\n    "cloudkms.googleapis.com",\n    "certificatemanager.googleapis.com",\n    "dns.googleapis.com"\n  ])\n\n  project = var.project_id\n  service = each.value\n\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\n# Networking\nmodule "networking" {\n  source = "./modules/networking"\n\n  project_id      = var.project_id\n  region          = var.region\n  network_name    = var.network_name\n  subnet_ranges   = var.subnet_ranges\n  environment     = var.environment\n\n  depends_on = [google_project_service.required_apis]\n}\n\n# Security (KMS, Secret Manager, IAM)\nmodule "security" {\n  source = "./modules/security"\n\n  project_id        = var.project_id\n  region            = var.region\n  environment       = var.environment\n  application_name  = var.application_name\n\n  depends_on = [google_project_service.required_apis]\n}\n\n# Artifact Registry\nmodule "artifact_registry" {\n  source = "./modules/artifact_registry"\n\n  project_id       = var.project_id\n  region           = var.region\n  environment      = var.environment\n  application_name = var.application_name\n\n  depends_on = [google_project_service.required_apis]\n}\n\n# GKE Cluster\nmodule "gke" {\n  source = "./modules/gke"\n\n  project_id          = var.project_id\n  region              = var.region\n  zones               = var.zones\n  network_id          = module.networking.network_id\n  subnet_id           = module.networking.private_subnet_id\n  gke_config          = var.gke_config\n  node_pools          = var.node_pools\n  environment         = var.environment\n  kms_key_ring_id     = module.security.kms_key_ring_id\n  kms_crypto_key_id   = module.security.kms_crypto_key_id\n\n  depends_on = [module.networking, module.security]\n}\n\n# Databases (Cloud SQL PostgreSQL and Memorystore Redis)\nmodule "databases" {\n  source = "./modules/databases"\n\n  project_id              = var.project_id\n  region                  = var.region\n  network_id              = module.networking.network_id\n  database_subnet_id      = module.networking.database_subnet_id\n  database_config         = var.database_config\n  environment             = var.environment\n  application_name        = var.application_name\n  kms_crypto_key_id       = module.security.kms_crypto_key_id\n\n  depends_on = [module.networking, module.security]\n}\n\n# Storage (Cloud Storage and Filestore)\nmodule "storage" {\n  source = "./modules/storage"\n\n  project_id        = var.project_id\n  region            = var.region\n  network_id        = module.networking.network_id\n  storage_config    = var.storage_config\n  environment       = var.environment\n  application_name  = var.application_name\n  kms_crypto_key_id = module.security.kms_crypto_key_id\n\n  depends_on = [module.networking, module.security]\n}\n\n# Messaging (Pub/Sub)\nmodule "messaging" {\n  source = "./modules/messaging"\n\n  project_id        = var.project_id\n  environment       = var.environment\n  application_name  = var.application_name\n  kms_crypto_key_id = module.security.kms_crypto_key_id\n\n  depends_on = [module.security]\n}\n\n# Cloud Run Services\nmodule "cloudrun" {\n  source = "./modules/cloudrun"\n\n  project_id          = var.project_id\n  region              = var.region\n  cloud_run_services  = var.cloud_run_services\n  environment         = var.environment\n  application_name    = var.application_name\n  artifact_registry_url = module.artifact_registry.repository_url\n\n  depends_on = [module.artifact_registry, module.security]\n}\n\n# Monitoring and Logging\nmodule "monitoring" {\n  source = "./modules/monitoring"\n\n  project_id       = var.project_id\n  region           = var.region\n  environment      = var.environment\n  application_name = var.application_name\n  gke_cluster_name = module.gke.cluster_name\n\n  depends_on = [module.gke]\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"networking-module",children:"Networking Module"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/networking/main.tf\n# VPC Network\nresource "google_compute_network" "vpc" {\n  name                    = "${var.network_name}-${var.environment}"\n  auto_create_subnetworks = false\n  description             = "VPC network for ${var.environment} microservices"\n}\n\n# Public Subnet (for load balancers, NAT gateways)\nresource "google_compute_subnetwork" "public_subnet" {\n  name          = "${var.network_name}-public-${var.environment}"\n  ip_cidr_range = var.subnet_ranges.public_subnet\n  region        = var.region\n  network       = google_compute_network.vpc.id\n  description   = "Public subnet for ${var.environment}"\n\n  log_config {\n    aggregation_interval = "INTERVAL_10_MIN"\n    flow_sampling        = 0.5\n    metadata             = "INCLUDE_ALL_METADATA"\n  }\n}\n\n# Private Subnet (for GKE nodes, Cloud Run, VMs)\nresource "google_compute_subnetwork" "private_subnet" {\n  name          = "${var.network_name}-private-${var.environment}"\n  ip_cidr_range = var.subnet_ranges.private_subnet\n  region        = var.region\n  network       = google_compute_network.vpc.id\n  description   = "Private subnet for ${var.environment} microservices"\n\n  # Secondary ranges for GKE\n  secondary_ip_range {\n    range_name    = "gke-pods-${var.environment}"\n    ip_cidr_range = var.subnet_ranges.gke_pods_range\n  }\n\n  secondary_ip_range {\n    range_name    = "gke-services-${var.environment}"\n    ip_cidr_range = var.subnet_ranges.gke_services_range\n  }\n\n  private_ip_google_access = true\n\n  log_config {\n    aggregation_interval = "INTERVAL_10_MIN"\n    flow_sampling        = 0.5\n    metadata             = "INCLUDE_ALL_METADATA"\n  }\n}\n\n# Database Subnet (for Cloud SQL, Memorystore)\nresource "google_compute_subnetwork" "database_subnet" {\n  name          = "${var.network_name}-database-${var.environment}"\n  ip_cidr_range = var.subnet_ranges.database_subnet\n  region        = var.region\n  network       = google_compute_network.vpc.id\n  description   = "Database subnet for ${var.environment}"\n\n  private_ip_google_access = true\n\n  log_config {\n    aggregation_interval = "INTERVAL_10_MIN"\n    flow_sampling        = 0.5\n    metadata             = "INCLUDE_ALL_METADATA"\n  }\n}\n\n# Cloud Router for NAT\nresource "google_compute_router" "router" {\n  name    = "${var.network_name}-router-${var.environment}"\n  region  = var.region\n  network = google_compute_network.vpc.id\n  \n  bgp {\n    asn = 64514\n  }\n}\n\n# Cloud NAT for private subnet internet access\nresource "google_compute_router_nat" "nat" {\n  name                               = "${var.network_name}-nat-${var.environment}"\n  router                             = google_compute_router.router.name\n  region                             = var.region\n  nat_ip_allocate_option            = "AUTO_ONLY"\n  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"\n\n  log_config {\n    enable = true\n    filter = "ERRORS_ONLY"\n  }\n}\n\n# Global IP for load balancer\nresource "google_compute_global_address" "lb_ip" {\n  name         = "${var.network_name}-lb-ip-${var.environment}"\n  description  = "Global IP for load balancer in ${var.environment}"\n  ip_version   = "IPV4"\n  address_type = "EXTERNAL"\n}\n\n# Firewall Rules\nresource "google_compute_firewall" "allow_internal" {\n  name    = "${var.network_name}-allow-internal-${var.environment}"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "icmp"\n  }\n\n  allow {\n    protocol = "tcp"\n    ports    = ["0-65535"]\n  }\n\n  allow {\n    protocol = "udp"\n    ports    = ["0-65535"]\n  }\n\n  source_ranges = [\n    var.subnet_ranges.public_subnet,\n    var.subnet_ranges.private_subnet,\n    var.subnet_ranges.database_subnet,\n    var.subnet_ranges.gke_pods_range,\n    var.subnet_ranges.gke_services_range\n  ]\n\n  target_tags = ["internal"]\n  description = "Allow internal communication within VPC"\n}\n\nresource "google_compute_firewall" "allow_ssh" {\n  name    = "${var.network_name}-allow-ssh-${var.environment}"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "tcp"\n    ports    = ["22"]\n  }\n\n  source_ranges = ["0.0.0.0/0"]\n  target_tags   = ["ssh-allowed"]\n  description   = "Allow SSH access"\n}\n\nresource "google_compute_firewall" "allow_http_https" {\n  name    = "${var.network_name}-allow-http-https-${var.environment}"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "tcp"\n    ports    = ["80", "443"]\n  }\n\n  source_ranges = ["0.0.0.0/0"]\n  target_tags   = ["http-server", "https-server"]\n  description   = "Allow HTTP and HTTPS traffic"\n}\n\nresource "google_compute_firewall" "allow_gke_webhook" {\n  name    = "${var.network_name}-allow-gke-webhook-${var.environment}"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "tcp"\n    ports    = ["443", "8443", "9443", "15017"]\n  }\n\n  source_ranges = ["172.16.0.0/28"] # Master CIDR\n  target_tags   = ["gke-node"]\n  description   = "Allow GKE master to communicate with nodes"\n}\n\n# Private Service Connection for Cloud SQL\nresource "google_compute_global_address" "private_service_connection" {\n  name          = "${var.network_name}-private-service-${var.environment}"\n  purpose       = "VPC_PEERING"\n  address_type  = "INTERNAL"\n  prefix_length = 16\n  network       = google_compute_network.vpc.id\n  description   = "Private service connection for ${var.environment}"\n}\n\nresource "google_service_networking_connection" "private_vpc_connection" {\n  network                 = google_compute_network.vpc.id\n  service                 = "servicenetworking.googleapis.com"\n  reserved_peering_ranges = [google_compute_global_address.private_service_connection.name]\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/networking/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "network_name" {\n  description = "Name of the VPC network"\n  type        = string\n}\n\nvariable "subnet_ranges" {\n  description = "Subnet CIDR ranges"\n  type = object({\n    public_subnet      = string\n    private_subnet     = string\n    database_subnet    = string\n    gke_pods_range     = string\n    gke_services_range = string\n  })\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/networking/outputs.tf\noutput "network_id" {\n  description = "The ID of the VPC network"\n  value       = google_compute_network.vpc.id\n}\n\noutput "network_name" {\n  description = "The name of the VPC network"\n  value       = google_compute_network.vpc.name\n}\n\noutput "public_subnet_id" {\n  description = "The ID of the public subnet"\n  value       = google_compute_subnetwork.public_subnet.id\n}\n\noutput "private_subnet_id" {\n  description = "The ID of the private subnet"\n  value       = google_compute_subnetwork.private_subnet.id\n}\n\noutput "database_subnet_id" {\n  description = "The ID of the database subnet"\n  value       = google_compute_subnetwork.database_subnet.id\n}\n\noutput "gke_pods_range_name" {\n  description = "Name of the GKE pods secondary range"\n  value       = "gke-pods-${var.environment}"\n}\n\noutput "gke_services_range_name" {\n  description = "Name of the GKE services secondary range"\n  value       = "gke-services-${var.environment}"\n}\n\noutput "global_lb_ip" {\n  description = "Global load balancer IP"\n  value       = google_compute_global_address.lb_ip.address\n}\n\noutput "private_service_connection" {\n  description = "Private service connection"\n  value       = google_service_networking_connection.private_vpc_connection\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"artifact-registry-configuration",children:"Artifact Registry Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"artifact-registry-module",children:"Artifact Registry Module"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/artifact_registry/main.tf\n# Docker repository for container images\nresource "google_artifact_registry_repository" "docker_repo" {\n  location      = var.region\n  repository_id = "${var.application_name}-docker-${var.environment}"\n  description   = "Docker repository for ${var.application_name} in ${var.environment}"\n  format        = "DOCKER"\n\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    managed_by  = "terraform"\n  }\n}\n\n# Helm repository for Helm charts\nresource "google_artifact_registry_repository" "helm_repo" {\n  location      = var.region\n  repository_id = "${var.application_name}-helm-${var.environment}"\n  description   = "Helm repository for ${var.application_name} in ${var.environment}"\n  format        = "DOCKER"  # Helm charts are stored as OCI artifacts\n\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    managed_by  = "terraform"\n    type        = "helm-charts"\n  }\n}\n\n# IAM bindings for Artifact Registry\nresource "google_artifact_registry_repository_iam_member" "docker_reader" {\n  project    = var.project_id\n  location   = google_artifact_registry_repository.docker_repo.location\n  repository = google_artifact_registry_repository.docker_repo.name\n  role       = "roles/artifactregistry.reader"\n  member     = "serviceAccount:${var.project_id}-compute@developer.gserviceaccount.com"\n}\n\nresource "google_artifact_registry_repository_iam_member" "docker_writer" {\n  project    = var.project_id\n  location   = google_artifact_registry_repository.docker_repo.location\n  repository = google_artifact_registry_repository.docker_repo.name\n  role       = "roles/artifactregistry.writer"\n  member     = "serviceAccount:${var.project_id}-compute@developer.gserviceaccount.com"\n}\n\n# Service account for CI/CD pipeline\nresource "google_service_account" "artifact_registry_sa" {\n  account_id   = "${var.application_name}-ar-${var.environment}"\n  display_name = "Artifact Registry Service Account for ${var.environment}"\n  description  = "Service account for pushing to Artifact Registry in ${var.environment}"\n}\n\nresource "google_service_account_key" "artifact_registry_key" {\n  service_account_id = google_service_account.artifact_registry_sa.name\n}\n\nresource "google_artifact_registry_repository_iam_member" "ci_writer" {\n  project    = var.project_id\n  location   = google_artifact_registry_repository.docker_repo.location\n  repository = google_artifact_registry_repository.docker_repo.name\n  role       = "roles/artifactregistry.writer"\n  member     = "serviceAccount:${google_service_account.artifact_registry_sa.email}"\n}\n\nresource "google_artifact_registry_repository_iam_member" "helm_ci_writer" {\n  project    = var.project_id\n  location   = google_artifact_registry_repository.helm_repo.location\n  repository = google_artifact_registry_repository.helm_repo.name\n  role       = "roles/artifactregistry.writer"\n  member     = "serviceAccount:${google_service_account.artifact_registry_sa.email}"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/artifact_registry/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/artifact_registry/outputs.tf\noutput "docker_repository_url" {\n  description = "Docker repository URL"\n  value       = "${google_artifact_registry_repository.docker_repo.location}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.docker_repo.repository_id}"\n}\n\noutput "helm_repository_url" {\n  description = "Helm repository URL"\n  value       = "${google_artifact_registry_repository.helm_repo.location}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.helm_repo.repository_id}"\n}\n\noutput "repository_url" {\n  description = "Main repository URL (alias for docker_repository_url)"\n  value       = "${google_artifact_registry_repository.docker_repo.location}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.docker_repo.repository_id}"\n}\n\noutput "service_account_email" {\n  description = "Service account email for CI/CD"\n  value       = google_service_account.artifact_registry_sa.email\n}\n\noutput "service_account_key" {\n  description = "Service account key for CI/CD"\n  value       = google_service_account_key.artifact_registry_key.private_key\n  sensitive   = true\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"security-module",children:"Security Module"}),"\n",(0,o.jsx)(n.h3,{id:"kms-secret-manager-and-iam-configuration",children:"KMS, Secret Manager, and IAM Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/security/main.tf\n# KMS Key Ring\nresource "google_kms_key_ring" "key_ring" {\n  name     = "${var.application_name}-keyring-${var.environment}"\n  location = var.region\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\n# KMS Crypto Key for database encryption\nresource "google_kms_crypto_key" "database_key" {\n  name     = "${var.application_name}-database-key-${var.environment}"\n  key_ring = google_kms_key_ring.key_ring.id\n  purpose  = "ENCRYPT_DECRYPT"\n\n  version_template {\n    algorithm = "GOOGLE_SYMMETRIC_ENCRYPTION"\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\n# KMS Crypto Key for application secrets\nresource "google_kms_crypto_key" "secrets_key" {\n  name     = "${var.application_name}-secrets-key-${var.environment}"\n  key_ring = google_kms_key_ring.key_ring.id\n  purpose  = "ENCRYPT_DECRYPT"\n\n  version_template {\n    algorithm = "GOOGLE_SYMMETRIC_ENCRYPTION"\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\n# Secret Manager secrets\nresource "google_secret_manager_secret" "database_password" {\n  secret_id = "${var.application_name}-db-password-${var.environment}"\n  \n  labels = {\n    environment = var.environment\n    application = var.application_name\n    type        = "database"\n  }\n\n  replication {\n    auto {}\n  }\n}\n\nresource "google_secret_manager_secret_version" "database_password_version" {\n  secret      = google_secret_manager_secret.database_password.id\n  secret_data = random_password.database_password.result\n}\n\nresource "random_password" "database_password" {\n  length  = 32\n  special = true\n}\n\n# JWT secret for authentication\nresource "google_secret_manager_secret" "jwt_secret" {\n  secret_id = "${var.application_name}-jwt-secret-${var.environment}"\n  \n  labels = {\n    environment = var.environment\n    application = var.application_name\n    type        = "authentication"\n  }\n\n  replication {\n    auto {}\n  }\n}\n\nresource "google_secret_manager_secret_version" "jwt_secret_version" {\n  secret      = google_secret_manager_secret.jwt_secret.id\n  secret_data = random_password.jwt_secret.result\n}\n\nresource "random_password" "jwt_secret" {\n  length  = 64\n  special = true\n}\n\n# API keys for external services\nresource "google_secret_manager_secret" "external_api_keys" {\n  for_each = toset([\n    "stripe-api-key",\n    "sendgrid-api-key",\n    "oauth-google-secret",\n    "oauth-github-secret"\n  ])\n\n  secret_id = "${var.application_name}-${each.key}-${var.environment}"\n  \n  labels = {\n    environment = var.environment\n    application = var.application_name\n    type        = "api-key"\n  }\n\n  replication {\n    auto {}\n  }\n}\n\n# Service accounts for microservices\nresource "google_service_account" "microservice_accounts" {\n  for_each = toset([\n    "user-service",\n    "order-service",\n    "payment-service",\n    "notification-service",\n    "gateway-service"\n  ])\n\n  account_id   = "${var.application_name}-${each.key}-${var.environment}"\n  display_name = "Service Account for ${each.key} in ${var.environment}"\n  description  = "Service account for ${each.key} microservice"\n}\n\n# IAM roles for microservices\nresource "google_project_iam_member" "microservice_permissions" {\n  for_each = {\n    for pair in setproduct(\n      keys(google_service_account.microservice_accounts),\n      ["roles/secretmanager.secretAccessor", "roles/cloudsql.client", "roles/pubsub.publisher", "roles/pubsub.subscriber"]\n    ) : "${pair[0]}-${pair[1]}" => {\n      service_account = pair[0]\n      role           = pair[1]\n    }\n  }\n\n  project = var.project_id\n  role    = each.value.role\n  member  = "serviceAccount:${google_service_account.microservice_accounts[each.value.service_account].email}"\n}\n\n# Workload Identity bindings\nresource "google_service_account_iam_member" "workload_identity_bindings" {\n  for_each = google_service_account.microservice_accounts\n\n  service_account_id = each.value.name\n  role               = "roles/iam.workloadIdentityUser"\n  member             = "serviceAccount:${var.project_id}.svc.id.goog[${var.environment}/${each.key}]"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/security/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/security/outputs.tf\noutput "kms_key_ring_id" {\n  description = "KMS key ring ID"\n  value       = google_kms_key_ring.key_ring.id\n}\n\noutput "kms_crypto_key_id" {\n  description = "KMS crypto key ID for database"\n  value       = google_kms_crypto_key.database_key.id\n}\n\noutput "secrets_kms_key_id" {\n  description = "KMS crypto key ID for secrets"\n  value       = google_kms_crypto_key.secrets_key.id\n}\n\noutput "database_password_secret_id" {\n  description = "Database password secret ID"\n  value       = google_secret_manager_secret.database_password.id\n}\n\noutput "jwt_secret_id" {\n  description = "JWT secret ID"\n  value       = google_secret_manager_secret.jwt_secret.id\n}\n\noutput "microservice_service_accounts" {\n  description = "Microservice service accounts"\n  value = {\n    for name, sa in google_service_account.microservice_accounts : name => {\n      email = sa.email\n      id    = sa.id\n    }\n  }\n}\n\noutput "external_api_secrets" {\n  description = "External API secrets"\n  value = {\n    for name, secret in google_secret_manager_secret.external_api_keys : name => secret.id\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"databases-module",children:"Databases Module"}),"\n",(0,o.jsx)(n.h3,{id:"cloud-sql-postgresql-and-memorystore-redis",children:"Cloud SQL PostgreSQL and Memorystore Redis"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/databases/main.tf\n# Cloud SQL PostgreSQL instance\nresource "google_sql_database_instance" "postgres" {\n  name             = "${var.application_name}-postgres-${var.environment}"\n  database_version = "POSTGRES_${var.database_config.postgres_version}"\n  region          = var.region\n  \n  deletion_protection = var.environment == "prod" ? true : false\n\n  settings {\n    tier              = var.database_config.postgres_tier\n    availability_type = var.environment == "prod" ? "REGIONAL" : "ZONAL"\n    disk_type         = var.database_config.postgres_disk_type\n    disk_size         = var.database_config.postgres_disk_size\n    disk_autoresize   = true\n\n    # IP configuration\n    ip_configuration {\n      ipv4_enabled                                  = false\n      private_network                               = var.network_id\n      enable_private_path_for_google_cloud_services = true\n    }\n\n    # Backup configuration\n    backup_configuration {\n      enabled                        = true\n      start_time                     = "02:00"\n      point_in_time_recovery_enabled = true\n      transaction_log_retention_days = 7\n      backup_retention_settings {\n        retained_backups = 30\n        retention_unit   = "COUNT"\n      }\n    }\n\n    # Maintenance window\n    maintenance_window {\n      day          = 7 # Sunday\n      hour         = 3\n      update_track = "stable"\n    }\n\n    # Database flags for performance tuning\n    database_flags {\n      name  = "shared_preload_libraries"\n      value = "pg_stat_statements,pg_hint_plan"\n    }\n\n    database_flags {\n      name  = "log_statement"\n      value = "all"\n    }\n\n    database_flags {\n      name  = "log_min_duration_statement"\n      value = "1000"\n    }\n\n    # Insights configuration\n    insights_config {\n      query_insights_enabled  = true\n      record_application_tags = true\n      record_client_address   = true\n    }\n\n    # User labels\n    user_labels = {\n      environment = var.environment\n      application = var.application_name\n      managed_by  = "terraform"\n    }\n  }\n\n  # Encryption\n  encryption_key_name = var.kms_crypto_key_id\n\n  depends_on = [var.private_service_connection]\n}\n\n# Databases for microservices\nresource "google_sql_database" "microservice_databases" {\n  for_each = toset([\n    "users",\n    "orders", \n    "payments",\n    "notifications",\n    "audit"\n  ])\n\n  name     = "${each.key}_${var.environment}"\n  instance = google_sql_database_instance.postgres.name\n}\n\n# Database users for microservices\nresource "google_sql_user" "microservice_users" {\n  for_each = toset([\n    "user_service",\n    "order_service",\n    "payment_service", \n    "notification_service"\n  ])\n\n  name     = "${each.key}_${var.environment}"\n  instance = google_sql_database_instance.postgres.name\n  password = random_password.db_passwords[each.key].result\n}\n\nresource "random_password" "db_passwords" {\n  for_each = toset([\n    "user_service",\n    "order_service", \n    "payment_service",\n    "notification_service"\n  ])\n\n  length  = 32\n  special = true\n}\n\n# Store database passwords in Secret Manager\nresource "google_secret_manager_secret" "db_passwords" {\n  for_each = random_password.db_passwords\n\n  secret_id = "${var.application_name}-${each.key}-db-password-${var.environment}"\n  \n  labels = {\n    environment = var.environment\n    application = var.application_name\n    service     = each.key\n    type        = "database-password"\n  }\n\n  replication {\n    auto {}\n  }\n}\n\nresource "google_secret_manager_secret_version" "db_password_versions" {\n  for_each = google_secret_manager_secret.db_passwords\n\n  secret      = each.value.id\n  secret_data = random_password.db_passwords[each.key].result\n}\n\n# Redis Memorystore instance\nresource "google_redis_instance" "cache" {\n  name           = "${var.application_name}-redis-${var.environment}"\n  memory_size_gb = var.database_config.redis_memory_size_gb\n  tier           = var.database_config.redis_tier\n  redis_version  = var.database_config.redis_version\n  region         = var.region\n\n  # Network configuration\n  authorized_network      = var.network_id\n  connect_mode           = "PRIVATE_SERVICE_ACCESS"\n  redis_configs = {\n    maxmemory-policy = "allkeys-lru"\n    notify-keyspace-events = "Ex"\n  }\n\n  # Maintenance policy\n  maintenance_policy {\n    weekly_maintenance_window {\n      day = "SUNDAY"\n      start_time {\n        hours   = 3\n        minutes = 0\n        seconds = 0\n        nanos   = 0\n      }\n    }\n  }\n\n  # High availability for production\n  replica_count = var.environment == "prod" ? 1 : 0\n  read_replicas_mode = var.environment == "prod" ? "READ_REPLICAS_ENABLED" : "READ_REPLICAS_DISABLED"\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    managed_by  = "terraform"\n  }\n}\n\n# Redis configuration secret\nresource "google_secret_manager_secret" "redis_config" {\n  secret_id = "${var.application_name}-redis-config-${var.environment}"\n  \n  labels = {\n    environment = var.environment\n    application = var.application_name\n    type        = "redis-config"\n  }\n\n  replication {\n    auto {}\n  }\n}\n\nresource "google_secret_manager_secret_version" "redis_config_version" {\n  secret = google_secret_manager_secret.redis_config.id\n  secret_data = jsonencode({\n    host = google_redis_instance.cache.host\n    port = google_redis_instance.cache.port\n    auth_enabled = google_redis_instance.cache.auth_enabled\n  })\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/databases/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "network_id" {\n  description = "The ID of the VPC network"\n  type        = string\n}\n\nvariable "database_subnet_id" {\n  description = "The ID of the database subnet"\n  type        = string\n}\n\nvariable "database_config" {\n  description = "Database configuration"\n  type = object({\n    postgres_version     = string\n    postgres_tier        = string\n    postgres_disk_size   = number\n    postgres_disk_type   = string\n    redis_memory_size_gb = number\n    redis_tier           = string\n    redis_version        = string\n  })\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "kms_crypto_key_id" {\n  description = "KMS crypto key ID"\n  type        = string\n}\n\nvariable "private_service_connection" {\n  description = "Private service connection"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/databases/outputs.tf\noutput "postgres_instance_name" {\n  description = "PostgreSQL instance name"\n  value       = google_sql_database_instance.postgres.name\n}\n\noutput "postgres_connection_name" {\n  description = "PostgreSQL connection name"\n  value       = google_sql_database_instance.postgres.connection_name\n}\n\noutput "postgres_private_ip" {\n  description = "PostgreSQL private IP address"\n  value       = google_sql_database_instance.postgres.private_ip_address\n}\n\noutput "redis_host" {\n  description = "Redis host"\n  value       = google_redis_instance.cache.host\n}\n\noutput "redis_port" {\n  description = "Redis port"\n  value       = google_redis_instance.cache.port\n}\n\noutput "database_names" {\n  description = "Database names"\n  value = {\n    for db_name, db in google_sql_database.microservice_databases : db_name => db.name\n  }\n}\n\noutput "redis_config_secret_id" {\n  description = "Redis configuration secret ID"\n  value       = google_secret_manager_secret.redis_config.id\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"storage-module",children:"Storage Module"}),"\n",(0,o.jsx)(n.h3,{id:"cloud-storage-and-filestore-configuration",children:"Cloud Storage and Filestore Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/storage/main.tf\n# Cloud Storage buckets for different purposes\nresource "google_storage_bucket" "app_buckets" {\n  for_each = {\n    "static-assets" = {\n      description = "Static assets bucket"\n      public_read = true\n      lifecycle_rules = [{\n        action = { type = "Delete" }\n        condition = { age = 90 }\n      }]\n    }\n    "user-uploads" = {\n      description = "User uploads bucket"\n      public_read = false\n      lifecycle_rules = [{\n        action = { type = "SetStorageClass", storage_class = "COLDLINE" }\n        condition = { age = 30 }\n      }]\n    }\n    "backups" = {\n      description = "Database and application backups"\n      public_read = false\n      lifecycle_rules = [{\n        action = { type = "SetStorageClass", storage_class = "ARCHIVE" }\n        condition = { age = 7 }\n      }]\n    }\n    "logs" = {\n      description = "Application and audit logs"\n      public_read = false\n      lifecycle_rules = [{\n        action = { type = "Delete" }\n        condition = { age = 365 }\n      }]\n    }\n    "data-lake" = {\n      description = "Data lake for analytics"\n      public_read = false\n      lifecycle_rules = [{\n        action = { type = "SetStorageClass", storage_class = "NEARLINE" }\n        condition = { age = 30 }\n      }]\n    }\n  }\n\n  name          = "${var.application_name}-${each.key}-${var.environment}"\n  location      = var.region\n  force_destroy = var.storage_config.bucket_force_destroy\n\n  # Uniform bucket-level access\n  uniform_bucket_level_access = true\n\n  # Versioning\n  versioning {\n    enabled = var.storage_config.bucket_versioning\n  }\n\n  # Encryption\n  encryption {\n    default_kms_key_name = var.kms_crypto_key_id\n  }\n\n  # Lifecycle management\n  dynamic "lifecycle_rule" {\n    for_each = each.value.lifecycle_rules\n    content {\n      action {\n        type          = lifecycle_rule.value.action.type\n        storage_class = lookup(lifecycle_rule.value.action, "storage_class", null)\n      }\n      condition {\n        age = lifecycle_rule.value.condition.age\n      }\n    }\n  }\n\n  # CORS configuration for static assets\n  dynamic "cors" {\n    for_each = each.key == "static-assets" ? [1] : []\n    content {\n      origin          = ["*"]\n      method          = ["GET", "HEAD"]\n      response_header = ["*"]\n      max_age_seconds = 3600\n    }\n  }\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    purpose     = each.key\n    managed_by  = "terraform"\n  }\n}\n\n# Public access for static assets bucket\nresource "google_storage_bucket_iam_member" "static_assets_public_read" {\n  bucket = google_storage_bucket.app_buckets["static-assets"].name\n  role   = "roles/storage.objectViewer"\n  member = "allUsers"\n}\n\n# Filestore instance for shared storage\nresource "google_filestore_instance" "shared_storage" {\n  name     = "${var.application_name}-filestore-${var.environment}"\n  location = var.region\n  tier     = var.storage_config.filestore_tier\n\n  file_shares {\n    capacity_gb = var.storage_config.filestore_capacity_gb\n    name        = "shared"\n  }\n\n  networks {\n    network = var.network_id\n    modes   = ["MODE_IPV4"]\n  }\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    managed_by  = "terraform"\n  }\n}\n\n# Service accounts for storage access\nresource "google_service_account" "storage_service_accounts" {\n  for_each = toset([\n    "static-assets",\n    "user-uploads", \n    "backups",\n    "logs"\n  ])\n\n  account_id   = "${var.application_name}-${each.key}-sa-${var.environment}"\n  display_name = "Service Account for ${each.key} storage"\n  description  = "Service account for accessing ${each.key} bucket"\n}\n\n# IAM bindings for storage service accounts\nresource "google_storage_bucket_iam_member" "storage_access" {\n  for_each = google_service_account.storage_service_accounts\n\n  bucket = google_storage_bucket.app_buckets[each.key].name\n  role   = "roles/storage.objectAdmin"\n  member = "serviceAccount:${each.value.email}"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/storage/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "network_id" {\n  description = "The ID of the VPC network"\n  type        = string\n}\n\nvariable "storage_config" {\n  description = "Storage configuration"\n  type = object({\n    filestore_tier        = string\n    filestore_capacity_gb = number\n    bucket_force_destroy  = bool\n    bucket_versioning     = bool\n  })\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "kms_crypto_key_id" {\n  description = "KMS crypto key ID"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/storage/outputs.tf\noutput "bucket_names" {\n  description = "Storage bucket names"\n  value = {\n    for name, bucket in google_storage_bucket.app_buckets : name => bucket.name\n  }\n}\n\noutput "bucket_urls" {\n  description = "Storage bucket URLs"\n  value = {\n    for name, bucket in google_storage_bucket.app_buckets : name => bucket.url\n  }\n}\n\noutput "filestore_ip" {\n  description = "Filestore IP address"\n  value       = google_filestore_instance.shared_storage.networks[0].ip_addresses[0]\n}\n\noutput "filestore_name" {\n  description = "Filestore instance name"\n  value       = google_filestore_instance.shared_storage.name\n}\n\noutput "storage_service_accounts" {\n  description = "Storage service account emails"\n  value = {\n    for name, sa in google_service_account.storage_service_accounts : name => sa.email\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"messaging-module",children:"Messaging Module"}),"\n",(0,o.jsx)(n.h3,{id:"pubsub-configuration",children:"Pub/Sub Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/messaging/main.tf\n# Pub/Sub topics for microservices communication\nresource "google_pubsub_topic" "topics" {\n  for_each = {\n    "user-events" = {\n      description = "User lifecycle events (created, updated, deleted)"\n      retention   = "604800s" # 7 days\n    }\n    "order-events" = {\n      description = "Order lifecycle events (created, updated, cancelled, completed)"\n      retention   = "2592000s" # 30 days\n    }\n    "payment-events" = {\n      description = "Payment events (initiated, completed, failed, refunded)"\n      retention   = "2592000s" # 30 days\n    }\n    "notification-events" = {\n      description = "Notification events (email, sms, push)"\n      retention   = "259200s" # 3 days\n    }\n    "audit-events" = {\n      description = "Audit trail events for compliance"\n      retention   = "7776000s" # 90 days\n    }\n    "analytics-events" = {\n      description = "Analytics and tracking events"\n      retention   = "1209600s" # 14 days\n    }\n    "dead-letter" = {\n      description = "Dead letter queue for failed message processing"\n      retention   = "2592000s" # 30 days\n    }\n  }\n\n  name = "${var.application_name}-${each.key}-${var.environment}"\n\n  # Message retention duration\n  message_retention_duration = each.value.retention\n\n  # Encryption\n  kms_key_name = var.kms_crypto_key_id\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    purpose     = each.key\n    managed_by  = "terraform"\n  }\n}\n\n# Pub/Sub subscriptions for microservices\nresource "google_pubsub_subscription" "subscriptions" {\n  for_each = {\n    # User service subscriptions\n    "user-service-user-events" = {\n      topic                = "user-events"\n      ack_deadline_seconds = 20\n      dead_letter_topic    = "dead-letter"\n      filter              = ""\n    }\n    \n    # Order service subscriptions\n    "order-service-user-events" = {\n      topic                = "user-events"\n      ack_deadline_seconds = 30\n      dead_letter_topic    = "dead-letter"\n      filter              = "attributes.event_type = \\"created\\" OR attributes.event_type = \\"updated\\""\n    }\n    "order-service-payment-events" = {\n      topic                = "payment-events"\n      ack_deadline_seconds = 30\n      dead_letter_topic    = "dead-letter"\n      filter              = "attributes.event_type = \\"completed\\" OR attributes.event_type = \\"failed\\""\n    }\n    \n    # Payment service subscriptions\n    "payment-service-order-events" = {\n      topic                = "order-events"\n      ack_deadline_seconds = 60\n      dead_letter_topic    = "dead-letter"\n      filter              = "attributes.event_type = \\"created\\""\n    }\n    \n    # Notification service subscriptions\n    "notification-service-user-events" = {\n      topic                = "user-events"\n      ack_deadline_seconds = 20\n      dead_letter_topic    = "dead-letter"\n      filter              = ""\n    }\n    "notification-service-order-events" = {\n      topic                = "order-events"\n      ack_deadline_seconds = 20\n      dead_letter_topic    = "dead-letter"\n      filter              = ""\n    }\n    "notification-service-payment-events" = {\n      topic                = "payment-events"\n      ack_deadline_seconds = 20\n      dead_letter_topic    = "dead-letter"\n      filter              = ""\n    }\n  }\n\n  name  = "${var.application_name}-${each.key}-${var.environment}"\n  topic = google_pubsub_topic.topics[each.value.topic].name\n\n  # Acknowledgment deadline\n  ack_deadline_seconds = each.value.ack_deadline_seconds\n\n  # Message filtering\n  filter = each.value.filter != "" ? each.value.filter : null\n\n  # Dead letter policy\n  dead_letter_policy {\n    dead_letter_topic     = google_pubsub_topic.topics[each.value.dead_letter_topic].id\n    max_delivery_attempts = 5\n  }\n\n  # Retry policy\n  retry_policy {\n    minimum_backoff = "10s"\n    maximum_backoff = "600s"\n  }\n\n  # Enable message ordering for critical subscriptions\n  enable_message_ordering = contains([\n    "order-service-payment-events",\n    "payment-service-order-events"\n  ], each.key)\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    service     = split("-", each.key)[0]\n    managed_by  = "terraform"\n  }\n}\n\n# IAM bindings for Pub/Sub access\nresource "google_pubsub_topic_iam_member" "publishers" {\n  for_each = {\n    for pair in setproduct(\n      keys(google_pubsub_topic.topics),\n      ["user-service", "order-service", "payment-service", "notification-service"]\n    ) : "${pair[1]}-${pair[0]}" => {\n      topic   = pair[0]\n      service = pair[1]\n    }\n  }\n\n  topic  = google_pubsub_topic.topics[each.value.topic].name\n  role   = "roles/pubsub.publisher"\n  member = "serviceAccount:${var.application_name}-${each.value.service}-${var.environment}@${var.project_id}.iam.gserviceaccount.com"\n}\n\nresource "google_pubsub_subscription_iam_member" "subscribers" {\n  for_each = google_pubsub_subscription.subscriptions\n\n  subscription = each.value.name\n  role        = "roles/pubsub.subscriber"\n  member      = "serviceAccount:${var.application_name}-${split("-", each.key)[0]}-service-${var.environment}@${var.project_id}.iam.gserviceaccount.com"\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/messaging/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "kms_crypto_key_id" {\n  description = "KMS crypto key ID"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/messaging/outputs.tf\noutput "topic_names" {\n  description = "Pub/Sub topic names"\n  value = {\n    for name, topic in google_pubsub_topic.topics : name => topic.name\n  }\n}\n\noutput "subscription_names" {\n  description = "Pub/Sub subscription names"\n  value = {\n    for name, subscription in google_pubsub_subscription.subscriptions : name => subscription.name\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"cloud-run-module",children:"Cloud Run Module"}),"\n",(0,o.jsx)(n.h3,{id:"serverless-microservices-configuration",children:"Serverless Microservices Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/cloudrun/main.tf\n# Cloud Run services for serverless microservices\nresource "google_cloud_run_v2_service" "services" {\n  for_each = var.cloud_run_services\n\n  name     = "${var.application_name}-${each.key}-${var.environment}"\n  location = var.region\n  ingress  = "INGRESS_TRAFFIC_ALL"\n\n  template {\n    # Service account\n    service_account = "${var.application_name}-${each.key}-service-${var.environment}@${var.project_id}.iam.gserviceaccount.com"\n\n    # Scaling configuration\n    scaling {\n      min_instance_count = each.value.min_instances\n      max_instance_count = each.value.max_instances\n    }\n\n    # Container configuration\n    containers {\n      image = "${var.artifact_registry_url}/${each.key}:latest"\n      \n      # Resource allocation\n      resources {\n        limits = {\n          cpu    = each.value.cpu\n          memory = each.value.memory\n        }\n        cpu_idle = true\n        startup_cpu_boost = true\n      }\n\n      # Port configuration\n      ports {\n        container_port = each.value.port\n        name           = "http1"\n      }\n\n      # Environment variables\n      dynamic "env" {\n        for_each = each.value.env_vars\n        content {\n          name  = env.key\n          value = env.value\n        }\n      }\n\n      # Environment variables from secrets\n      env {\n        name = "DATABASE_URL"\n        value_source {\n          secret_key_ref {\n            secret  = "${var.application_name}-${each.key}-db-password-${var.environment}"\n            version = "latest"\n          }\n        }\n      }\n\n      env {\n        name = "REDIS_URL"\n        value_source {\n          secret_key_ref {\n            secret  = "${var.application_name}-redis-config-${var.environment}"\n            version = "latest"\n          }\n        }\n      }\n\n      # Health check configuration\n      startup_probe {\n        http_get {\n          path = "/health"\n          port = each.value.port\n        }\n        initial_delay_seconds = 10\n        timeout_seconds      = 1\n        period_seconds       = 3\n        failure_threshold    = 5\n      }\n\n      liveness_probe {\n        http_get {\n          path = "/health"\n          port = each.value.port\n        }\n        initial_delay_seconds = 30\n        timeout_seconds      = 1\n        period_seconds       = 10\n        failure_threshold    = 3\n      }\n    }\n\n    # Request timeout\n    timeout = "${each.value.timeout_seconds}s"\n\n    # Maximum requests per container\n    max_instance_request_concurrency = each.value.concurrency\n\n    # Execution environment\n    execution_environment = "EXECUTION_ENVIRONMENT_GEN2"\n  }\n\n  # Traffic configuration\n  traffic {\n    type    = "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST"\n    percent = 100\n  }\n\n  # Labels\n  labels = {\n    environment = var.environment\n    application = var.application_name\n    service     = each.key\n    managed_by  = "terraform"\n  }\n\n  # Lifecycle\n  lifecycle {\n    ignore_changes = [\n      template[0].containers[0].image\n    ]\n  }\n}\n\n# IAM policy for Cloud Run services\nresource "google_cloud_run_service_iam_member" "public_access" {\n  for_each = var.cloud_run_services\n\n  service  = google_cloud_run_v2_service.services[each.key].name\n  location = google_cloud_run_v2_service.services[each.key].location\n  role     = "roles/run.invoker"\n  member   = "allUsers"\n}\n\n# Load balancer backend for Cloud Run services\nresource "google_compute_region_network_endpoint_group" "cloud_run_neg" {\n  for_each = var.cloud_run_services\n\n  name                  = "${var.application_name}-${each.key}-neg-${var.environment}"\n  network_endpoint_type = "SERVERLESS"\n  region                = var.region\n\n  cloud_run {\n    service = google_cloud_run_v2_service.services[each.key].name\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/cloudrun/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "cloud_run_services" {\n  description = "Cloud Run service configurations"\n  type = map(object({\n    image           = string\n    port            = number\n    cpu             = string\n    memory          = string\n    min_instances   = number\n    max_instances   = number\n    concurrency     = number\n    timeout_seconds = number\n    env_vars        = map(string)\n  }))\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "artifact_registry_url" {\n  description = "Artifact Registry URL"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/cloudrun/outputs.tf\noutput "service_urls" {\n  description = "Cloud Run service URLs"\n  value = {\n    for name, service in google_cloud_run_v2_service.services : name => service.uri\n  }\n}\n\noutput "service_names" {\n  description = "Cloud Run service names"\n  value = {\n    for name, service in google_cloud_run_v2_service.services : name => service.name\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"monitoring-module",children:"Monitoring Module"}),"\n",(0,o.jsx)(n.h3,{id:"cloud-operations-integration",children:"Cloud Operations Integration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/monitoring/main.tf\n# Notification channels\nresource "google_monitoring_notification_channel" "email" {\n  for_each = toset([\n    "devops-team@company.com",\n    "sre-team@company.com"\n  ])\n\n  display_name = "Email - ${each.key}"\n  type         = "email"\n  labels = {\n    email_address = each.key\n  }\n}\n\n# Alert policies for infrastructure\nresource "google_monitoring_alert_policy" "high_cpu" {\n  display_name = "${var.application_name} - High CPU Usage - ${var.environment}"\n  combiner     = "OR"\n\n  conditions {\n    display_name = "CPU usage is above 80%"\n    condition_threshold {\n      filter          = "metric.type=\\"compute.googleapis.com/instance/cpu/utilization\\" resource.type=\\"gce_instance\\""\n      duration        = "300s"\n      comparison      = "COMPARISON_GREATER_THAN"\n      threshold_value = 0.8\n\n      aggregations {\n        alignment_period   = "60s"\n        per_series_aligner = "ALIGN_RATE"\n      }\n    }\n  }\n\n  notification_channels = [\n    for channel in google_monitoring_notification_channel.email : channel.id\n  ]\n}\n\n# GKE cluster monitoring\nresource "google_monitoring_alert_policy" "gke_node_not_ready" {\n  display_name = "${var.application_name} - GKE Node Not Ready - ${var.environment}"\n  combiner     = "OR"\n\n  conditions {\n    display_name = "GKE node is not ready"\n    condition_threshold {\n      filter          = "metric.type=\\"kubernetes.io/node/ready\\" resource.type=\\"k8s_node\\" resource.label.cluster_name=\\"${var.gke_cluster_name}\\""\n      duration        = "300s"\n      comparison      = "COMPARISON_LESS_THAN"\n      threshold_value = 1\n\n      aggregations {\n        alignment_period   = "60s"\n        per_series_aligner = "ALIGN_MEAN"\n      }\n    }\n  }\n\n  notification_channels = [\n    for channel in google_monitoring_notification_channel.email : channel.id\n  ]\n}\n\n# Application-level monitoring dashboard\nresource "google_monitoring_dashboard" "microservices_dashboard" {\n  dashboard_json = jsonencode({\n    displayName = "${var.application_name} Microservices Dashboard - ${var.environment}"\n    mosaicLayout = {\n      tiles = [\n        {\n          width  = 6\n          height = 4\n          widget = {\n            title = "GKE Cluster CPU Usage"\n            xyChart = {\n              dataSets = [{\n                timeSeriesQuery = {\n                  timeSeriesFilter = {\n                    filter = "metric.type=\\"kubernetes.io/container/cpu/core_usage_time\\" resource.type=\\"k8s_container\\""\n                    aggregation = {\n                      alignmentPeriod  = "60s"\n                      perSeriesAligner = "ALIGN_RATE"\n                    }\n                  }\n                }\n              }]\n            }\n          }\n        },\n        {\n          width  = 6\n          height = 4\n          widget = {\n            title = "GKE Cluster Memory Usage"\n            xyChart = {\n              dataSets = [{\n                timeSeriesQuery = {\n                  timeSeriesFilter = {\n                    filter = "metric.type=\\"kubernetes.io/container/memory/used_bytes\\" resource.type=\\"k8s_container\\""\n                    aggregation = {\n                      alignmentPeriod  = "60s"\n                      perSeriesAligner = "ALIGN_MEAN"\n                    }\n                  }\n                }\n              }]\n            }\n          }\n        }\n      ]\n    }\n  })\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/monitoring/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "gke_cluster_name" {\n  description = "GKE cluster name"\n  type        = string\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# modules/monitoring/outputs.tf\noutput "notification_channels" {\n  description = "Monitoring notification channels"\n  value = {\n    email = {\n      for email, channel in google_monitoring_notification_channel.email : email => channel.id\n    }\n  }\n}\n\noutput "dashboard_url" {\n  description = "Monitoring dashboard URL"\n  value       = "https://console.cloud.google.com/monitoring/dashboards/custom/${google_monitoring_dashboard.microservices_dashboard.id}?project=${var.project_id}"\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete-terraform-configuration",children:"Complete Terraform Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"main-outputs",children:"Main Outputs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-hcl",children:'# outputs.tf\noutput "cluster_info" {\n  description = "GKE cluster information"\n  value = {\n    name      = module.gke.cluster_name\n    location  = module.gke.cluster_location\n    endpoint  = module.gke.cluster_endpoint\n  }\n  sensitive = true\n}\n\noutput "database_info" {\n  description = "Database connection information"\n  value = {\n    postgres_instance = module.databases.postgres_instance_name\n    postgres_ip       = module.databases.postgres_private_ip\n    redis_host        = module.databases.redis_host\n    redis_port        = module.databases.redis_port\n  }\n  sensitive = true\n}\n\noutput "storage_info" {\n  description = "Storage information"\n  value = {\n    buckets     = module.storage.bucket_names\n    filestore_ip = module.storage.filestore_ip\n  }\n}\n\noutput "cloud_run_urls" {\n  description = "Cloud Run service URLs"\n  value       = module.cloudrun.service_urls\n}\n\noutput "messaging_info" {\n  description = "Pub/Sub messaging information"\n  value = {\n    topics        = module.messaging.topic_names\n    subscriptions = module.messaging.subscription_names\n  }\n}\n\noutput "monitoring_info" {\n  description = "Monitoring and observability"\n  value = {\n    dashboard_url = module.monitoring.dashboard_url\n  }\n}\n\noutput "kubectl_connection_command" {\n  description = "Command to connect kubectl to the cluster"\n  value       = "gcloud container clusters get-credentials ${module.gke.cluster_name} --region ${module.gke.cluster_location} --project ${var.project_id}"\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"deployment-guide",children:"Deployment Guide"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-prerequisites-setup",children:"Step 1: Prerequisites Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Clone your Terraform configuration\ngit clone https://github.com/your-org/microservices-terraform.git\ncd microservices-terraform\n\n# Initialize Terraform\nterraform init\n\n# Create terraform.tfvars for your environment\ncp environments/dev/terraform.tfvars.example terraform.tfvars\n# Edit terraform.tfvars with your specific values\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-2-plan-and-deploy",children:"Step 2: Plan and Deploy"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Validate configuration\nterraform validate\n\n# Plan the deployment\nterraform plan -var-file="terraform.tfvars" -out=tfplan\n\n# Review the plan carefully\nterraform show tfplan\n\n# Apply the infrastructure\nterraform apply tfplan\n'})}),"\n",(0,o.jsx)(n.h3,{id:"step-3-post-deployment-setup",children:"Step 3: Post-Deployment Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Get cluster credentials\ngcloud container clusters get-credentials microservices-cluster-dev \\\n    --region us-central1 \\\n    --project your-microservices-dev-project\n\n# Verify cluster access\nkubectl get nodes\nkubectl get namespaces\n\n# Create application namespace\nkubectl create namespace dev\n\n# Set up Workload Identity\nkubectl annotate serviceaccount default \\\n    --namespace dev \\\n    iam.gke.io/gcp-service-account=microservices-app-gateway-service-dev@your-project.iam.gserviceaccount.com\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-deploy-application",children:"Step 4: Deploy Application"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Build and push container images\ndocker build -t us-central1-docker.pkg.dev/PROJECT_ID/microservices-app-docker-dev/gateway:latest gateway/\ndocker push us-central1-docker.pkg.dev/PROJECT_ID/microservices-app-docker-dev/gateway:latest\n\ndocker build -t us-central1-docker.pkg.dev/PROJECT_ID/microservices-app-docker-dev/auth:latest auth/\ndocker push us-central1-docker.pkg.dev/PROJECT_ID/microservices-app-docker-dev/auth:latest\n\n# Deploy to Cloud Run (if using Cloud Run)\ngcloud run deploy gateway \\\n    --image us-central1-docker.pkg.dev/PROJECT_ID/microservices-app-docker-dev/gateway:latest \\\n    --region us-central1 \\\n    --platform managed \\\n    --allow-unauthenticated\n\n# Or deploy to GKE using kubectl\nkubectl apply -f k8s-manifests/\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-5-verify-deployment",children:"Step 5: Verify Deployment"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check Cloud Run services\ngcloud run services list --region us-central1\n\n# Check GKE deployments\nkubectl get pods -n dev\nkubectl get services -n dev\n\n# Check database connectivity\nkubectl run test-pod --image=postgres:15 --rm -it --restart=Never -- \\\n    psql -h <POSTGRES_IP> -U user_service_dev -d users_dev\n\n# Check Redis connectivity\nkubectl run test-pod --image=redis:7 --rm -it --restart=Never -- \\\n    redis-cli -h <REDIS_HOST> ping\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Least Privilege Access"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use separate service accounts for each microservice"}),"\n",(0,o.jsx)(n.li,{children:"Grant minimal required permissions"}),"\n",(0,o.jsx)(n.li,{children:"Enable Workload Identity for GKE pods"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Encryption at Rest and in Transit"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use Cloud KMS for database encryption"}),"\n",(0,o.jsx)(n.li,{children:"Enable TLS for all communications"}),"\n",(0,o.jsx)(n.li,{children:"Encrypt secrets in Secret Manager"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Network Security"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use private GKE clusters"}),"\n",(0,o.jsx)(n.li,{children:"Implement network policies"}),"\n",(0,o.jsx)(n.li,{children:"Use authorized networks for database access"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Secret Management"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Store all sensitive data in Secret Manager"}),"\n",(0,o.jsx)(n.li,{children:"Use IAM to control secret access"}),"\n",(0,o.jsx)(n.li,{children:"Rotate secrets regularly"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Resource Management"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set appropriate CPU and memory limits"}),"\n",(0,o.jsx)(n.li,{children:"Use horizontal pod autoscaling"}),"\n",(0,o.jsx)(n.li,{children:"Configure cluster autoscaling"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Database Optimization"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use read replicas for analytics workloads"}),"\n",(0,o.jsx)(n.li,{children:"Configure connection pooling"}),"\n",(0,o.jsx)(n.li,{children:"Monitor query performance"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Caching Strategy"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use Redis for session and application caching"}),"\n",(0,o.jsx)(n.li,{children:"Implement CDN for static assets"}),"\n",(0,o.jsx)(n.li,{children:"Cache frequently accessed data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"cost-optimization",children:"Cost Optimization"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Right-sizing Resources"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use preemptible instances for non-critical workloads"}),"\n",(0,o.jsx)(n.li,{children:"Scale down development environments"}),"\n",(0,o.jsx)(n.li,{children:"Monitor resource utilization"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Storage Optimization"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use lifecycle policies for Cloud Storage"}),"\n",(0,o.jsx)(n.li,{children:"Choose appropriate storage classes"}),"\n",(0,o.jsx)(n.li,{children:"Clean up unused resources"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Monitoring and Alerting"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set up budget alerts"}),"\n",(0,o.jsx)(n.li,{children:"Monitor resource usage trends"}),"\n",(0,o.jsx)(n.li,{children:"Use committed use discounts for stable workloads"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"operational-excellence",children:"Operational Excellence"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Infrastructure as Code"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Version control all Terraform configurations"}),"\n",(0,o.jsx)(n.li,{children:"Use environment-specific configurations"}),"\n",(0,o.jsx)(n.li,{children:"Implement automated testing"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"CI/CD Pipeline"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Automate infrastructure deployments"}),"\n",(0,o.jsx)(n.li,{children:"Use GitOps for application deployments"}),"\n",(0,o.jsx)(n.li,{children:"Implement automated testing"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Monitoring and Observability"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Set up comprehensive monitoring"}),"\n",(0,o.jsx)(n.li,{children:"Implement distributed tracing"}),"\n",(0,o.jsx)(n.li,{children:"Use structured logging"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Disaster Recovery"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Implement backup strategies"}),"\n",(0,o.jsx)(n.li,{children:"Test recovery procedures"}),"\n",(0,o.jsx)(n.li,{children:"Use multi-region deployments for critical systems"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,o.jsx)(n.h4,{id:"terraform-issues",children:"Terraform Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": Provider authentication errors"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Solution: Set up authentication\nexport GOOGLE_APPLICATION_CREDENTIALS="path/to/service-account-key.json"\ngcloud auth application-default login\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": Resource quota exceeded"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Solution: Check and increase quotas\ngcloud compute project-info describe --project=PROJECT_ID\ngcloud compute quotas list --project=PROJECT_ID\n"})}),"\n",(0,o.jsx)(n.h4,{id:"gke-issues",children:"GKE Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": Pods stuck in pending state"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check node resources\nkubectl describe nodes\nkubectl top nodes\n\n# Check pod events\nkubectl describe pod POD_NAME -n NAMESPACE\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": LoadBalancer service stuck in pending"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check quota for load balancers\ngcloud compute addresses list\ngcloud compute forwarding-rules list\n\n# Check firewall rules\ngcloud compute firewall-rules list\n"})}),"\n",(0,o.jsx)(n.h4,{id:"database-issues",children:"Database Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": Connection timeout to Cloud SQL"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check authorized networks\ngcloud sql instances describe INSTANCE_NAME\n\n# Check private service connection\ngcloud services vpc-peerings list --service=servicenetworking.googleapis.com\n"})}),"\n",(0,o.jsx)(n.h4,{id:"application-issues",children:"Application Issues"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Issue"}),": Cloud Run service not accessible"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check IAM permissions\ngcloud run services get-iam-policy SERVICE_NAME --region=REGION\n\n# Check service configuration\ngcloud run services describe SERVICE_NAME --region=REGION\n"})}),"\n",(0,o.jsx)(n.h3,{id:"monitoring-and-debugging",children:"Monitoring and Debugging"}),"\n",(0,o.jsx)(n.h4,{id:"health-checks",children:"Health Checks"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# GKE cluster health\nkubectl get nodes\nkubectl get pods --all-namespaces\nkubectl cluster-info\n\n# Database health\ngcloud sql instances list\ngcloud redis instances list --region=REGION\n\n# Cloud Run health\ngcloud run services list --region=REGION\n"})}),"\n",(0,o.jsx)(n.h4,{id:"log-analysis",children:"Log Analysis"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# View GKE logs\nkubectl logs -f deployment/DEPLOYMENT_NAME -n NAMESPACE\n\n# View Cloud Run logs\ngcloud logs read "resource.type=cloud_run_revision" --limit=50\n\n# View database logs\ngcloud logs read "resource.type=cloudsql_database" --limit=50\n'})}),"\n",(0,o.jsx)(n.p,{children:"This comprehensive guide provides everything needed to deploy production-ready microservices on Google Cloud Platform using Terraform, including all the infrastructure components, security configurations, monitoring, and operational best practices."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"[This comprehensive guide continues with all the remaining modules, deployment instructions, best practices, and complete example configurations...]"})}),"\n",(0,o.jsx)(n.p,{children:"Due to the extensive nature of this guide, I've shown the key foundation modules. The complete guide would include:"}),"\n",(0,o.jsx)(n.h2,{id:"remaining-sections-to-add",children:"Remaining Sections to Add:"}),"\n",(0,o.jsxs)(n.h3,{id:"-complete-module-set",children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Complete Module Set"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security Module"}),": KMS keys, Secret Manager, IAM configurations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Databases Module"}),": Cloud SQL PostgreSQL with read replicas, Memorystore Redis"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storage Module"}),": Cloud Storage buckets with lifecycle policies, Filestore NFS"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Messaging Module"}),": Pub/Sub topics and subscriptions with schemas"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cloud Run Module"}),": Serverless microservices with load balancers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Monitoring Module"}),": Cloud Operations integration"]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"-deployment--operations",children:["\ud83d\ude80 ",(0,o.jsx)(n.strong,{children:"Deployment & Operations"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Environment-specific configurations"})," (dev/staging/prod)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CI/CD pipeline templates"})," for GitHub Actions, Cloud Build"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Kubernetes manifests"})," with Kustomize overlays"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Helm charts"})," for microservices deployment"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Backup and disaster recovery"})," procedures"]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"-best-practices--examples",children:["\ud83d\udccb ",(0,o.jsx)(n.strong,{children:"Best Practices & Examples"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complete terraform.tfvars"})," examples for each environment"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Microservices communication patterns"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Security configurations"})," and compliance"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cost optimization"})," strategies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Monitoring and alerting"})," setup"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Troubleshooting guides"})," for common issues"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Would you like me to continue with any specific section of this comprehensive microservices guide? The foundation is now in place with the core infrastructure modules."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'\nI\'ll continue with the remaining modules. This is a comprehensive guide, so let me create the remaining modules and configurations systematically.\n\n<function_calls>\n<invoke name="replace_string_in_file">\n<parameter name="filePath">/Users/tam.nguyenk/workspace/ecom/docs-site/docs/devops/gcp/microservices-terraform-guide.md\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);