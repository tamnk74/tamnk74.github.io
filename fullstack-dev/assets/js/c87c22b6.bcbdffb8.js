"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8532],{5741:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(9729);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},5905:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"architecture-practices/architecture-config-templates","title":"Architecture Configuration Templates","description":"NestJS Microservice Configuration","source":"@site/docs/architecture-practices/architecture-config-templates.md","sourceDirName":"architecture-practices","slug":"/architecture-practices/architecture-config-templates","permalink":"/fullstack-dev/docs/architecture-practices/architecture-config-templates","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-config-templates.md","tags":[],"version":"current","frontMatter":{}}');var r=t(5813),i=t(5741);const o={},a="Architecture Configuration Templates",c={},l=[{value:"NestJS Microservice Configuration",id:"nestjs-microservice-configuration",level:2},{value:"package.json Template",id:"packagejson-template",level:3},{value:"TypeORM Configuration",id:"typeorm-configuration",level:3},{value:"Next.js Microfrontend Configuration",id:"nextjs-microfrontend-configuration",level:2},{value:"package.json Template",id:"packagejson-template-1",level:3},{value:"Module Federation Configuration",id:"module-federation-configuration",level:3},{value:"Docker Configuration",id:"docker-configuration",level:2},{value:"Multi-stage Dockerfile for NestJS",id:"multi-stage-dockerfile-for-nestjs",level:3},{value:"Multi-stage Dockerfile for Next.js",id:"multi-stage-dockerfile-for-nextjs",level:3},{value:"Kubernetes Configuration",id:"kubernetes-configuration",level:2},{value:"ConfigMap for Environment Variables",id:"configmap-for-environment-variables",level:3},{value:"Secret for Sensitive Data",id:"secret-for-sensitive-data",level:3},{value:"Service Monitor for Prometheus",id:"service-monitor-for-prometheus",level:3},{value:"CI/CD Configuration",id:"cicd-configuration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Monitoring Configuration",id:"monitoring-configuration",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"Grafana Dashboard Configuration",id:"grafana-dashboard-configuration",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture-configuration-templates",children:"Architecture Configuration Templates"})}),"\n",(0,r.jsx)(n.h2,{id:"nestjs-microservice-configuration",children:"NestJS Microservice Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"packagejson-template",children:"package.json Template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "nestjs-microservice-template",\n  "version": "1.0.0",\n  "description": "NestJS Microservice Template",\n  "main": "dist/main.js",\n  "scripts": {\n    "build": "nest build",\n    "format": "prettier --write \\"src/**/*.ts\\" \\"test/**/*.ts\\"",\n    "start": "nest start",\n    "start:dev": "nest start --watch",\n    "start:debug": "nest start --debug --watch",\n    "start:prod": "node dist/main",\n    "lint": "eslint \\"{src,apps,libs,test}/**/*.ts\\" --fix",\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:cov": "jest --coverage",\n    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",\n    "test:e2e": "jest --config ./test/jest-e2e.json",\n    "test:integration": "jest --config ./test/jest-integration.json",\n    "security:audit": "npm audit",\n    "security:scan": "snyk test",\n    "db:migration:generate": "typeorm migration:generate -d src/config/typeorm.config.ts",\n    "db:migration:run": "typeorm migration:run -d src/config/typeorm.config.ts",\n    "docker:build": "docker build -t microservice .",\n    "docker:run": "docker run -p 3000:3000 microservice"\n  },\n  "dependencies": {\n    "@nestjs/bull": "^10.0.1",\n    "@nestjs/cache-manager": "^2.1.0",\n    "@nestjs/common": "^10.0.0",\n    "@nestjs/config": "^3.0.0",\n    "@nestjs/core": "^10.0.0",\n    "@nestjs/jwt": "^10.1.0",\n    "@nestjs/microservices": "^10.0.0",\n    "@nestjs/passport": "^10.0.0",\n    "@nestjs/platform-express": "^10.0.0",\n    "@nestjs/swagger": "^7.1.8",\n    "@nestjs/terminus": "^10.0.1",\n    "@nestjs/typeorm": "^10.0.0",\n    "bull": "^4.11.3",\n    "cache-manager": "^5.2.3",\n    "cache-manager-redis-store": "^3.0.1",\n    "class-transformer": "^0.5.1",\n    "class-validator": "^0.14.0",\n    "helmet": "^7.0.0",\n    "passport": "^0.6.0",\n    "passport-jwt": "^4.0.1",\n    "passport-local": "^1.0.0",\n    "pg": "^8.11.2",\n    "redis": "^4.6.7",\n    "reflect-metadata": "^0.1.13",\n    "rxjs": "^7.8.1",\n    "typeorm": "^0.3.17"\n  },\n  "devDependencies": {\n    "@nestjs/cli": "^10.0.0",\n    "@nestjs/schematics": "^10.0.0",\n    "@nestjs/testing": "^10.0.0",\n    "@types/express": "^4.17.17",\n    "@types/jest": "^29.5.2",\n    "@types/node": "^20.3.1",\n    "@types/passport-jwt": "^3.0.9",\n    "@types/passport-local": "^1.0.35",\n    "@types/supertest": "^2.0.12",\n    "@typescript-eslint/eslint-plugin": "^6.0.0",\n    "@typescript-eslint/parser": "^6.0.0",\n    "eslint": "^8.42.0",\n    "eslint-config-prettier": "^8.8.0",\n    "eslint-plugin-prettier": "^4.2.1",\n    "jest": "^29.5.0",\n    "prettier": "^2.8.8",\n    "source-map-support": "^0.5.21",\n    "supertest": "^6.3.3",\n    "ts-jest": "^29.1.0",\n    "ts-loader": "^9.4.3",\n    "ts-node": "^10.9.1",\n    "tsconfig-paths": "^4.2.0",\n    "typescript": "^5.1.3"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"typeorm-configuration",children:"TypeORM Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/config/typeorm.config.ts\nimport { DataSource } from 'typeorm';\nimport { ConfigService } from '@nestjs/config';\n\nexport const createTypeOrmConfig = (configService: ConfigService) => ({\n  type: 'postgres' as const,\n  host: configService.get('DB_HOST', 'localhost'),\n  port: configService.get('DB_PORT', 5432),\n  username: configService.get('DB_USERNAME', 'postgres'),\n  password: configService.get('DB_PASSWORD', 'password'),\n  database: configService.get('DB_NAME', 'microservice_db'),\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/../migrations/*{.ts,.js}'],\n  synchronize: configService.get('NODE_ENV') === 'development',\n  logging: configService.get('NODE_ENV') === 'development',\n  ssl: configService.get('NODE_ENV') === 'production' ? { rejectUnauthorized: false } : false,\n});\n\nexport const AppDataSource = new DataSource({\n  type: 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '5432'),\n  username: process.env.DB_USERNAME || 'postgres',\n  password: process.env.DB_PASSWORD || 'password',\n  database: process.env.DB_NAME || 'microservice_db',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  migrations: [__dirname + '/../migrations/*{.ts,.js}'],\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"nextjs-microfrontend-configuration",children:"Next.js Microfrontend Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"packagejson-template-1",children:"package.json Template"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "nextjs-microfrontend-template",\n  "version": "1.0.0",\n  "private": true,\n  "scripts": {\n    "dev": "next dev",\n    "build": "next build",\n    "start": "next start",\n    "lint": "next lint",\n    "test": "jest",\n    "test:watch": "jest --watch",\n    "test:coverage": "jest --coverage",\n    "test:e2e": "playwright test",\n    "type-check": "tsc --noEmit",\n    "security:audit": "npm audit",\n    "analyze": "cross-env ANALYZE=true next build",\n    "docker:build": "docker build -t microfrontend .",\n    "docker:run": "docker run -p 3000:3000 microfrontend"\n  },\n  "dependencies": {\n    "@module-federation/nextjs-mf": "^7.1.0",\n    "@reduxjs/toolkit": "^1.9.5",\n    "axios": "^1.4.0",\n    "framer-motion": "^10.15.0",\n    "next": "^14.0.0",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-redux": "^8.1.2",\n    "react-router-dom": "^6.14.2",\n    "swr": "^2.2.0",\n    "tailwindcss": "^3.3.0"\n  },\n  "devDependencies": {\n    "@playwright/test": "^1.36.2",\n    "@testing-library/jest-dom": "^5.17.0",\n    "@testing-library/react": "^13.4.0",\n    "@testing-library/user-event": "^14.4.3",\n    "@types/jest": "^29.5.3",\n    "@types/node": "^20.4.7",\n    "@types/react": "^18.2.18",\n    "@types/react-dom": "^18.2.7",\n    "@typescript-eslint/eslint-plugin": "^6.2.1",\n    "@typescript-eslint/parser": "^6.2.1",\n    "autoprefixer": "^10.4.14",\n    "cross-env": "^7.0.3",\n    "eslint": "^8.46.0",\n    "eslint-config-next": "^13.4.12",\n    "eslint-config-prettier": "^8.9.0",\n    "eslint-plugin-prettier": "^5.0.0",\n    "jest": "^29.6.2",\n    "jest-environment-jsdom": "^29.6.2",\n    "postcss": "^8.4.27",\n    "prettier": "^3.0.1",\n    "typescript": "^5.1.6"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"module-federation-configuration",children:"Module Federation Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nconst NextFederationPlugin = require('@module-federation/nextjs-mf');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack(config, options) {\n    config.plugins.push(\n      new NextFederationPlugin({\n        name: 'shell',\n        filename: 'static/chunks/remoteEntry.js',\n        remotes: {\n          userMfe: 'userMfe@http://localhost:3001/_next/static/chunks/remoteEntry.js',\n          orderMfe: 'orderMfe@http://localhost:3002/_next/static/chunks/remoteEntry.js',\n          productMfe: 'productMfe@http://localhost:3003/_next/static/chunks/remoteEntry.js',\n        },\n        shared: {\n          react: { singleton: true, eager: true },\n          'react-dom': { singleton: true, eager: true },\n          '@reduxjs/toolkit': { singleton: true },\n          'react-redux': { singleton: true },\n        },\n      })\n    );\n\n    return config;\n  },\n  experimental: {\n    esmExternals: false,\n  },\n};\n\nmodule.exports = nextConfig;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"multi-stage-dockerfile-for-nestjs",children:"Multi-stage Dockerfile for NestJS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Build stage\nFROM node:18-alpine AS builder\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nCOPY tsconfig*.json ./\n\n# Install dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy source code\nCOPY src/ ./src/\n\n# Build application\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\n\n# Create app directory\nWORKDIR /app\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nestjs -u 1001\n\n# Copy built application\nCOPY --from=builder --chown=nestjs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules\nCOPY --chown=nestjs:nodejs package*.json ./\n\n# Switch to non-root user\nUSER nestjs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# Start application\nCMD ["node", "dist/main"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"multi-stage-dockerfile-for-nextjs",children:"Multi-stage Dockerfile for Next.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Dependencies stage\nFROM node:18-alpine AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Builder stage\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nRUN npm run build\n\n# Runner stage\nFROM node:18-alpine AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\n\n# Automatically leverage output traces to reduce image size\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\n\nCMD ["node", "server.js"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"kubernetes-configuration",children:"Kubernetes Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"configmap-for-environment-variables",children:"ConfigMap for Environment Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  NODE_ENV: "production"\n  LOG_LEVEL: "info"\n  API_VERSION: "v1"\n  REDIS_HOST: "redis-service"\n  REDIS_PORT: "6379"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"secret-for-sensitive-data",children:"Secret for Sensitive Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\nstringData:\n  DB_PASSWORD: "secure-password"\n  JWT_SECRET: "jwt-secret-key"\n  REDIS_PASSWORD: "redis-password"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"service-monitor-for-prometheus",children:"Service Monitor for Prometheus"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: app-service-monitor\nspec:\n  selector:\n    matchLabels:\n      app: microservice\n  endpoints:\n  - port: metrics\n    path: /metrics\n    interval: 30s\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cicd-configuration",children:"CI/CD Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: Microservice CI/CD\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run linting\n        run: npm run lint\n\n      - name: Run type checking\n        run: npm run type-check\n\n      - name: Run unit tests\n        run: npm run test:cov\n\n      - name: Run integration tests\n        run: npm run test:integration\n        env:\n          DB_HOST: localhost\n          DB_PORT: 5432\n          DB_USERNAME: postgres\n          DB_PASSWORD: postgres\n          DB_NAME: test_db\n\n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n\n  security:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run security audit\n        run: npm audit --audit-level moderate\n\n      - name: Run Snyk security scan\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n\n  build-and-push:\n    needs: [test, security]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push'\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=sha,prefix={{branch}}-\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n\n  deploy:\n    needs: build-and-push\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n      - name: Deploy to Kubernetes\n        run: |\n          echo \"Deploying to production...\"\n          # Add your deployment commands here\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-configuration",children:"Monitoring Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"rules/*.yml\"\n\nscrape_configs:\n  - job_name: 'microservices'\n    static_configs:\n      - targets: ['user-service:3000', 'order-service:3000', 'product-service:3000']\n    metrics_path: /metrics\n    scrape_interval: 30s\n\n  - job_name: 'microfrontends'\n    static_configs:\n      - targets: ['shell-app:3000', 'user-mfe:3001', 'order-mfe:3002']\n    metrics_path: /api/metrics\n    scrape_interval: 30s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n"})}),"\n",(0,r.jsx)(n.h3,{id:"grafana-dashboard-configuration",children:"Grafana Dashboard Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Microservices Overview",\n    "panels": [\n      {\n        "title": "Request Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total[5m])",\n            "legendFormat": "{{service}} - {{method}} {{status}}"\n          }\n        ]\n      },\n      {\n        "title": "Response Time",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "95th percentile"\n          }\n        ]\n      },\n      {\n        "title": "Error Rate",\n        "type": "singlestat",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total{status=~\\"5..\\"}[5m]) / rate(http_requests_total[5m]) * 100",\n            "legendFormat": "Error Rate %"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This configuration provides a solid foundation for implementing the architecture process template with all necessary tooling and best practices configured."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);