"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8158],{131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"architecture-practices/architecture-execution/cicd-pipeline","title":"CI/CD Pipeline for NestJS & Next.js Microservices","description":"Overview","source":"@site/docs/architecture-practices/architecture-execution/cicd-pipeline.md","sourceDirName":"architecture-practices/architecture-execution","slug":"/architecture-practices/architecture-execution/cicd-pipeline","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/cicd-pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-execution/cicd-pipeline.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Code Quality Tools","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/code-quality-tools"},"next":{"title":"Skills Assessment for Architecture Teams","permalink":"/fullstack-dev/docs/architecture-practices/architecture-management/skills-assessment"}}');var r=t(5813),i=t(7814);const a={},o="CI/CD Pipeline for NestJS & Next.js Microservices",c={},u=[{value:"Overview",id:"overview",level:2},{value:"Maturity Level: 2 (Managed)",id:"maturity-level-2-managed",level:2},{value:"Pipeline Architecture",id:"pipeline-architecture",level:2},{value:"Overall CI/CD Flow",id:"overall-cicd-flow",level:3},{value:"Technology Stack",id:"technology-stack",level:3},{value:"GitHub Actions Implementation",id:"github-actions-implementation",level:2},{value:"Workflow Structure",id:"workflow-structure",level:3},{value:"NestJS Microservice CI Pipeline",id:"nestjs-microservice-ci-pipeline",level:3},{value:"Next.js Frontend CI Pipeline",id:"nextjs-frontend-ci-pipeline",level:3},{value:"Production Deployment Pipeline",id:"production-deployment-pipeline",level:2},{value:"CD Production Workflow",id:"cd-production-workflow",level:3},{value:"Docker Configuration",id:"docker-configuration",level:2},{value:"Multi-stage Dockerfile for NestJS",id:"multi-stage-dockerfile-for-nestjs",level:3},{value:"Dockerfile for Next.js",id:"dockerfile-for-nextjs",level:3},{value:"Kubernetes Deployment Manifests",id:"kubernetes-deployment-manifests",level:2},{value:"Service Deployment",id:"service-deployment",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"Grafana Dashboards",id:"grafana-dashboards",level:3},{value:"Quality Gates and Policies",id:"quality-gates-and-policies",level:2},{value:"Branch Protection Rules",id:"branch-protection-rules",level:3},{value:"Quality Gates",id:"quality-gates",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"K6 Load Testing Script",id:"k6-load-testing-script",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cicd-pipeline-for-nestjs--nextjs-microservices",children:"CI/CD Pipeline for NestJS & Next.js Microservices"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Comprehensive CI/CD pipeline implementation for NestJS microservices and Next.js microfrontend architecture using modern DevOps practices."}),"\n",(0,r.jsx)(n.h2,{id:"maturity-level-2-managed",children:"Maturity Level: 2 (Managed)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Area:"})," Architecture Execution",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Practice:"})," Continuous Integration",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Phase:"})," PREPARATION (Sprint 0)"]}),"\n",(0,r.jsx)(n.h2,{id:"pipeline-architecture",children:"Pipeline Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"overall-cicd-flow",children:"Overall CI/CD Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Code Commit] --\x3e B[Trigger Pipeline]\n    B --\x3e C[Lint & Format Check]\n    C --\x3e D[Unit Tests]\n    D --\x3e E[Build Application]\n    E --\x3e F[Integration Tests]\n    F --\x3e G[Security Scan]\n    G --\x3e H[Build Docker Image]\n    H --\x3e I[Push to Registry]\n    I --\x3e J[Deploy to Dev]\n    J --\x3e K[E2E Tests]\n    K --\x3e L[Deploy to Staging]\n    L --\x3e M[Performance Tests]\n    M --\x3e N[Deploy to Production]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD Platform:"})," GitHub Actions / Azure DevOps / Jenkins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Container Registry:"})," Docker Hub / AWS ECR / Azure ACR"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Orchestration:"})," Kubernetes / Docker Swarm"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitoring:"})," Prometheus + Grafana"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security:"})," Snyk / SonarQube / Trivy"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"github-actions-implementation",children:"GitHub Actions Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"workflow-structure",children:"Workflow Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".github/\n\u251c\u2500\u2500 workflows/\n\u2502   \u251c\u2500\u2500 ci-nestjs-service.yml        # NestJS microservice CI\n\u2502   \u251c\u2500\u2500 ci-nextjs-frontend.yml       # Next.js frontend CI\n\u2502   \u251c\u2500\u2500 cd-production.yml            # Production deployment\n\u2502   \u251c\u2500\u2500 security-scan.yml            # Security scanning\n\u2502   \u2514\u2500\u2500 performance-test.yml         # Performance testing\n\u251c\u2500\u2500 actions/                         # Custom actions\n\u2502   \u251c\u2500\u2500 setup-node/\n\u2502   \u251c\u2500\u2500 build-docker/\n\u2502   \u2514\u2500\u2500 deploy-k8s/\n\u2514\u2500\u2500 templates/                       # Reusable templates\n    \u251c\u2500\u2500 service-ci.yml\n    \u2514\u2500\u2500 frontend-ci.yml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nestjs-microservice-ci-pipeline",children:"NestJS Microservice CI Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci-nestjs-service.yml\nname: CI - NestJS Service\n\non:\n  push:\n    branches: [main, develop]\n    paths: ['apps/user-service/**']\n  pull_request:\n    branches: [main, develop]\n    paths: ['apps/user-service/**']\n\nenv:\n  SERVICE_NAME: user-service\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}/user-service\n\njobs:\n  lint-and-test:\n    runs-on: ubuntu-latest\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_DB: test_db\n          POSTGRES_USER: test_user\n          POSTGRES_PASSWORD: test_pass\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm ci\n\n      - name: Lint code\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run lint\n\n      - name: Type check\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run type-check\n\n      - name: Run unit tests\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run test:coverage\n        env:\n          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n\n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          file: apps/${{ env.SERVICE_NAME }}/coverage/lcov.info\n          flags: ${{ env.SERVICE_NAME }}\n\n      - name: Run integration tests\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run test:e2e\n        env:\n          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: lint-and-test\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run Snyk to check for vulnerabilities\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --file=apps/${{ env.SERVICE_NAME }}/package.json\n\n      - name: SonarQube Scan\n        uses: sonarqube-quality-gate-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n  build:\n    runs-on: ubuntu-latest\n    needs: [lint-and-test, security-scan]\n    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm ci\n\n      - name: Build application\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run build\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Login to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: apps/${{ env.SERVICE_NAME }}/Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Generate SBOM\n        uses: anchore/sbom-action@v0\n        with:\n          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n          format: spdx-json\n          output-file: sbom.spdx.json\n\n      - name: Upload SBOM\n        uses: actions/upload-artifact@v3\n        with:\n          name: sbom-${{ env.SERVICE_NAME }}\n          path: sbom.spdx.json\n\n  deploy-dev:\n    runs-on: ubuntu-latest\n    needs: build\n    if: github.ref == 'refs/heads/develop'\n    environment: development\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'v1.28.0'\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Update kubeconfig\n        run: |\n          aws eks update-kubeconfig --name dev-cluster --region us-west-2\n\n      - name: Deploy to development\n        run: |\n          envsubst < k8s/development/${{ env.SERVICE_NAME }}.yaml | kubectl apply -f -\n        env:\n          IMAGE_TAG: ${{ github.sha }}\n          ENVIRONMENT: development\n\n      - name: Wait for deployment\n        run: |\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }} -n development --timeout=300s\n\n      - name: Run smoke tests\n        run: |\n          cd apps/${{ env.SERVICE_NAME }}\n          npm run test:smoke\n        env:\n          API_URL: https://dev-api.example.com\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nextjs-frontend-ci-pipeline",children:"Next.js Frontend CI Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci-nextjs-frontend.yml\nname: CI - Next.js Frontend\n\non:\n  push:\n    branches: [main, develop]\n    paths: ['apps/admin-frontend/**']\n  pull_request:\n    branches: [main, develop]\n    paths: ['apps/admin-frontend/**']\n\nenv:\n  APP_NAME: admin-frontend\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}/admin-frontend\n\njobs:\n  lint-and-test:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm ci\n\n      - name: Lint code\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run lint\n\n      - name: Type check\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run type-check\n\n      - name: Run unit tests\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run test:coverage\n\n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          file: apps/${{ env.APP_NAME }}/coverage/lcov.info\n          flags: ${{ env.APP_NAME }}\n\n  build:\n    runs-on: ubuntu-latest\n    needs: lint-and-test\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm ci\n\n      - name: Build application\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run build\n        env:\n          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}\n\n      - name: Analyze bundle\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run analyze\n\n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-${{ env.APP_NAME }}\n          path: apps/${{ env.APP_NAME }}/.next/\n\n  visual-tests:\n    runs-on: ubuntu-latest\n    needs: build\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm ci\n\n      - name: Download build artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: build-${{ env.APP_NAME }}\n          path: apps/${{ env.APP_NAME }}/.next/\n\n      - name: Run Storybook tests\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run storybook:test\n\n      - name: Run Chromatic\n        uses: chromaui/action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          workingDir: apps/${{ env.APP_NAME }}\n\n  e2e-tests:\n    runs-on: ubuntu-latest\n    needs: build\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm ci\n\n      - name: Install Playwright browsers\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npx playwright install\n\n      - name: Download build artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: build-${{ env.APP_NAME }}\n          path: apps/${{ env.APP_NAME }}/.next/\n\n      - name: Start application\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm start &\n          npx wait-on http://localhost:3000\n\n      - name: Run Playwright tests\n        run: |\n          cd apps/${{ env.APP_NAME }}\n          npm run test:e2e\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report-${{ env.APP_NAME }}\n          path: apps/${{ env.APP_NAME }}/playwright-report/\n\n  docker-build:\n    runs-on: ubuntu-latest\n    needs: [lint-and-test, visual-tests, e2e-tests]\n    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Login to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: apps/${{ env.APP_NAME }}/Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"production-deployment-pipeline",children:"Production Deployment Pipeline"}),"\n",(0,r.jsx)(n.h3,{id:"cd-production-workflow",children:"CD Production Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/cd-production.yml\nname: CD - Production Deployment\n\non:\n  push:\n    tags: [\'v*\']\n  workflow_dispatch:\n    inputs:\n      service:\n        description: \'Service to deploy\'\n        required: true\n        type: choice\n        options:\n          - user-service\n          - product-service\n          - order-service\n          - admin-frontend\n          - customer-frontend\n      version:\n        description: \'Version to deploy\'\n        required: true\n        type: string\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    outputs:\n      services: ${{ steps.services.outputs.matrix }}\n      version: ${{ steps.version.outputs.version }}\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Determine services to deploy\n        id: services\n        run: |\n          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then\n            echo "matrix=[\\"${{ github.event.inputs.service }}\\"]" >> $GITHUB_OUTPUT\n          else\n            # Deploy all services for tag push\n            echo "matrix=[\\"user-service\\", \\"product-service\\", \\"order-service\\", \\"admin-frontend\\", \\"customer-frontend\\"]" >> $GITHUB_OUTPUT\n          fi\n\n      - name: Determine version\n        id: version\n        run: |\n          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then\n            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT\n          else\n            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT\n          fi\n\n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: prepare\n    environment: staging\n    strategy:\n      matrix:\n        service: ${{ fromJson(needs.prepare.outputs.services) }}\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: \'v1.28.0\'\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Update kubeconfig\n        run: |\n          aws eks update-kubeconfig --name staging-cluster --region us-west-2\n\n      - name: Deploy to staging\n        run: |\n          envsubst < k8s/staging/${{ matrix.service }}.yaml | kubectl apply -f -\n        env:\n          IMAGE_TAG: ${{ needs.prepare.outputs.version }}\n          ENVIRONMENT: staging\n\n      - name: Wait for deployment\n        run: |\n          kubectl rollout status deployment/${{ matrix.service }} -n staging --timeout=300s\n\n  performance-tests:\n    runs-on: ubuntu-latest\n    needs: [prepare, deploy-staging]\n    environment: staging\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: \'18\'\n\n      - name: Install k6\n        run: |\n          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69\n          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list\n          sudo apt-get update\n          sudo apt-get install k6\n\n      - name: Run performance tests\n        run: |\n          k6 run tests/performance/load-test.js\n        env:\n          BASE_URL: https://staging-api.example.com\n\n  security-tests:\n    runs-on: ubuntu-latest\n    needs: [prepare, deploy-staging]\n    environment: staging\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run OWASP ZAP scan\n        uses: zaproxy/action-full-scan@v0.4.0\n        with:\n          target: \'https://staging.example.com\'\n\n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [prepare, deploy-staging, performance-tests, security-tests]\n    environment: production\n    strategy:\n      matrix:\n        service: ${{ fromJson(needs.prepare.outputs.services) }}\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: \'v1.28.0\'\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Update kubeconfig\n        run: |\n          aws eks update-kubeconfig --name prod-cluster --region us-west-2\n\n      - name: Deploy to production\n        run: |\n          envsubst < k8s/production/${{ matrix.service }}.yaml | kubectl apply -f -\n        env:\n          IMAGE_TAG: ${{ needs.prepare.outputs.version }}\n          ENVIRONMENT: production\n\n      - name: Wait for deployment\n        run: |\n          kubectl rollout status deployment/${{ matrix.service }} -n production --timeout=600s\n\n      - name: Run smoke tests\n        run: |\n          cd tests/smoke\n          npm ci\n          npm run test\n        env:\n          API_URL: https://api.example.com\n\n      - name: Notify deployment\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: \'#deployments\'\n          text: \'\ud83d\ude80 ${{ matrix.service }} ${{ needs.prepare.outputs.version }} deployed to production\'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"multi-stage-dockerfile-for-nestjs",children:"Multi-stage Dockerfile for NestJS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# apps/user-service/Dockerfile\n# Build stage\nFROM node:18-alpine AS builder\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nCOPY apps/user-service/package*.json ./apps/user-service/\n\n# Install dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy source code\nCOPY apps/user-service ./apps/user-service\nCOPY libs ./libs\n\n# Build application\nWORKDIR /app/apps/user-service\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\n\n# Create app user\nRUN addgroup -g 1001 -S nodejs && adduser -S nestjs -u 1001\n\nWORKDIR /app\n\n# Copy built application\nCOPY --from=builder --chown=nestjs:nodejs /app/apps/user-service/dist ./dist\nCOPY --from=builder --chown=nestjs:nodejs /app/apps/user-service/package*.json ./\n\n# Install production dependencies\nRUN npm ci --only=production && npm cache clean --force\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# Set user\nUSER nestjs\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD ["node", "dist/main.js"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dockerfile-for-nextjs",children:"Dockerfile for Next.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# apps/admin-frontend/Dockerfile\nFROM node:18-alpine AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\nCOPY apps/admin-frontend/package*.json ./\nRUN npm ci\n\nFROM node:18-alpine AS builder\nWORKDIR /app\n\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY apps/admin-frontend ./\n\nENV NEXT_TELEMETRY_DISABLED 1\n\nRUN npm run build\n\nFROM node:18-alpine AS runner\nWORKDIR /app\n\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\n\nCMD ["node", "server.js"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"kubernetes-deployment-manifests",children:"Kubernetes Deployment Manifests"}),"\n",(0,r.jsx)(n.h3,{id:"service-deployment",children:"Service Deployment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# k8s/production/user-service.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  namespace: production\n  labels:\n    app: user-service\n    version: ${IMAGE_TAG}\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n        version: ${IMAGE_TAG}\n    spec:\n      containers:\n      - name: user-service\n        image: ghcr.io/company/user-service:${IMAGE_TAG}\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: "production"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: url\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-secret\n              key: url\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\n  namespace: production\nspec:\n  selector:\n    app: user-service\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: user-service\n  namespace: production\n  annotations:\n    kubernetes.io/ingress.class: "nginx"\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\nspec:\n  tls:\n  - hosts:\n    - api.example.com\n    secretName: api-tls\n  rules:\n  - host: api.example.com\n    http:\n      paths:\n      - path: /api/users\n        pathType: Prefix\n        backend:\n          service:\n            name: user-service\n            port:\n              number: 80\n'})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,r.jsx)(n.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# monitoring/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"rules/*.yml\"\n\nscrape_configs:\n  - job_name: 'kubernetes-services'\n    kubernetes_sd_configs:\n      - role: service\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n\n  - job_name: 'user-service'\n    static_configs:\n      - targets: ['user-service:3000']\n    metrics_path: '/metrics'\n\n  - job_name: 'admin-frontend'\n    static_configs:\n      - targets: ['admin-frontend:3000']\n    metrics_path: '/api/metrics'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"grafana-dashboards",children:"Grafana Dashboards"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Microservices Overview",\n    "panels": [\n      {\n        "title": "Request Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total[5m])",\n            "legendFormat": "{{service}}"\n          }\n        ]\n      },\n      {\n        "title": "Response Time",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "95th percentile"\n          }\n        ]\n      },\n      {\n        "title": "Error Rate",\n        "type": "singlestat",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total{status=~\\"5..\\"}[5m]) / rate(http_requests_total[5m]) * 100"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"quality-gates-and-policies",children:"Quality Gates and Policies"}),"\n",(0,r.jsx)(n.h3,{id:"branch-protection-rules",children:"Branch Protection Rules"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# .github/branch-protection.yml\nprotection_rules:\n  main:\n    required_status_checks:\n      strict: true\n      contexts:\n        - "CI - NestJS Service"\n        - "CI - Next.js Frontend"\n        - "Security Scan"\n    enforce_admins: true\n    required_pull_request_reviews:\n      required_approving_review_count: 2\n      dismiss_stale_reviews: true\n      require_code_owner_reviews: true\n    restrictions:\n      users: []\n      teams: ["senior-developers", "architects"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"quality-gates",children:"Quality Gates"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# sonar-project.properties\nsonar.projectKey=ecommerce-platform\nsonar.organization=company\nsonar.sources=src\nsonar.tests=src\nsonar.test.inclusions=**/*.spec.ts,**/*.test.ts\nsonar.coverage.exclusions=**/*.spec.ts,**/*.test.ts,**/main.ts\nsonar.typescript.lcov.reportPaths=coverage/lcov.info\n\n# Quality Gate Conditions\nsonar.qualitygate.wait=true\nsonar.qualitygate.timeout=300\n\n# Coverage Requirements\nsonar.coverage.minimum=80\n\n# Duplication Requirements  \nsonar.cpd.exclusions=**/*.spec.ts,**/*.test.ts\n\n# Security Requirements\nsonar.security.hotspots.inheritFromParent=true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.h3,{id:"k6-load-testing-script",children:"K6 Load Testing Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// tests/performance/load-test.js\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\n\nexport let options = {\n  stages: [\n    { duration: '2m', target: 10 }, // Ramp up\n    { duration: '5m', target: 10 }, // Stay at 10 users\n    { duration: '2m', target: 20 }, // Ramp up to 20 users\n    { duration: '5m', target: 20 }, // Stay at 20 users\n    { duration: '2m', target: 0 },  // Ramp down\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)<500'], // 95% of requests under 500ms\n    http_req_failed: ['rate<0.05'],   // Error rate under 5%\n  },\n};\n\nconst BASE_URL = __ENV.BASE_URL || 'http://localhost:3000';\n\nexport default function() {\n  // Test user creation\n  let response = http.post(`${BASE_URL}/api/users`, {\n    firstName: 'Test',\n    lastName: 'User',\n    email: `test-${Math.random()}@example.com`,\n    password: 'TestPassword123!',\n  }, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  check(response, {\n    'status is 201': (r) => r.status === 201,\n    'response time < 500ms': (r) => r.timings.duration < 500,\n  });\n\n  sleep(1);\n\n  // Test user list\n  response = http.get(`${BASE_URL}/api/users`);\n  \n  check(response, {\n    'status is 200': (r) => r.status === 200,\n    'has users': (r) => JSON.parse(r.body).length > 0,\n  });\n\n  sleep(1);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/scm-policy",children:"SCM Policy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next Steps:"})," After CI/CD setup, proceed to implement monitoring and observability practices for your microservices."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(9729);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);