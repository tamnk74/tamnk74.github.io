"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6698],{2398:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"architecture-practices/index","title":"Architecture Practices for NestJS & Next.js","description":"This section provides detailed implementation guides for each architecture practice identified in the Architecture Maturity Assessment. Each guide is specifically tailored for NestJS microservices and Next.js microfrontend architectures.","source":"@site/docs/architecture-practices/index.md","sourceDirName":"architecture-practices","slug":"/architecture-practices/","permalink":"/fullstack-dev/docs/architecture-practices/","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quality Assurance Maturity Assessment - Action Plan","permalink":"/fullstack-dev/docs/qa-practices/qa-assessment/qa-maturity-assessment-action-plan"},"next":{"title":"SCM Policy for NestJS & Next.js Microservices","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/scm-policy"}}');var s=i(5813),r=i(5741);const a={},o="Architecture Practices for NestJS & Next.js",d={},c=[{value:"Architecture Maturity Assessment",id:"architecture-maturity-assessment",level:2},{value:"Practice Categories",id:"practice-categories",level:2},{value:"\ud83c\udfd7\ufe0f Architecture Definition",id:"\ufe0f-architecture-definition",level:3},{value:"Architecture &amp; Coding Guidance",id:"architecture--coding-guidance",level:4},{value:"Communication &amp; Alignment",id:"communication--alignment",level:4},{value:"Non-functional Requirements",id:"non-functional-requirements",level:4},{value:"Technical Refinement &amp; Design",id:"technical-refinement--design",level:4},{value:"Architecture Execution (12/13 practices completed)",id:"architecture-execution-1213-practices-completed",level:3},{value:"Continuous Deployment",id:"continuous-deployment",level:4},{value:"Continuous Integration",id:"continuous-integration",level:4},{value:"Continuous Monitoring",id:"continuous-monitoring",level:4},{value:"\ud83d\udcca Architecture Management",id:"-architecture-management",level:3},{value:"People &amp; Technical Skills Development",id:"people--technical-skills-development",level:4},{value:"\u2705 Architecture Validation",id:"-architecture-validation",level:3},{value:"Architecture Evaluation &amp; Testing",id:"architecture-evaluation--testing",level:4},{value:"Implementation Approach",id:"implementation-approach",level:2},{value:"\ud83c\udfaf Getting Started",id:"-getting-started",level:3},{value:"\ud83d\udcc8 Maturity Progression",id:"-maturity-progression",level:3},{value:"\ud83d\udd17 Cross-References",id:"-cross-references",level:3},{value:"Technology-Specific Considerations",id:"technology-specific-considerations",level:2},{value:"NestJS Microservices",id:"nestjs-microservices",level:3},{value:"Next.js Microfrontends",id:"nextjs-microfrontends",level:3},{value:"Support and Contribution",id:"support-and-contribution",level:2},{value:"Getting Help",id:"getting-help",level:3},{value:"Contributing",id:"contributing",level:3}];function h(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"architecture-practices-for-nestjs--nextjs",children:"Architecture Practices for NestJS & Next.js"})}),"\n",(0,s.jsxs)(t.p,{children:["This section provides detailed implementation guides for each architecture practice identified in the ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-maturity-assessment",children:"Architecture Maturity Assessment"}),". Each guide is specifically tailored for NestJS microservices and Next.js microfrontend architectures."]}),"\n",(0,s.jsx)(t.h2,{id:"architecture-maturity-assessment",children:"Architecture Maturity Assessment"}),"\n",(0,s.jsx)(t.p,{children:"The following table outlines all architecture practices organized by area, practice category, implementation phase, and maturity level:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"#"}),(0,s.jsx)(t.th,{children:"Area"}),(0,s.jsx)(t.th,{children:"Practice"}),(0,s.jsx)(t.th,{children:"Phase"}),(0,s.jsx)(t.th,{children:"Maturity Level"}),(0,s.jsx)(t.th,{children:"Criteria"}),(0,s.jsx)(t.th,{children:"Help Text \ud83d\udca1"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The SCM (Source Control Management) policy is defined and documented."}),(0,s.jsx)(t.td,{children:"The Source Control Management policy is a set of rules related to source control that are agreed with the development team. What are the main branches, what are the rules for the developer to create new branches, naming conventions for branches, what are the conventions for commit messages? What are the rules to create Pull Request? When the branches will get merged? Those are some of the topics that should be covered in the Source Control Management policy. There should be a document that includes all this information. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All needed software and tools (include versions) for the local environment (developer environment) are documented."}),(0,s.jsx)(t.td,{children:"It is necessary to have a list of all needed software and tools, as well as the version of the utilized tool so any developer can consult it any time they need. It is also useful in case there is any new member joining the team. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Coding (includes Unit Testing) practices, coding conventions are documented, explained and followed."}),(0,s.jsx)(t.td,{children:"It is important for the project members to have a way to consult how to implement the coding conventions, patterns, and best practices. Providing some cone snippets as examples can also be a good way to put everyone on the same page. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is a guide of flows/steps of special development use-cases (e.g. How to run custom tools, how to set environment variables\u2026)"}),(0,s.jsx)(t.td,{children:"It is necessary to provide documentation to the developers about how to set up their local environments. If there is any custom tool or script that is part of the process of setting up the local environment, the steps need to be clear in the document. If any new member joins the team, he or she should be able to set their local environments with low support. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All the necessary KT (Knowledge Transfer) meetings are planned with stakeholders and partners."}),(0,s.jsx)(t.td,{children:"This item applies when the team is receiving a new application from a third party or when there is a new integration with third parties that requires some knowledge transfer sessions. In this case, it is very important to have those knowledge transfer sessions scheduled and make sure that all stakeholders and technical people required are involved in these meetings."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"6"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There are tools that will be used to check code style (lint, ESlint, PHPcs, stylecopaalyzers, etc)."}),(0,s.jsx)(t.td,{children:"It is important to establish a process to check the source code that is being created by the development team. Ideally, the code style verification should be incorporated in the code commit flow through git hooks, so we never allow code that is not compliant with the coding style rules to go further. There are different types of tools to check the code style, it differs depending on the technology that is being used in the project."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"7"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The foundation of the application architecture is defined and documented (E.g. application layers, frameworks, logging mechanism, error handling mechanism, transaction control mechanism)."}),(0,s.jsxs)(t.td,{children:["The architecture foundation is the basic structure of software architecture, including what are the application and data layers. The architecture foundation document should include all key mechanisms such as logging, mailing, CRUD structure, API structures, design patterns. We recommends the C4 model (",(0,s.jsx)(t.a,{href:"https://c4model.com/",children:"https://c4model.com/"}),"), but other techniques can be used as long as it contains the needed level of details for everyone to understand it. It is important to set up meetings to share the overall diagrams and put everyone on the same page, especially the development team needs to be fully aware. Every time that there is an important change in the diagram, it should be also aligned with everyone. The document should be always maintained and up to date."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The backup/restore strategy for the Production environment (database, files, etc) is defined and documented."}),(0,s.jsx)(t.td,{children:"Backup and restore refers to practices for making periodic copies of data and applications to a separate, secondary device and then using those copies to recover the data and applications\u2014and the business operations on which they depend\u2014in the event that the original data and applications are lost. The information about the backup strategy should be documented and shared with the team. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"9"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Internal and external important 3rd party APIs, libraries, frameworks, tools that are being used are documented."}),(0,s.jsx)(t.td,{children:"3rd party APIs and libraries refers to any API (Restful, GraphQL api, etc) or libraries (SDK, pluggin, etc) that were not developed by other companies, not OTS. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"10"}),(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All the data input by the user in any request are validated in the implemented code. Null or empty values/arrays must be taken into consideration."}),(0,s.jsx)(t.td,{children:"The incorrect handling of data inputted by the user or received as a response from third-party APIs may lead to incidents on production later on. Not only the happy path should be covered during the testing. It is necessary to test the behavior of methods when receiving empty or null values as well."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Business & Technical communication channels are facilitated and used effectively."}),(0,s.jsx)(t.td,{children:"The communication channel is the way utilized in the project to communicate with the client, stakeholders, and third parties. Many different channels such as slack, google chat, email, and teams can be used. However, it is necessary to ensure that the communication flows well and is facilitated. This item is to ensure that the team is thinking of ways to improve the communication if there is room for improvement."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All the development policies, rules, conventions and plans are communicated to the team (e.g. SCM policy, Backup/restore plan, coding style convention, NFR metric targets, Unit test implementation process\u2026)"}),(0,s.jsx)(t.td,{children:"Besides having all the information documented and available to the team, it is important to have all relevant technical information also communicated to them. Communication over video meetings or in-person meetings should be the preferable method. Communication written in the chat is an alternative way, however in this case it is important to ensure that everyone has read and understood the information."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All big technical solutions and decisions are being communicated to the client. If there is any big change in the architecture, the change is also properly communicated to the stakeholders."}),(0,s.jsx)(t.td,{children:"Besides keeping the architecture documentation up to date, it is also important to communicate with the client and stakeholders whenever there is a significant change in the overall architecture. A meeting should be scheduled to communicate with the stakeholders about those changes, and the architecture diagrams can be used to explain it to them."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The overall Architecture diagram is shared and explained to all project stakeholders."}),(0,s.jsxs)(t.td,{children:["An architectural diagram is a diagram of a system that is used to abstract the overall outline of the software system and the relationships, constraints, and boundaries between components. We recommends the C4 model (",(0,s.jsx)(t.a,{href:"https://c4model.com/",children:"https://c4model.com/"}),"), but other techniques can be used as long as it contains the needed level of details for everyone to understand it. It is important to set up meetings to share the overall diagrams and put everyone on the same page: development team, third parties and stakeholders. Every time that there is an important change in the diagram, it should be also aligned with everyone. The document should be always maintained and up to date."]}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All the Non-functional requirements related to the application are being mapped and collected."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. It is very important to identify all key NFRs of the project and document it and get approval from stakeholders. Remember that non-implemented NFRs may lead to gaps in the stakeholders' expectations and even become a production incident in the future."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The business stories are split into small testable-deployable features."}),(0,s.jsx)(t.td,{children:"The business stories should be split into smaller testable parts. This will increase the predictability and the understanding of the team towards the task, thus reducing the risks."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The technologies utilized in the project are vastly adopted there is no doubt about its capabilities; There is no early adoption and betas versions. Especially any infrastructure component must apply Global Availability version and have SLA/technical support commitment."}),(0,s.jsx)(t.td,{children:"Ideally, new technologies that are still in alpha or beta should be avoided, unless it is already vastly adopted by other projects. In case of any questions or concerns, other Architects from different projects can be consulted before making the decision to use the technology."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is a way to track the artifact version deployed in each environment."}),(0,s.jsx)(t.td,{children:"The artifact is the set of files that resulted from the build. For compiled languages, it can be a binary file or a jar file for example. For interpreted languages, the artifact is a snapshot of the source code, for example, a zip file containing all the needed files to run the application. This item refers to given an artifact, whether it is possible to track down the version of this artifact or the build number."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is a source code version control tool (git, svn, etc) and the team uses it efficiently."}),(0,s.jsx)(t.td,{children:"Version control, also known as source control, is the practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time. This item is about whether there is a source control tool and the team can understand how to use it and the team members do not commit trivial mistakes while using the to"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Commit messages contains the related business ticket information, such as ticket number."}),(0,s.jsx)(t.td,{children:"The commit messages should contain the related business ticket so it can be tracked down in case of need. If any issue or bug raises, it should be very simple to investigate and understand the business background behind those changes represented in the commit."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"Merge requests contain an informative description of related business tickets."}),(0,s.jsx)(t.td,{children:"The merge requests messages should contain the related business tickets so it is possible to track them down in case of need. If any issue or bug raises, it should be very simple to investigate and understand the business background behind those changes represented in the commit."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There are separated environments for development, testing and production (including the database)."}),(0,s.jsx)(t.td,{children:"Having dedicated environments for dev, test (stage), and production is a very basic best practice."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The steps to set up the local environment (developer environment) are not considered complicated and the team has no difficulties following it."}),(0,s.jsx)(t.td,{children:"The steps to set up the local environment should not be complicated. If there are lots of steps, other solutions like docker containers or script automation should be considered to make it simpler."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is a tool to manage all the application libraries and dependencies (maven, nuget, bower, npm, etc)."}),(0,s.jsx)(t.td,{children:"The third-party libraries used by the application should be not committed and pushed along with the code created by the development team. This makes source code management not efficient and complex. Library management tools should be leveraged instead. The tool differs according to the technology used. Maven (or equivalent) for Java, npm for Nodejs, Cocoapods for iOS, etc. In this case, only the main file that contains the reference for the libraries and their versions should be committed and pushed along with the code. The folder that contains the actual code should be added to the ignore list."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There are monitoring tools for production infrastructure and there is a team in charge of following up."}),(0,s.jsx)(t.td,{children:"It is an essential practice to apply monitoring solutions to production infrastructure to monitor the health of servers. It should at least track memory, CPU, and disk usage and notify whenever something goes wrong with those metrics. This item is about whether this kind of monitoring is applied to production servers and whether there is a team responsible for it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There are monitoring tools for the production application and there is a team in charge of following up."}),(0,s.jsx)(t.td,{children:"It is an essential practice to apply monitoring solutions to the production application to monitor the health of the application and its critical business flows. It should at least cover the critical business flows, API monitoring for authentication, user registration, etc. This item is about whether this kind of monitoring is applied to the production application and whether there is a team responsible for it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There are documents describing the operation of branches, build pipelines, release pipelines, and environments."}),(0,s.jsx)(t.td,{children:"This item refers to whether there is any documentation that describes the basic operation that is part of the daily basis of the development team (branches, build pipelines, ci/cd servers, and environments). The documentation should be kept always up to date, and everyone from the development team should have easy access to it. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"People & Technical Skills Development"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is a knowledge map from where it is possible to see the technical skills of the team."}),(0,s.jsx)(t.td,{children:"The Architect is responsible for gathering the technical skills of the team members in a document (form, spreadsheet, etc). The document should be regularly updated (not more than 3 months). This document is very useful for the Architect to prepare/propose training sessions for the developers based on the gaps identified. This item is related to whether there is this document where is possible to see the team skills."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Project Plan & Architecture Roadmap"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"There is an architecture Roadmap where all the key technical milestones and PoCs are listed; The technical tasks are in sync with the business stories (the technical preparation starts one sprint before the business story)"}),(0,s.jsx)(t.td,{children:"A roadmap is a strategic plan that defines a goal or desired outcome and includes the major steps or milestones needed to reach it. An Architecture Roadmap is a roadmap that contains all critical milestones of the project for the upcoming months: big PoCs, security test planning & execution dates, performance tests planning & execution dates, deployment dates, etc. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Risks & Blocks management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The Architecture maturity level PDCA (C&A) meetings are being conducted at least monthly basis."}),(0,s.jsx)(t.td,{children:"The Architecture maturity PDCA meeting stands for Plan Do Check Act (also known as Architecture C&A). This refers to this meeting when we go through the checklist items checking whether the best practices are being followed in the project. The recommended frequency is bi-weekly basis, but the minimum acceptable frequency should be once a month."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Risks & Blocks management"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The Solution Review meeting is always conducted when the project has a significant technical issue/technical decision, and other Software Architects from different projects are invited to join."}),(0,s.jsx)(t.td,{children:"A Solution Review is a meeting that can be organized by any Architect, at any time. The Architect will invite architects from other projects in order to review some technical solutions provided or get advice from other perspectives. It is recommended to schedule this kind of meeting anytime there is a significant technical issue or big decision. It is always good to hear the opinion of other people."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The architecture backlog is being managed through follow-up meetings and the architecture tasks are being prioritized at an acceptable frequency (at least bi-weekly)."}),(0,s.jsx)(t.td,{children:"The Architecture backlog is a set of technical tasks that are managed by the Architect apart from the official product backlog. The tasks inside the architecture backlog do not generate direct value to the product, thus it is treated separated and there is no commitment about the delivery as a normal User Story. The Architect is responsible for including and prioritizing those tasks, whenever there is technical debt in the application, action items that came from the Architecture PDCA (C&A meetings), performance gaps in the application, wrong coding standards, anti-patterns that are inside the code, etc. The tasks in the architecture backlog are not counted in the burndown chart because those are not part of the commitment in the sprint target, however, those tasks should be part of the Architect's responsibility and regular activities from the Architect. Ideally, the Architect will be occupied half of the time with the Technical Refinement of the upcoming sprint, and the other half of the time he will be working on the Architecture backlog."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The code quality is followed by performing code reviews and the process is documented and known by the team members."}),(0,s.jsx)(t.td,{children:"The code review process differs according to the application and technology utilized. It is a good practice to have a checklist that includes the areas that should be verified before approving a pull request (security aspects, design pattern, performance aspects, etc). This item refers to whether the rules and best practices related to code quality are followed by the team and whether those code review rules are documented and known by the development team."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The application is being validated across different browsers (for web), different devices (for mobile) and resolutions according to the requirements."}),(0,s.jsx)(t.td,{children:"This is a basic item related to the testing process. All the supported browsers and devices should be listed up and the development team should be aware of this information. Before finishing a task, the developer should validate the application across all supported devices to avoid rework in the future. The sooner the bug is caught the cheaper is to fix it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The important web forms are protected with anti-spam mechanisms (Captcha or equivalent)."}),(0,s.jsx)(t.td,{children:"Form spam is the submission of website forms by human scammers or spambots with malicious intent. The information in these form submissions is false and they may contain abusive language, ads to other websites, or links to phishing websites and sites that download malware. There are several reasons scammers target websites with spam including spreading malware, stealing personal information, placing invisible links, and even hijacking control of the website. CAPTCHA stands for the Completely Automated Public Turing test to tell Computers and Humans Apart. CAPTCHAs are tools you can use to differentiate between real users and automated users, such as bots. CAPTCHAs provide challenges that are difficult for computers to perform but relatively easy for humans. For example, identifying stretched letters or numbers, or clicking in a specific area. By applying this technique, it is possible to prevent the webforms to be submitted by bots. This item is applicable for projects that have web forms and it refers to whether there are mechanisms to prevent it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All CSS and JS files are compressed and minified, and the images are optimized for the web to reduce bandwidth usage."}),(0,s.jsx)(t.td,{children:"Minification is the process of minimizing code and markup in your web pages and script files. It's one of the main methods used to reduce load times and bandwidth usage on websites. Minification dramatically improves site speed and accessibility, directly translating into a better user experience. It's also beneficial to users accessing your website through a limited data plan and who would like to save on their bandwidth usage while surfing the web. The images also should be optimized and thumbnails with specific resolutions should be created according to the utilization purpose. For example, if you have a website that is showing up a list of items including a squared small visualization of the image, the original high-resolution image should not be used in this case. A specific smaller image should be generated for this purpose, otherwise, the bandwidth utilization will not be optimized."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The response headers related to caching are being properly implemented for the application (cache-control with correct cacheability and max-age, etc)."}),(0,s.jsx)(t.td,{children:"Cache-Control is an HTTP cache header that contains a set of parameters to define the browser's caching policies in the client requests and server responses. When a client makes a request to the server, the browser can cache, or store copies of resources for faster access and lower latency. This means that when the browser has to receive these files again, it doesn't need to make a request to the web server again. Cache-Control specifies when and how a response should be cached and for how long. For web applications, it is important to ensure that the HTTP cache response headers are implemented correctly."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All non-production environments are protected under Basic Authentication, IP Whitelist or equivalent and web crawlers (Google, Yahoo, Bing) are not able to index the contents on the web."}),(0,s.jsx)(t.td,{children:"If the non-production environments are not protected accordingly, that may lead to critical incidents such as leakage of important data or having non-production content getting indexed by Google. We should always protect non-production environments through IP whitelist, robots.txt files, Basic authentication, etc. Ideally, the non-production environments should also be monitored so it will send the team an alert in case of this protection was removed."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"All the critical performance areas are covered by performance testing."}),(0,s.jsx)(t.td,{children:"Performance testing is a non-functional software testing technique that determines how the stability, speed, scalability, and responsiveness of an application hold up under a given workload. Covering the critical performance areas mean that the performance of the main business flows in the application is being tested. (For example: User registration form, Log-in screen, etc)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"1"}),(0,s.jsx)(t.td,{children:"The performance tests are periodically executed, and the frequency is considered adequate."}),(0,s.jsx)(t.td,{children:"Performance testing is a non-functional software testing technique that determines how the stability, speed, scalability, and responsiveness of an application hold up under a given workload. Periodically executed means that the performance is tested again everytime that there is a big change in the system."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The rollback strategy is described in the SCM (Source Control Management) plan."}),(0,s.jsx)(t.td,{children:"The Source Control Management policy is a set of rules related to source control that are agreed with the development team. What are the main branches, what are the rules for the developer to create new branches, naming conventions for branches, what are the conventions for commit messages? What are the rules to create Pull Request? When the branches will get merged? Those are some of the topics that should be covered in the Source Control Management policy. There should be a document that includes all this information. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The details about how/when the PR (Pull requests) are created and what are the protected branches are included in the SCM (Source Control Management) plan."}),(0,s.jsx)(t.td,{children:"The Source Control Management policy is a set of rules related to source control that are agreed with the development team. What are the main branches, what are the rules for the developer to create new branches, naming conventions for branches, what are the conventions for commit messages? What are the rules to create Pull Request? When the branches will get merged? Those are some of the topics that should be covered in the Source Control Management policy. There should be a document that includes all this information. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The technical documentation is being updated during the project development (when it affects existing documents)."}),(0,s.jsx)(t.td,{children:"The technical documentation means architecture diagrams, coding standards, sequence diagrams, source control management plan, or any other documentation created by the Architect or development team. The documentation should be updated as soon as any changes come up."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The backup/restore strategy for pre-production environments (database, files, etc) is defined and documented."}),(0,s.jsx)(t.td,{children:"Backup and restore refers to practices for making periodic copies of data and applications to a separate, secondary device and then using those copies to recover the data and applications\u2014and the business operations on which they depend\u2014in the event that the original data and applications are lost. The information about the backup strategy should be documented and shared with the team. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"It is clear for all the developers how to implement unit tests for the technology stack used in the project. The process is defined and documented."}),(0,s.jsx)(t.td,{children:"It is important for the project members to have a way to consult how to implement Unit Tests in case there are any questions. Sometimes the Unit Test framework is not intuitive, therefore it is necessary to have all the information documented. Providing some cone snippets as examples can also be a good way to put everyone on the same page. The document should be always maintained and up to date. There is no standard format for the documentation, it can be a Wiki, docx, ppt, pdf, README file, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"All the team members, including development, infrastructure and business members share the same communication tool (Teams, Google Chat, Slack, etc)."}),(0,s.jsx)(t.td,{children:"Putting everyone together on the same communication tool is a way to enhance the collaboration in the project. To be faster, people need to be available and respond promptly. This item is about whether all key people share the same communication tools. If not, there should be a consensus and only one tool should be selected as much as we can."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"All the Non-functional requirements related to the application are being mapped and collected using the Non-functional requirements template."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. It is very important to identify all key NFRs of the project and document it and get approval from stakeholders. Remember that non-implemented NFRs may lead to gaps in the stakeholders' expectations and even become a production incident in the future. This item refers to whether we are following the default company template. If not, the team should come up with an action plan to have everything documented according to the template."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The Non-functional requirements are approved by the stakeholders/business side."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. It is very important to identify all key NFRs of the project and document it and get approval from stakeholders. Remember that non-implemented NFRs may lead to gaps in the stakeholders' expectations and even become a production incident in the future. This item refers to whether the NFRs are being officially approved by the business or stakeholders. Items that are not officially approved are considered out of scope for the development, thus they cannot be considered as a bug or incident in case some issue occurs in the future."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:'The technical refinement usually finishes on time (it is usually done before the planning of the upcoming sprint). The "Heijunka" concept is being followed accordingly.'}),(0,s.jsx)(t.td,{children:'The Architect should be able to finish all the technical preparation for the upcoming sprint one sprint beforehand. This is what we call "technical refinement". The technical refinement should be done together with the PO / PPO and a document should be written to provide technical guidance for the developer, so when they start developing the sprint there are no technical doubts or big discussions about the solution. Heijunka is a Lean method for reducing the unevenness in a production process and minimizing the chance of overburden. The term Heijunka comes from Japanese and literally means leveling. It can help you react to demand changes and utilize your capacity in the best possible way.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is a definition about how to load data for automated testing and this plan meets the project requirements."}),(0,s.jsx)(t.td,{children:"Sometimes, in test automation it is necessary to load data to be able to reproduce and test critical business flows. This item is about whether the data required for test automation is properly planned to meet the business requirements being able to reproduce it during the test execution."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The top important non-functional requirements related to performance are defined and mapped within each business story."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. It is very important to identify all key NFRs of the project and document it and get approval from stakeholders. Remember that non-implemented NFRs may lead to gaps in the stakeholders' expectations and even become a production incident in the future. Ideally, the NFR should be identified and a sub-task should be created in the User Story to tackle the NFR related to that business story."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The Non-functional requirements related to security are defined and mapped within each individual business story."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. It is very important to identify all key NFRs of the project and document it and get approval from stakeholders. Remember that non-implemented NFRs may lead to gaps in the stakeholders' expectations and even become a production incident in the future. Ideally, the NFR related to security should be identified and a sub-task should be created in the User Story to tackle the NFR related to that business story."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is a goal in terms of target automated test coverage percentage and this target is aligned with the team and stakeholders."}),(0,s.jsx)(t.td,{children:"Test coverage is defined as a technique that determines whether our test cases are covering the application code and how much code is exercised when we run those test cases. If there are 10 requirements and 100 tests created and if 90 tests are executed then test coverage is 90%. The type of automated testing applied will depend on each project. This item is about whether there is a goal in terms of percentage and whether the development team and stakeholders are aware of this goal. Having everyone aware of the goal will increase the engagement of everyone to achieve it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is a goal for the metrics (Complexity, Duplications, Issues, Maintainability, Reliability, Comments, etc) related to static code analysis. The goal is communicated to the team members."}),(0,s.jsx)(t.td,{children:"Static analysis, also called static code analysis, is the process of analyzing a computer program to find problems in it without actually executing it. One of the most famous static code analysis tools is SonarQube. However, it is not mandatory to use SonarQube as long as there is an equivalent tool. Static analysis tools will usually collect metrics like complexity, code duplications, maintainability issues, etc. This item is about whether there is a target for those metrics and the team members understand those targets."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"NFR is being reviewed every time business requirements changed (via backlog refinement, planning, customer feedback, etc)"}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. This item is about whether the NFR document is reviewed and updated in case of any changes."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The DevOps lifecycle has been established and discussed with the team and the project stakeholders."}),(0,s.jsx)(t.td,{children:"DevOps lifecycle is defined as a combination of different phases of continuous software development, integration, testing, deployment, and monitoring. A competent DevOps lifecycle is necessary to build superior quality software through the system. When a new project is getting started, it is very important to design what is going to be the DevOps lifecycle and discuss it with the team members and stakeholders. This item is about whether the DevOps lifecycle has been decided, documented, and discussed."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Non-functional requirements"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"There is a target for the NFR metrics. The target is defined and documented."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. This item is about whether there are clear documented targets to achieve and the team is aware of those targets, for example, target speed, target page load time, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The technical refinement document is very well structured; The team understands it and will rarely get blocked due to lack of details in the technical refinement; Continuous improvements are applied to the document through immediate feedback."}),(0,s.jsx)(t.td,{children:"The Architect should be able to finish all the technical preparation for the upcoming sprint one sprint beforehand. One of the signs that the technical refinement was not done properly is when there are lots of technical blocks during the sprint. If this occurs, we should try to find out the root cause to check whether there is an issue with the technical refinement documents. If so, continuous improvement should be applied to the documentation based on the feedback provided by the development team."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Technical debts are kept monitoring and have plan to fix them."}),(0,s.jsx)(t.td,{children:"Technical debt (also known as tech debt or code debt) describes what results when development teams take actions to expedite the delivery of a piece of functionality or a project which later needs to be refactored. In other words, it's the result of prioritizing speedy delivery over perfect code. The Architect needs to keep track of the technical debts, so we can ensure that they are not increasing over time. Moreover, it is necessary to have a plan to reduce those debts in the upcoming sprints."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Communication & Alignment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"There are rituals or meetings to share experiences about DevOps (kaizen meetings, C&A, follow-up meetings)."}),(0,s.jsx)(t.td,{children:'This item refers to "rituals" (meetings, knowledge sharing sessions) that are proactively organized by the team to exchange experiences about the effectiveness of the DevOps practices and whether these meetings are proactively scheduled by the team.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"There is a strategy that helps to reduce the risk of production deployments (blue-green deployment, canary release, feature toggle, etc)."}),(0,s.jsx)(t.td,{children:'Deployment strategies are practices used to change or upgrade a running instance of an application. Blue-green deployment is a deployment strategy that utilizes two identical environments, a "blue" (aka staging) and a "green" (aka production) environment with different versions of an application or service. Quality assurance and user acceptance testing are typically done within the blue environment that hosts new versions or changes. User traffic is shifted from the green environment to the blue environment once new changes have been testing and accepted within the blue environment. You can then switch to the new environment once the deployment is successful.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Architecture & Coding Guidance"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"There are established metrics to measure how effective the DevOps practices are (lead time, deployment frequency, time to recovery, etc)."}),(0,s.jsx)(t.td,{children:'Once the project actives a certain maturity level on DevOps, it is expected that the team should start measuring data so the team will be able to apply continuous improvement on the DevOps lifecycle. That is also connected with the Lean\'s Kaizen mindset. The metrics that are relevant to understand the DevOps lifecycle are: lead time, deployment frequency, time to recovery, etc. Lead time for changes is the length of time between when a code change is committed to the trunk branch and when it is in a deployable state. Understanding the frequency of how often new code is deployed into production is critical to understanding DevOps success. Many practitioners use the term "delivery" to mean code changes that are released into a pre-production staging environment, and reserve "deployment" to refer to code changes that are released into production.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The configuration that is specific for each environment, such as API endpoints and configuration for database connection are configured externally to the deployment package as environment variables."}),(0,s.jsx)(t.td,{children:"Specific configuration for the environment should never be embedded or hardcoded in the source code. That may lead to mistakes because the build artifact could be mistakenly deployed to the wrong environment, or the team may forget to change this information before generating builds, leading to mistakes."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The deployment to the dev, test environments are automated and executed in a CI/CD server (Jenkins, Azure DevOps, etc)."}),(0,s.jsx)(t.td,{children:"The deployment should be automated and centralized in a CI/CD server (or SaaS solution like Azure DevOps) and the deployment to the environments should be automated and executed directly from there. Relying on the local computer is not a good practice and it should be avoided as much as we can."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"It is possible to deploy database changes by running scripts that will incrementally upgrade the database according to the changes relevant to that deployment."}),(0,s.jsx)(t.td,{children:"The deployment should be automated and centralized in a CI/CD server (or SaaS solution like Azure DevOps) and the deployment to the environments should be automated and executed directly from there. Relying on the local computer is not a good practice and it should be avoided as much as we can."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"It is possible to roll back the deployment (code and database)."}),(0,s.jsx)(t.td,{children:'One of the good practices when it comes to database management is to make sure that the changes on the database can be applied along with the code changes, so we will not rely on SQL scripts that need to be executed as a manual step before or after the code deployment. For doing that, it is necessary to adopt some solution such as "Liquibase" of equivalent may help you on that. Having a rollback strategy for the database is also important.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The build to create an artifact for environments is automated, and there are no manual steps, excluding configuring environment variables/settings."}),(0,s.jsx)(t.td,{children:"The build procedure should be very simple and should not require manual or complicated steps. This item is about whether the steps to generate a build targeting a specific environment is automated, meaning that there are no additional manual steps or configuration changes required."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The branches are often synchronized with their parent branches, at least before starting implementation or tests run."}),(0,s.jsx)(t.td,{children:"Synchronizing the parent branch often is a best practice, that may prevent mistakes when performing complex manual merges. The more often the code is in sync, the less trouble the developer may have when merging. This item is about whether the branches are often synced with their parents and whether the frequency is considered adequate."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The team commits the runnable code with a certain frequency (at least once a day)."}),(0,s.jsx)(t.td,{children:"Committing runnable code with more frequency helps to prevent code losses in case one issue happens. It is also easier to debug and understand issues with the code by comparing it with the previous commit. It will also help to track bugs from the commit history. This item refers to whether the whole team is following this practice."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Complex code (about 500 LOCs) merging is not performed with high frequency (twice per week)."}),(0,s.jsx)(t.td,{children:'Complex code merges should be prevented as much as possible by either merging them more often or having a Source Control Management strategy that allows less complex merging. Those merges may lead to conflicts that need to be solved manually. Mistakes may occur when manual merging is done. LOC means "Lines of Code". A merging is considered complex when the number of lines is above 500 and the frequency is higher than twice a week.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The database scheme is exported and versioned in a source code version control tool (git, svn, etc)."}),(0,s.jsx)(t.td,{children:"The database scheme should be tracked along with the code that is compatible with that scheme version. Exporting the database scheme as configuration files is good practice once it allows database versioning and it does not rely on the manual operation to switch the database version. This item refers to whether there is a mechanism in place to export the database scheme as files (sql, yml, etc), and whether those files are tracked in the source control tool along with the source code."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"It is possible to roll back the database version when needed."}),(0,s.jsx)(t.td,{children:"This item refers to whether is possible to roll back the database version when needed. The rollback operation should be very simple, it would require very simple steps or script execution."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The current status of the build is visible to everyone in the team and there is immediate feedback when the build run or fail (email, chat message, etc)"}),(0,s.jsx)(t.td,{children:"The status of the build should be notified to everyone in the team. To increase the alignment with the development team, they should be notified every time that the build runs or fails. If the build fails, the team should take action to fix it as soon as possible."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The build artifact is generated from a CI/CD server (Jenkins, Azure DevOps, etc)"}),(0,s.jsx)(t.td,{children:"The purpose of this item is to ensure that the build is automated and the build artifact is generated from a CI/CD server (it is not built using the developer's local computer)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The time required to complete the build is acceptable (do not take more than 15 minutes), excluding execution time of automation test, quality metric collection, etc."}),(0,s.jsx)(t.td,{children:"A build that takes too long to finish will become a bottleneck and it may cause unnecessary delays and wait time. This item is about whether the build does not take more than 15 minutes (excluding required time for test automation, quality metric collection, etc). If the build takes longer than 15 minutes, it is important to analyze the build steps to figure out whether this time could be reduced by identifying processes that can run in parallel, hardware improvements in the CI/CD server, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The build script steps are controlled using pipeline style or equivalent."}),(0,s.jsx)(t.td,{children:'A continuous delivery (CD) pipeline is an automated expression of your process for getting software from version control right through to your users and customers. Every change to your software (committed in source control) goes through a complex process on its way to being released. This process involves building the software in a reliable and repeatable manner, as well as progressing the built software (called a "build") through multiple stages of testing and deployment. Having the continuous delivery pipeline tracked in the code repository as scripts is the preferable way to implement it.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"A merge commit to (a) specified, main, or default branch(es) will trigger the build and the unit tests will run during the build."}),(0,s.jsx)(t.td,{children:"The Unit tests should run periodically and be strategically triggered whenever new code is committed or merged to specific branches. This will help to ensure that the new code that is being developed is not breaking other areas of the application. The sooner the problem is identified the easier and faster will be to have it fixed. This item refers to whether the CI/CD pipelines are set to react upon code merge or commit."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The monitoring tools are measuring CPU usage, Disk space, Response time, memory, etc. If there is an issue with any of those infrastructure metrics the team will get notified."}),(0,s.jsx)(t.td,{children:"This item refers to whether infrastructure monitoring is in place and whether it monitors CPU, Disk space, response time, and memory. The notification is a must. There should be a team in charge of getting those notifications and take action accordingly in case of need."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The application monitoring tools are measuring API availability (any unexpected error 404, 403, 500, etc), key functionalities, background jobs, etc. If there is an issue with any of those application metrics the team will get notified."}),(0,s.jsx)(t.td,{children:"The application should be monitored 24/7 through monitoring tools that will try to reach the application and make for example API calls, and check if it responds as expected. It is a good practice to map all the critical business flows and make sure that all those flows are getting monitored. A notification group should be created so an email, phone call or chat message is sent in case of any issues."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"There is a flow of continuous development until the story gets deployed to production."}),(0,s.jsx)(t.td,{children:"Continuous development is a software development process that encompasses multiple DevOps processes, including continuous integration, continuous testing, continuous delivery, and continuous deployment. This item refers to whether there is a continuous development flow from the moment that the story gets developed until it is deployed to production."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The foundation of the application architecture is being followed by the Development team as it was originally described in the documentation (application layers, frameworks, logging mechanism, error handling mechanism, transaction control mechanism)."}),(0,s.jsx)(t.td,{children:"This item refers to whether the Development team does follow the architecture defined and documented in the previous steps. It is very important for the Architect to keep reviewing the code created by the development team to understand whether there are any gaps between the definition and the execution."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The Software Architect is not overloaded by only giving support to the team."}),(0,s.jsx)(t.td,{children:"If the development team requests support too often to the architect there might be an issue with the documentation, technical refinement, solution communication, or knowledge of the team members. It is very important to identify this issue by analyzing the root cause and come up with action items that may reduce the time spent by the Architect. If the Architect is not too overloaded with those tasks, then you should mark this item as DONE."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"People & Technical Skills Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The knowledge map is maintained by the team members and updated in a frequency considered adequate."}),(0,s.jsx)(t.td,{children:"The skill map (knowledge map) document should be regularly updated (not more than 3 months). This document is very useful for the Architect to prepare/propose training sessions for the developers based on the gaps identified. This item is related to whether there is this document that is always up to date where is possible to see the team skills."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Project Plan & Architecture Roadmap"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Pros and Cons of technical decisions, comparing to the others solutions, are recorded for later reference."}),(0,s.jsx)(t.td,{children:"Because the development team and Architects usually move from a project to another, it is very important to keep track of the history of the technical decisions as well as the pros and cons and reasons behind it. This will help to keep people on the same page when it comes to project background. This item refers to whether those big decisions are documented (wiki, Docx, videos, or any other way)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Project Plan & Architecture Roadmap"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"All big technical decisions are being taken through engagement and awareness of all technical team members, architects and developers."}),(0,s.jsx)(t.td,{children:"Big technical decisions are any decisions that affect the architecture big picture: integration with third parties, interfaces, technology stack, new product adoption, infrastructure changes, changes on the frameworks used, etc. Those decisions should be taken through the engagement of the development team and technical stakeholders involved in the project, and not only by the Architect. This will help to put everyone on the same page and increase the awareness and ownership of the developers."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Project Plan & Architecture Roadmap"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"All team members, including the team responsible for the development, infrastructure, business, and project sponsors are aware of the planned activities for the project."}),(0,s.jsx)(t.td,{children:"It is very important to have everyone on the same page in regards to the planned activities for the project. This is a good way to identify risks, concerns, or dependencies that may affect people with different scopes. Sharing the technical roadmap that includes all the key milestones of the project with everyone in meetings is a good way to make everyone aware of the planned activities. If there is any change in the original plan, everyone should be notified as soon as possible."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Risks & Blocks management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The technical risks are raised through monthly risk meetings that are conducted together with the Development team; the action plans raised during the meeting are included as tasks in the ticket system (JIRA, Azure DevOps) and followed up in the next meeting."}),(0,s.jsx)(t.td,{children:"The risk meetings are usually conducted by the Scrum Master or responsible Manager. During those meetings, the Architect and Development team should analyze and raise all technical risks. The technical risks should always have a responsibility in charge, and the action item should be registered in the ticket system (JIRA, ADO). The result from the action items should be followed up in the next risk meeting."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The technical gaps are being managed so the technical debts are not increasing over time. There is a plan to reduce the technical debts."}),(0,s.jsx)(t.td,{children:"A technical gap is any technical issue that is identified and acknowledged by the Architect in the current application. For example, anti-pattern code, performance issues, CI/CD pipelines not working appropriately, etc. This item refers to whether the number of technical gaps is not growing over time. The gaps identified should be registered in the ticket system."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The defects identified during the code reviews become defects in the ticket control system (JIRA or similar) and are part of the quality metrics."}),(0,s.jsx)(t.td,{children:"It is very important to register the feedbacks from the code review process in the ticket system (JIRA, ADO) so the metrics can be collected later on, making it possible to identify whether the issues are reducing over time or how long the developers take to fix those issues."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The code quality is measured through static code analysis tools."}),(0,s.jsx)(t.td,{children:"Static code analysis is a method of debugging by examining source code before a program is run. It's done by analyzing a set of code against a set (or multiple sets) of coding rules. SonarQube is the most famous tool to perform static code analysis."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Unit tests are coded and planned within each business story."}),(0,s.jsx)(t.td,{children:"Unit testing is a type of testing in which individual units or functions of software testing. We has a rule which states that the test coverage of all applications should be above or equal to 80%. Ideally, the tasks to develop the Unit Testing should be included within the relevant User Story."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Manual test cases follow the template to be on the same page to all team members to execute them. The content of test cases must be informative (enough step/action, input value, expects, etc)"}),(0,s.jsx)(t.td,{children:"A test case is a sequence of steps, to test the correct behavior/functionality, features of an application. Test cases should be always documented with a standard template before being executed. The test cases must be simple and easy to understand."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"Unit test cases, as well as Assert conditions, are always updated every time business logic is changed."}),(0,s.jsx)(t.td,{children:"Every time that some business logic is reviewed, it is a good practice to review all the unit test cases related to that business story and ensure that all tests are still passing and still make sense for that part. Also, we may want to add additional assertions based on the changes made."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"The top prioritized Non-functional requirements are mapped using the Non-functional template and are in fact validated."}),(0,s.jsx)(t.td,{children:"A non-functional requirement is a specification that describes the system's operational capabilities and constraints that enhance its functionality. These may be speed, security, reliability, etc. Besides mapping all the NFR of the application it is also important to validate them. This item is about whether the NFR that were agreed with the business is in fact being validated (performance, security, scalability, availability, etc)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"When there is a dependency between modules, the artifacts of the components are published in a repository (nexus, artifactory, etc)."}),(0,s.jsx)(t.td,{children:"An artifact repository, which can also be called an artifacts management tool, is an application designed to store, version, and deploy artifacts for builds. This kind of tool can help to prevent mistakes about the version of the artifact especially in complex scenarios when there is a dependency between modules (for example, back end and client-side)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The team can take action when infrastructure monitoring is showing any problems (for example, contact the responsible for fixing it)."}),(0,s.jsx)(t.td,{children:"The infrastructure should be monitored 24/7. If anything is wrong with the infrastructure (CPU, disk space, memory, availability, response time, etc ) an alert should be raised. This item refers to whether the team can take action whenever those alert messages come, fixing or contacting the person in charge for fixing it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The team can take action when application monitoring is showing any problems (for example, contact the responsible for fixing it)."}),(0,s.jsx)(t.td,{children:"The critical business flows of the application should be monitored 24/7. If anything is wrong an alert should be raised. This item refers to whether the team can take action whenever those alert messages related to the application monitoring come, fixing it, or contacting the person in charge for fixing it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The planning meetings usually go smoothly; the technical refinement usually is on time and there are no missing definitions; the team understands the technical documents and is comfortable with the task estimations."}),(0,s.jsx)(t.td,{children:'The Architect should be able to finish all the technical preparation for the upcoming sprint one sprint beforehand. This is what we call "technical refinement". The technical refinement should be done together with the PO / PPO and a document should be written to provide technical guidance for the developer, so when they start developing the sprint there are no technical doubts or big discussions about the solution. All those documents should be ready before the sprint planning!'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There are not many changes in the architecture definition during the sprint development."}),(0,s.jsx)(t.td,{children:"The Architect should be able to finish all the technical preparation for the upcoming sprint one sprint beforehand. One of the signs that the technical refinement was not done properly is when there are lots of changes in the architecture definition during the sprints. If this is happening, the suggestion is to try to review the documentation provided and try to talk to the developers to find out the pain points so we can improve from that."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Definition"}),(0,s.jsx)(t.td,{children:"Technical Refinement & Design"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There are not many blocks during the sprint development due to a lack of details in the technical refinement."}),(0,s.jsx)(t.td,{children:"The Architect should be able to finish all the technical preparation for the upcoming sprint one sprint beforehand. One of the signs that the technical refinement was not done properly is when there are lots of technical blocks during the sprint."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The team members are open-minded for experimentation and are keen to try alternatives and propose improvements."}),(0,s.jsx)(t.td,{children:"One of the fundamental characteristics of DevOps high-skilled team members is the keenness to propose and try new things. The team should have an open culture of knowledge sharing, and everyone should step in and propose improvements or changes. This item refers to whether the team has this mindset. If not, action items to increase the engagement of the team should be tried."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The scripts for database changes are automatically deployed in the deployment pipeline."}),(0,s.jsx)(t.td,{children:"This item is about whether there is a solution that will allow the automation in the CI/CD pipelines that allow to manage the database changes (Liquibase or equivalent)"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The backup strategy is automated for all environments (database, files, etc)."}),(0,s.jsx)(t.td,{children:"It is very important to have a backup strategy automated, so regular backups will be taken from the critical resources regularly and not rely on manual steps. (for example, backups from the database will be taken each 2 hours automatically by the CI/CD server)"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The deployment can be executed in a single click for Dev, RC and Stage environments."}),(0,s.jsx)(t.td,{children:"The deployment procedure should be very simple and should not require manual or complicated steps. In the ideal situation, it should require only a single click. Sometimes it can be fully automated and make it be triggered by a Pull request merge."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The rollback can be executed in a single click for Dev, RC and Stage environments"}),(0,s.jsx)(t.td,{children:"The rollback procedure should be very simple and should not require manual or complicated steps. In the ideal situation, it should require only a single click."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The deployment pipeline contains steps/tasks reflecting the actual development flow and release flow."}),(0,s.jsx)(t.td,{children:"The deployment pipelines consist of automated scripts composed of steps or tasks implemented in the CI/CD server. Those pipelines should be implemented according to the development flow and release flow. (the pipelines should be the actual implementation of the development and release flows except for steps cannot be represented in common sense)"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is a continuous improvement mindset in the team."}),(0,s.jsx)(t.td,{children:"The term continuous improvement can be very abstract if not placed in a specific context. Explained shortly, it is a never-ending strive for perfection in everything you do. In Lean management, continuous improvement is also known as Kaizen. Kaizen originated in Japan shortly after the end of the Second World War. It gained massive popularity in manufacturing and became one of the foundations of Toyota's rise from a small carmaker to the largest automobile manufacturer on the planet."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The frontend performance is being constantly validated using browser developer tools such as Chrome Lighthouse, Google Page Speed or equivalent."}),(0,s.jsx)(t.td,{children:"If you make people wait on your website, if you deliver a slow experience, it will have fundamentally negative implications for the business. It is important not only to validate the response time of the backend part of the application but also the frontend as well. In the frontend performance test, it is possible to identify whether the Javascript code written is performative, whether the images utilized are adequated, whether the time to render the webpage is good, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The pre-production environment is very similar to production (except for the database can use mock data)."}),(0,s.jsx)(t.td,{children:'The main purpose of this item is to prevent issues or bugs related to different server configurations or differences in the environments. If the bug is only "reproducible" on production this is an indicator that the environments are not similar enough.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The team follows the SCM (Source Control Management) plan and the team spends low effort when managing the branches and merging the code."}),(0,s.jsx)(t.td,{children:"One indication that the Source Control Management plan needs to improve is when the team spends too much effort while merging code. This item refers to whether this situation is happening very often and whether there is space for improvements in this area."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The database objects follow the same policies of the code, and it is possible to detect conflicts on database changes when merging the code."}),(0,s.jsx)(t.td,{children:"The database scheme should be tracked along with the code that is compatible with that scheme version. Exporting the database scheme as configuration files is good practice once it allows database versioning and it does not rely on the manual operation to switch the database version. This item refers to whether there is a mechanism in place to export the database scheme as files (sql, yml, etc), and whether those files are tracked in the source control tool along with the source code and it is possible to identify conflicts in the database changes when merging code."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is a maximum time definition of build execution. Any increasing time of the build process has a clear and acceptable explanation."}),(0,s.jsx)(t.td,{children:"There is an item in the Architecture Maturity that states that the build should not take longer than 15 minutes. Rather than that, we can set custom targets depending on the context of each project. For example, if your build takes only 2 minutes to complete, you might want to set 5 minutes as the maximum execution time of your build. Any increase in the time should be investigated and solved."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"There is an environment for performance tests and its configuration is very similar to the production environment."}),(0,s.jsx)(t.td,{children:"Ideally, there should be a load test (performance test) environment that is as similar as possible to the production one. There is no point in running a performance test against non-production environments, because the server configuration in terms of CPU, memory, etc is way lower than production. Because the production environment is usually expensive, a performance test environment can be temporarily provisioned as a perfect copy of the production environment and it can be released as soon as the performance test is done."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"All the necessary tools are being leveraged to manage the database changes properly (liquibase, flyway, custom scripts, etc)."}),(0,s.jsx)(t.td,{children:'One of the good practices when it comes to database management is to make sure that the changes on the database can be applied along with the code changes, so we will not rely on SQL scripts that need to be executed as a manual step before or after the code deployment. For doing that, it is necessary to adopt some solution such as "Liquibase" of equivalent may help you on that. Having a rollback strategy for the database is also important. This item is about whether this kind of tool is being used (if needed).'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The system configuration (except for sensitive information) is exported as code, and it is versioned in a repository (git, svn, etc). Given a commit hash, it is possible to track both the code and database version that works with that code."}),(0,s.jsx)(t.td,{children:"This item refers to whether configuration files related to the server, database, endpoints, etc are versioned in the repository together with the source code. Having this information just in the database or in the configuration dashboard of the server is not a good practice unless it contains sensitive information such as API keys or passwords. In this case, it is better to use tools like AWS KMS (Key Management Services), Azure Key Vault, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The local environment (developer environments) provisioning is automated through scripts and/or virtual machines (vagrant, docker, etc) and requires very low effort."}),(0,s.jsx)(t.td,{children:"The setup process for the developer environment (local computer) should not be too complicated. If the effort to set up the local environment is too high, it is better to consider automating it using scripts or virtual machines so it will require low effort. Having a local environment easy to set up will save a lot of time for the Architect and other team members and it will prevent the developers from getting blocked due to issues in their computers, making the development more efficient."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The team has an infrastructure access policy (follow security checklist & specific-team definition), or there is an available focal point in the third-party company/partner who can be easily contacted."}),(0,s.jsx)(t.td,{children:"It is necessary to have a strong access policy to grant permissions in the infrastructure resources (web servers, databases, network resources, etc), or the access of the infrastructure resource should be handled by a company or partner that can be easily contacted in case of need. Having a strong process will help to prevent security incidents. It is important to follow all definitions available in our Security Checklist."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"A pull-request to (a) specified, main, or default branch(es) will trigger the build and the unit tests will run during the build."}),(0,s.jsx)(t.td,{children:"The Unit tests should be strategically triggered whenever a new Pull-request is sent. This will help to ensure that the new code that is being developed is not breaking other areas of the application. The sooner the problem is identified the easier and faster will be to have it fixed. This item refers to whether the CI/CD pipelines are set to react upon pull request."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Source code quality metrics (Code Coverage, Code Smells, etc) are automatically run and collected as tasks of the builds on specified branches."}),(0,s.jsx)(t.td,{children:"The source code quality metrics are metrics extracted by static code analysis generated by tools like SonarQube. In order to ensure that the code metrics are always up to date, the static code analysis should be part of the tasks from the build."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"At least key members of the team can see the application monitoring metrics."}),(0,s.jsx)(t.td,{children:"Key members mean senior developers, Architects, managers, etc. The metrics should be visible and available for everyone. Making it available through a dashboard is a good way to put everyone on the same page. This item refers to whether at least the key members can see the monitoring metrics."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The business stories are prioritized through value engineering, using consistent methodologies to support it when needed (design thinking, A3, etc)."}),(0,s.jsx)(t.td,{children:"To have a good alignment with the team, the business stories should be prioritized through value engineering using methodologies that will help to increase the engagement of the development team putting business and technical people on the same page. Some methodologies help on the business understanding, for example A3 workshop or design thinking. The Architect and technical leaders should be engaged on those kind of activities to increase the knowledge about the product or application that will be developed."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The technical tasks that are action plans raised during the Risk Meetings (or the meetings which contain Risk discussion) are being executed by the responsible."}),(0,s.jsx)(t.td,{children:"The Risk management meeting is a meeting in which the team tries to raise and classify the risks of the project. It is usually a bi-weekly meeting and a spreadsheet template is used to input the risks. Depending on the case, there might be some technical risks that require action from the Architect or development team. The Architect should follow up on the technical action items raised from the Risk Meetings and make sure that there is a plan to execute those."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"People & Technical Skills Development"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"All the necessary KT (Knowledge Transfer) meetings are executed according to the plan, and the team has no knowledge gaps related to the covered areas."}),(0,s.jsx)(t.td,{children:"At the beginning of the project, or whenever the team is taking over new scopes or responsibilities that are currently under other parties' scope, it is very important to ensure that we are scheduling knowledge transfer sessions to tackle the uncertain points. The knowledge transfer may also affect the project roadmap, so it should be clearly stated in the roadmap as well. This item refers to whether the team is always planning knowledge transfer sessions when needed."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"People & Technical Skills Development"}),(0,s.jsx)(t.td,{children:"SETUP"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The technical knowledge gaps are identified in the team and the necessary improvement is planned and executed."}),(0,s.jsx)(t.td,{children:"Based on the knowledge map, the technical knowledge gaps in the team should be identified and actions should be taken in case of need. For example, if the project uses nodejs technology but just 2 from 5 developers know it, the team should create a plan to have technical training so people can improve their skills in the important technology stacks."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Risks & Blocks management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The action plans originated from the Architecture maturity level PDCA meetings (C&A) are tracked in the ticket system (JIRA, Azure DevOps) and the progress is followed up in the next meeting."}),(0,s.jsx)(t.td,{children:"The Architecture maturity PDCA meeting stands for Plan Do Check Act (also known as Architecture C&A). This refers to this meeting when we go through the checklist items checking whether the best practices are being followed in the project. The action items discussed during this meeting should all be registered in the ticket system (JIRA, ADO). Moreover, the status of the action items should be verified in the next interaction. This item refers to whether the tasks are registered and followed up in the next meeting."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Recurrent follow-up meetings are conducted by the technical responsible in order to discuss the goals and issues that came out from the code quality analysis."}),(0,s.jsx)(t.td,{children:"There should be a goal-setting related to the quality metrics that came out from static code analysis (SonarQube or equivalent). The Architect or Developers should schedule follow-up meetings to discuss the current issues in the source code as well as the plan to solve them."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Recurrent follow-up meetings are conducted by the technical responsible in order to discuss the goals and issues that came from the test automation and coverage percentage."}),(0,s.jsx)(t.td,{children:"There should be a goal-setting related to the coverage of testing automation. The Architect or Developers should schedule follow-up meetings to discuss the current issues or gaps in the automated testing scripts as well as the plan to solve them."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The code review is performed by the development team and they do not depend on the Software Architect."}),(0,s.jsx)(t.td,{children:"Considering that all rules are documented, the development team should be able to understand are the things that should be reviewed during the core review process. In that sense, they should not only depend on the Architect to do the code review."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The code quality is visible to everyone in the team and there is immediate feedback whenever the quality has decreased."}),(0,s.jsx)(t.td,{children:"The team should have code quality goals agreed and the CI/CD pipelines should at least notify everyone whenever the code is not compliant with those goals. Static code analysis tools such as SonarQube can be used to measure the code quality."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The build will fail if the code that was created does not match the code quality goals."}),(0,s.jsx)(t.td,{children:"The team should have code quality goals agreed and the CI/CD pipelines should be set to not allow going forward with code that is not compliant with those goals. Static code analysis tools such as SonarQube can be used to measure the code quality."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Code coverage should not be decreased. Any decrease requires explanation and approval by the Architect (consulted with the architecture team)."}),(0,s.jsx)(t.td,{children:"The code coverage in general should not decrease over time. A rule should be set in the build pipelines to prevent from going forward with new code if the code coverage has decreased. This item refers to whether the practice is in place."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Test cases are always up to date, updated every time a business logic is changed."}),(0,s.jsx)(t.td,{children:"Every time that some business logic is reviewed, it is a good practice to review all the test cases related to that business story and ensure that all are correct and still make sense after the changes. Also, we may want to add additional test cases based on the changes made."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"If there is a gap between the test coverage target and the current situation, the necessary tasks are mapped and converted into defects in the ticket system (e.g. JIRA, ADO...)."}),(0,s.jsx)(t.td,{children:"It is important for the Architect and development team to proactively identify test coverage gaps based on the target covered set in agreement with everyone. The tasks to increase the testing coverage should then be created and planned to be executed in the upcoming sprints being able to little by little reduce the gap."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The automated testing is integrated into the build, and the build will fail if the test coverage percentage is not enough ( < 80% ) or if the test is failing."}),(0,s.jsx)(t.td,{children:"Unit testing is a type of testing in which individual units or functions of software testing. MTI has a rule which states that the test coverage of all applications should be above or equal to 80%. Making the build pipeline fail in case the code coverage does not achieve the 80% is the recommended way to ensure it. You may additionally create a rule to not allow the code coverage to be worst if already above 80%."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"Solution Review meetings are scheduled whenever it is necessary for complex architectures; Software Architects from different projects are invited to join so they can provide feedback on the architecture."}),(0,s.jsx)(t.td,{children:"A Solution Review meeting is a meeting where other Architects from different projects are invited to advise about one architecture diagram, solution, or technical issue. In case there is any problem that the Architect is struggling with, the team should not hesitate to create an event on the calendar and invite CTA and other Architects from different projects."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"The issues identified during the performance tests are converted to defects and registered in the ticket system."}),(0,s.jsx)(t.td,{children:"Performance testing is a non-functional software testing technique that determines how the stability, speed, scalability, and responsiveness of an application hold up under a given workload. This item is about whether the performance issues found during the performance testing are being registered in the ticket system (ADO, JIRA, etc) so the metrics about performance bugs can be collected later on."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The deployment to the pre-production environment is automated and executed in a CI/CD server (Jenkins, Azure DevOps, etc)."}),(0,s.jsx)(t.td,{children:"The deployment should be automated and centralized in a CI/CD server (or SaaS solution like Azure DevOps) and the deployment to the environments should be automated and executed directly from there. Relying on the local computer is not a good practice and it should be avoided as much as we can."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The deployment can be executed in a single click for the Production environment."}),(0,s.jsx)(t.td,{children:"The deployment to the production environment should be as automated as possible. Ideally, there should be no manual steps or scripts that rely on human operation. It is understandable that sometimes due to the process, there should have approval for the release to go live. But even in those cases, if the release is approved there should be an automatic way to deploy it to production upon approval. You can mark this item as done in case your deployment to production is fully automated and it requires 1 click only."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The rollback can be executed in a single click for the Production environment."}),(0,s.jsx)(t.td,{children:"The deployment rollback should be as automated as possible. Ideally, there should be no manual steps or scripts that rely on the human action to roll back. We should be able to roll back as fast as possible. You can mark this item as done in case your deployment rollback is fully automated and it requires 1 click only."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"System is being appied GitOps - the infrastructure and its configuration is exported as code, and it is versioned in a repository (git, svn, etc)."}),(0,s.jsx)(t.td,{children:"This item refers to whether infrastructure services related to the computing services, storage (database, files..), network, etc and their configuration are versioned in the repository together with the source code."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"All the application and database logs for the environments (at least PROD) are available and centralized in a log collector or solution (loggly, kafka, custom solution, etc)."}),(0,s.jsx)(t.td,{children:"Making all the logs available and centralized in a single log collector solution will optimize the debugging process and increase the traceability of issues in case of need. By using solutions like Loggly, Kafka it is possible to understand the user request end-to-end and identify issues without having to keep switching between servers and applications."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"When it is necessary to change some configuration in the server, this change is applied using scripts (the changes are not applied manually)."}),(0,s.jsx)(t.td,{children:"Besides having all infrastructure as a code, any configuration change in the server should be handled through scripts or files. Manual changes in the cloud provider dashboard should be prevented as much as possible to prevent mistakes."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"When a new environment needs to be created there are scripts that allow the team to do it automatically with no manual steps."}),(0,s.jsx)(t.td,{children:"One of the big advantages of having all infrastructure as a code is that the environment creation can be automated. This will reduce the risks of forgetting some manual steps when creating new environments, and it will also save a lot of time for the team members. This item is about whether the provisioning of a new environment is fully automated and it will not rely on manual steps."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"It is possible to check the deployment status through smoking test scripts."}),(0,s.jsx)(t.td,{children:'Smoke Testing is a software testing process that determines whether the deployed software build is stable or not. Smoke testing is a confirmation for QA team to proceed with further software testing. It consists of a minimal set of tests run on each build to test software functionalities. Smoke testing is also known as "Build Verification Testing" or "Confidence Testing." Smoking test scripts are automated test cases that can be executed to identify whether the environment and application are working according to what was expected. A smoking test script may go through the basic functionalities of the application to identify trivial issues or problems. This practice is very helpful in the case that some new release is deployed to production, or whenever there is a new environment that requires validation.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"It is possible to scale up or scale down the server resources automatically to respond to demand changes."}),(0,s.jsx)(t.td,{children:"This item refers to whether the web servers in production are set in an autoscaling group or whether the cloud resources are set for upscaling in case of a sudden traffic increase. Ideally, it should happen automatically with no human intervention required."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Everyone in the team can see the infrastructure monitoring metrics."}),(0,s.jsx)(t.td,{children:"The infrastructure monitoring metrics should be visible to everyone and available in a virtual dashboard that is updated in real-time."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The team can fix the issue when infrastructure monitoring is showing any problems."}),(0,s.jsx)(t.td,{children:"One of the best practices on DevOps culture is to reduce the separation of the application development and infrastructure development teams as much as possible. Everyone should be engaged in both development and infrastructure matters, so this item refers to whether the development team can fix issues by themselves whenever the infrastructure monitoring is showing any issues."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The team can fix the issue when application monitoring is showing any problems."}),(0,s.jsx)(t.td,{children:"One of the best practices on DevOps culture is to have the team engaged and accountable for the issues identified from the production monitoring. This item refers to whether the whole development team has the ownership and autonomy to fix the issues shown in the application monitoring (deploy can still be performed by designated people)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"There are business monitoring tools for production and there is a team in charge of following up."}),(0,s.jsx)(t.td,{children:"Business Monitoring is the proactive and process-oriented monitoring of the user flows in the application. It consists of mapping all the critical indicators for the business and making them visible in real-time so it will increase the concern and awareness of the Development team towards the business targets. For example: In an eCommerce application, we may want to monitor the conversion rate for products included in the shopping cart, or the total number of active users, the total number of sales, or any other business-oriented metric. If the Development team identifies that the conversion rate is too low after a release, they may want to proactively notify people responsible by following it."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Everyone in the team can see the business monitoring metrics."}),(0,s.jsx)(t.td,{children:"Business Monitoring is the proactive and process-oriented monitoring of the user flows in the application. It consists of mapping all the critical indicators for the business and making them visible in real-time so it will increase the concern and awareness of the Development team towards the business targets. For example: In an eCommerce application, we may want to monitor the conversion rate for products included in the shopping cart, or the total number of active users, the total number of sales, or any other business-oriented metric. This item refers to whether there is an online dashboard where everyone in the team can check the business monitoring metrics."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The team members are considered multi-functional and most of the people in the team know the solution end to end (frontend, backend, and infrastructure)."}),(0,s.jsx)(t.td,{children:"A good way to shorten the distance among frontend developers, backend developers, and infrastructure people is to ensure that everyone in the team is multi-functional in the sense that they have minimum knowledge in both frontend and backend and also infrastructure areas. This item is whether most of the team members have this knowledge. If not, you should think about action items to reduce the knowledge gap of the team members."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Recurrent follow-up meetings are conducted by the technical responsible in order to discuss the goals and issues that came from the security test metrics."}),(0,s.jsx)(t.td,{children:"Security is a big concern for OTS, so there should be very clear targets about security (for example, not having critical and medium issues from the Security test, and limiting the maximum amount of low issues raised from the Security test, etc). Those targets as well as the current situation of the application should be discussed in recurrent meetings so we ensure that there is a plan to reduce those issues. This item is about whether those follow-up meetings are being scheduled or at least those issues are being discussed during Architecture PDCA meetings."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The number of defects identified during the code reviews is reducing over time."}),(0,s.jsx)(t.td,{children:"Every time that an issue is identified during the code review, it should be registered in the ADO or JIRA as a bug! This is very important for metrics purposes. One of the indicators that the development team is learning with the feedbacks from the code review, is when the amount of defects identified during the code review is reducing over time."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Have a plan to implement automation tests and follow them. The plan is reviewed periodically."}),(0,s.jsxs)(t.td,{children:["The testing automation strategy should be implemented as much as we can. Having a testing automation strategy will increase the quality of the application. The testing automation strategy depends on the type of application and technology utilized in the project. The testing pyramid strategy is one of the recommended ways to cover test cases ",(0,s.jsx)(t.a,{href:"https://martinfowler.com/articles/practical-test-pyramid.html",children:"https://martinfowler.com/articles/practical-test-pyramid.html"}),". This item refers to whether there is a plan to implement the test automation and whether there are meetings to discuss and review it periodically."]}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The team has a lean mindset (avoid unnecessary bureaucracy, documentation, overload added through unnecessary processes, etc)."}),(0,s.jsx)(t.td,{children:"Eliminating wasteful activities is one of the most important prerequisites for building a successful company. This concept is an integral part of Lean thinking. The idea of eliminating waste originates from the Toyota Production System."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"There is buy-in on DevOps culture from the project stakeholders."}),(0,s.jsx)(t.td,{children:'DevOps culture is all about a shared understanding between developers and operations and sharing responsibility for the software they build. That means increasing transparency, communication, and collaboration across development, IT/operations, and "the business". The project stakeholders are technical people and business people involved in the project. The DevOps mindset should be disseminated across to all parts so everyone understands the importance of applying it in the project. This item refers to whether there is buy-in on DevOps culture from the project stakeholders. If not, you may want to come up with some actions that will help to increase the engagement of people.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"There is a mindset on focusing on the product itself, rather than focusing on solutions."}),(0,s.jsx)(t.td,{children:"The solution should solve a business need, not the other way around. Starting from providing a solution is not a good way to start a project. Therefore, this item refers to whether everyone involved in the project (including POs and the other business stakeholders) has the mindset about focusing on the product itself, rather than on solutions."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The acceptance tests are automated and integrated into the build (behat, selenium, etc)."}),(0,s.jsx)(t.td,{children:"Acceptance testing is a test conducted to determine if the requirements of a software specification are met. Whenever new requirements come into the backlog and the User Story is included in the Sprint, it is possible to create automated testing related to that User Story so the test scripts are later on the build pipelines will run them. This will ensure that all the acceptance tests should pass otherwise it is not possible to go forward with the build."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Software Development"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Every technical change that is done will bring benefit or value to the project (either is necessary to reduce the technical risks or new NFR or business requirement requested by stakeholders)."}),(0,s.jsx)(t.td,{children:"Any changes on the architecture should be triggered by some request from the business (NFR or new business story) or should be motivated by kaizen activities based on best practices that are not followed and may bring risks to the project/product. In both cases, the value of the change, as well as the risks involved, should be very clear for both the development team and stakeholders. There is no use in having a great architecture if the business requirements and value is not being generated to the users. Value generation should always be the ultimate target."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Recurrent follow-up meetings are conducted by the technical responsible in order to discuss the goals and issues that came from the performance test metrics."}),(0,s.jsx)(t.td,{children:"There should be a goal-setting related to the coverage of performance testing scripts. The Architect or Developers should schedule follow-up meetings to discuss the current issues or gaps in the performance testing scripts as well as the plan to solve them."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"If a bug is found, Unit Tests are implemented for that scenario as part of the bugfix to avoid recurrence of the same issue."}),(0,s.jsx)(t.td,{children:"Whenever a bug is found, a good practice is to implement unit tests to cover the test case related to it. That will ensure that the same bug will not occur again and it will little by little enhance the quality of the test coverage of the application. This item refers to whether the team has this internal rule when fixing bugs."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"Have the test automation and its strategy results in a low occurrence of technical problems and it usually identifies real problems when the test fails."}),(0,s.jsx)(t.td,{children:"Ideally, we should be able to identify all the critical business flows in the application and create a test automation strategy to cover all the critical areas. The test automation should be efficient enough to work most of the time without technical problems or false positives, meaning that if the test failed it is because a bug was identified."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"The performance of the application is being continuously tested through automation in the deployment pipelines."}),(0,s.jsx)(t.td,{children:"Performance testing is a non-functional software testing technique that determines how the stability, speed, scalability, and responsiveness of an application hold up under a given workload. This item refers to whether there are periodical jobs that are continuously testing the performance of the application."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Continuous Testing"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"If the build breaks due to the automated tests, the issue is immediately fixed by the team as a maximum priority."}),(0,s.jsx)(t.td,{children:"The development team should be proactive to fix the automated tests as soon as the issue occurs. This should be taken as the highest priority."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"Deployment scripts are kept as code in the repository."}),(0,s.jsx)(t.td,{children:"The deployment pipelines consist of automated scripts composed of steps or tasks implemented in the CI/CD server. Those scripts should be tracked and their versions should be controlled in the code repository."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The deployment can be executed automatically for the Production environment (Except for release approval)"}),(0,s.jsx)(t.td,{children:"The deployment to the production environment should be as automated as possible. Ideally, there should be no manual steps or scripts that rely on human operation. It is understandable that sometimes due to the process, there should have approval for the release to go live. But even in those cases, if the release is approved there should be an automatic way to deploy it to production upon approval."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"PREPARATION (Sprint 0)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"Have log retention policy to support trace whole log for every single request (e.g. Add GUID identifier for logs of each request)"}),(0,s.jsx)(t.td,{children:"GUID (aka UUID) is an acronym for 'Globally Unique Identifier' (or 'Universally Unique Identifier'). This item refers to whether the log retention is good enough and whether a GUID is attached to each request, so in case we need to track some issue it is possible to track down all the information by searching by GUID and immediately group together all the relevant log entries for that request."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The business monitoring tools are measuring key indicators (conversion rate, number of sold items, average response time, etc). If there is an issue with any of those key indicators the team will get notified."}),(0,s.jsx)(t.td,{children:"Business Monitoring is the proactive and process-oriented monitoring of the user flows in the application. It consists of mapping all the critical indicators for the business and making them visible in real-time so it will increase the concern and awareness of the Development team towards the business targets. For example: In an eCommerce application, we may want to monitor the conversion rate for products included in the shopping cart, or the total number of active users, the total number of sales, or any other business-oriented metric. If the Development team identifies that the conversion rate is too low after a release, they may want to proactively notify the business stakeholders. It also helps the Developers to understand better the business thus generate fewer bugs or mistakes due to misunderstanding the business targets."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The team can take action when business monitoring is showing any problems (for example, contact the business responsible)."}),(0,s.jsx)(t.td,{children:"Business Monitoring is the proactive and process-oriented monitoring of the user flows in the application. It consists of mapping all the critical indicators for the business and making them visible in real-time so it will increase the concern and awareness of the Development team towards the business targets. For example: In an eCommerce application, we may want to monitor the conversion rate for products included in the shopping cart, or the total number of active users, the total number of sales, or any other business-oriented metric. This item refers to whether the Development team has the autonomy to take action whenever the business monitoring tools are showing any problems."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"There is flexibility to create new business indicators and dashboards whenever it is necessary."}),(0,s.jsx)(t.td,{children:"Business Monitoring is the proactive and process-oriented monitoring of the user flows in the application. It consists of mapping all the critical indicators for the business and making them visible in real-time so it will increase the concern and awareness of the Development team towards the business targets. For example: In an eCommerce application, we may want to monitor the conversion rate for products included in the shopping cart, or the total number of active users, the total number of sales, or any other business-oriented metric. This item refers to whether those business metrics are visible in a dashboard and the development team has the autonomy to include new business indicators in this dashboard."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Architecture Evaluation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The PO and stakeholders recognize that the code quality is satisfactory through the metrics and goals that are shared with them."}),(0,s.jsx)(t.td,{children:"This item refers to whether the code quality metrics (for example the ones generated by SonarQube) are periodically shared with the PO and stakeholders so they are able to understand it, interpret it, and recognize that the quality of the code is satisfactory."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The same package, that was tested in Dev and Stage environments is promoted to production, (Build once, deploy anywhere) (Except for Mobile, SPA applications)"}),(0,s.jsx)(t.td,{children:"One of the fundamental principles of Continuous Delivery is to Build Binaries Only Once. Subsequent deployments, testing, and releases should never attempt to build the binary artifacts again. This also applies to interpreted languages when some sort of zip file representing the snapshot of the application is generated instead."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Deployment"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The lead time (from development to deployment on production) is no longer than one sprint."}),(0,s.jsx)(t.td,{children:'Lead time is a "user point of view" measurement, or how long it takes, from the perspective of the user, for a feature to go from "requested" to "complete." Having more frequent releases will help to prevent incidents in production. The smaller the release is, the easier is to identify possible issues and the lower is the impact in case of a rollback is needed. For this item in maturity level 5, the lead time should be no longer than one sprint.'}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Integration"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"Once an environment is created, it will be never changed. The only way to apply changes is by re-creating the whole environment with scripts and using a pipeline."}),(0,s.jsx)(t.td,{children:"This item refers to whether the environment creation is fully automated through scripts and whether changes on those environments can only be performed by re-creating them using build pipelines."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"When an issue has been raised from infrastructure monitoring systems, some actions are automatically triggered that will not require manual intervention to fix it (for feasible services)."}),(0,s.jsx)(t.td,{children:"This item refers to whether an infrastructure issue raised from the monitored system can be fixed through automation. For example, if the CPU usage is high that will trigger provisioning of additional resources, or if the disk usage is high it will automatically increase the disk size, or if one server from the cluster is down, it will automatically restart it, etc."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Execution"}),(0,s.jsx)(t.td,{children:"Continuous Monitoring"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"When an issue has been raised from application monitoring systems, some actions are automatically triggered that will not require manual intervention to fix it."}),(0,s.jsx)(t.td,{children:"This item refers to whether an application issue raised from the monitored system can be fixed through automation. For example, if the API is not responding then it will trigger the creation of a new server in the cluster, or if a critical business flow is not working accordingly the system will try to recover based on pre-defined scripts."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Management"}),(0,s.jsx)(t.td,{children:"Technical Backlog management"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The team's maturity in Architecture Process is known by the entire company, project sponsors and stakeholders; There is a plan to manage, spread and scale knowledge beyond the project boundaries."}),(0,s.jsx)(t.td,{children:"Whenever a team can succeed in applying the Architecture Process and the maturity score becomes close to 5, it is recommended to share this case in the company and expand the knowledge and lessons learned from the project to other projects within the organization. This item refers to whether there is a plan to share it through internal webinars or culture-sharing meetings with other teams."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The developers are responsible for delivering the security test scripts as part of the story scope."}),(0,s.jsx)(t.td,{children:"Security Testing is a type of Software Testing that uncovers vulnerabilities, threats, risks in a software application and prevents malicious attacks from intruders. Scripts for security tests are a way to improve and tailor the execution of a security test to your specific needs or critical flows in your system. Ideally, those scripts should be created as part of the User Story. So a sub-task under the same User Story should be created and the time to create the script should be estimated."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The PO and stakeholders recognize that the security of the application is satisfactory through the metrics and goals that are shared with them."}),(0,s.jsx)(t.td,{children:"One of the ways to build trust with the stakeholders is to share the data about the application in a very transparent way. Whenever we execute a security test (penetration test), a report should be produced with an executive summary. The number can then be shared with the stakeholders so they can be aware of it. The security test should be automated as much as possible. One alternative way to share this kind of data if we have it automated is making it always available in a situation dashboard and make sure that the data is always up to date (nice to have)."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"DEVELOPMENT (Sprint 1-N)"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The developers are responsible for delivering the performance test scripts as part of the story scope."}),(0,s.jsx)(t.td,{children:"Performance Test Script is a programming code specific to performance testing to automate real-world user behavior. This code contains the user actions performed by a real user on an application. Such scripts are developed with the help of performance testing tools like LoadRunner, JMeter, and NeoLoad, etc. Ideally, those scripts should be created as part of the User Story. So a sub-task under the same User Story should be created and the time to create the script should be estimated."}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Architecture Validation"}),(0,s.jsx)(t.td,{children:"Non-functional Requirements Validation"}),(0,s.jsx)(t.td,{children:"RELEASE"}),(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"The PO and stakeholders recognize that the performance of the application is satisfactory through the metrics and goals that are shared with them."}),(0,s.jsx)(t.td,{children:"One of the ways to build trust with the stakeholders is to share the data about the application in a very transparent way. Whenever we execute a performance test (load test), a report should be produced with an executive summary. The number can then be shared with the stakeholders so they can be aware of it. The performance test should be automated as much as possible. One alternative way to share this kind of data if we have it automated is making it always available in a situation dashboard and make sure that the data is always up to date (nice to have)."}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Note: This table shows a comprehensive set of practices across maturity levels 1-5. The complete assessment contains over 130 practices covering all aspects of architecture definition, execution, management, and validation. Higher maturity levels focus on advanced automation, self-healing systems, stakeholder transparency, and organizational knowledge sharing."})}),"\n",(0,s.jsx)(t.h2,{id:"practice-categories",children:"Practice Categories"}),"\n",(0,s.jsx)(t.h3,{id:"\ufe0f-architecture-definition",children:"\ud83c\udfd7\ufe0f Architecture Definition"}),"\n",(0,s.jsx)(t.p,{children:"Foundation practices for establishing architectural standards and guidelines."}),"\n",(0,s.jsx)(t.h4,{id:"architecture--coding-guidance",children:"Architecture & Coding Guidance"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/scm-policy",children:"SCM Policy"})})," - Source Control Management policies and procedures"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})})," - Local development environment configuration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards",children:"Coding Standards & Conventions"})})," - Code quality standards and testing practices"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-use-cases-guide",children:"Development Use Cases Guide"})})," - Special development scenarios and tools"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/code-quality-tools",children:"Code Quality Tools"})})," - Linting, formatting, and quality analysis"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/architecture-foundation",children:"Architecture Foundation"})})," - Application layers and core mechanisms"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/input-validation",children:"Input Validation"})})," - Data validation and security practices"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/third-party-integration",children:"Third-Party Integration"})})," - External APIs and library management"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/backup-recovery",children:"Backup & Recovery Strategy"})})," - Data protection and disaster recovery"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Additional practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Knowledge Transfer Planning - Stakeholder and partner communication"}),"\n",(0,s.jsx)(t.li,{children:"Communication Channels - Team communication setup"}),"\n",(0,s.jsx)(t.li,{children:"Technical Documentation - Documentation standards and processes"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"communication--alignment",children:"Communication & Alignment"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Knowledge Transfer Planning - Stakeholder and partner communication"}),"\n",(0,s.jsx)(t.li,{children:"Communication Channels - Team communication setup"}),"\n",(0,s.jsx)(t.li,{children:"Technical Documentation - Documentation standards and processes"}),"\n",(0,s.jsx)(t.li,{children:"Stakeholder Communication - Architecture change management"}),"\n",(0,s.jsx)(t.li,{children:"Architecture Sharing - Diagram creation and presentation"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"non-functional-requirements",children:"Non-functional Requirements"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"NFR Collection & Mapping - Requirements gathering and documentation"}),"\n",(0,s.jsx)(t.li,{children:"NFR Templates & Standards - Standardized requirement formats"}),"\n",(0,s.jsx)(t.li,{children:"NFR Approval Process - Stakeholder approval workflows"}),"\n",(0,s.jsx)(t.li,{children:"NFR Metrics & Targets - Measurable performance targets"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"technical-refinement--design",children:"Technical Refinement & Design"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Story Splitting - Breaking down features into deployable units"}),"\n",(0,s.jsx)(t.li,{children:"Technology Selection - Choosing stable, supported technologies"}),"\n",(0,s.jsx)(t.li,{children:"Documentation Maintenance - Keeping technical docs current"}),"\n",(0,s.jsx)(t.li,{children:"Refinement Process - Technical preparation workflows"}),"\n",(0,s.jsx)(t.li,{children:"Structured Refinement - High-quality technical guidance"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"architecture-execution-1213-practices-completed",children:"Architecture Execution (12/13 practices completed)"}),"\n",(0,s.jsx)(t.p,{children:"Implementation and operational practices for continuous delivery and system reliability:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/cicd-pipeline",children:"CI/CD Pipeline"})," - Automated build, test, and deployment pipelines"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/deployment-automation",children:"Deployment Automation"})," - Automated deployment strategies and rollback procedures"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/infrastructure-monitoring",children:"Infrastructure Monitoring"})," - System health monitoring and alerting"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/application-monitoring",children:"Application Monitoring"})," - Application performance and business metrics tracking"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/configuration-management",children:"Configuration Management"})," - Environment-specific configuration management"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/automated-deployment",children:"Automated Deployment"})," - Blue-green, canary, and rolling deployment strategies"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/database-migrations",children:"Database Migrations"})," - Schema versioning and migration automation"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/performance-testing",children:"Performance Testing"})," - Load testing and performance validation frameworks"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/environment-promotion",children:"Environment Promotion"})," - Automated environment promotion and validation"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/rollback-procedures",children:"Rollback Procedures"})," - Emergency rollback and recovery procedures"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/security-scanning",children:"Security Scanning"})," - Automated vulnerability scanning and security testing"]}),"\n",(0,s.jsxs)(t.li,{children:["\u2705 ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/resource-scaling",children:"Resource Scaling"})," - Auto-scaling and resource optimization"]}),"\n",(0,s.jsx)(t.li,{children:"\ud83d\udd04 Incident Response - Incident management and post-mortem procedures"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"continuous-deployment",children:"Continuous Deployment"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Additional practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Artifact Versioning - Version tracking across environments"}),"\n",(0,s.jsx)(t.li,{children:"Rollback Strategies - Recovery and rollback procedures"}),"\n",(0,s.jsx)(t.li,{children:"Single-Click Deployment - Simplified production deployment"}),"\n",(0,s.jsx)(t.li,{children:"Smoke Testing - Deployment verification"}),"\n",(0,s.jsx)(t.li,{children:"Build Once Deploy Anywhere - Immutable artifacts"}),"\n",(0,s.jsx)(t.li,{children:"Lead Time Optimization - Fast delivery practices"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Source Control Best Practices - Git workflows and policies"}),"\n",(0,s.jsx)(t.li,{children:"Commit Standards - Commit message and PR guidelines"}),"\n",(0,s.jsx)(t.li,{children:"Environment Management - Multi-environment setup"}),"\n",(0,s.jsx)(t.li,{children:"Build Automation - Automated build processes"}),"\n",(0,s.jsx)(t.li,{children:"Branch Management - Branching strategies and merging"}),"\n",(0,s.jsx)(t.li,{children:"Database Versioning - Schema version control"}),"\n",(0,s.jsx)(t.li,{children:"Build Notifications - Team communication and alerts"}),"\n",(0,s.jsx)(t.li,{children:"GitOps Implementation - Infrastructure as code"}),"\n",(0,s.jsx)(t.li,{children:"Centralized Logging - Log aggregation and analysis"}),"\n",(0,s.jsx)(t.li,{children:"Configuration Scripts - Automated server configuration"}),"\n",(0,s.jsx)(t.li,{children:"Environment Provisioning - Automated environment creation"}),"\n",(0,s.jsx)(t.li,{children:"Auto-scaling Setup - Automatic resource scaling"}),"\n",(0,s.jsx)(t.li,{children:"Immutable Infrastructure - Infrastructure lifecycle management"}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"continuous-monitoring",children:"Continuous Monitoring"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Enhanced Monitoring - Advanced metrics and alerting"}),"\n",(0,s.jsx)(t.li,{children:"Team Monitoring Access - Shared monitoring visibility"}),"\n",(0,s.jsx)(t.li,{children:"DevOps Problem Resolution - Team-based issue handling"}),"\n",(0,s.jsx)(t.li,{children:"Business Monitoring - Business metrics tracking"}),"\n",(0,s.jsx)(t.li,{children:"Automated Issue Resolution - Self-healing systems"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"-architecture-management",children:"\ud83d\udcca Architecture Management"}),"\n",(0,s.jsx)(t.p,{children:"Management practices for skills development, planning, and continuous improvement."}),"\n",(0,s.jsx)(t.h4,{id:"people--technical-skills-development",children:"People & Technical Skills Development"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-management/skills-assessment",children:"Skills Assessment"})})," - Team capability mapping and development"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Additional practices to be documented:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Architecture Roadmap - Technical milestone planning"}),"\n",(0,s.jsx)(t.li,{children:"PDCA Meetings - Regular architecture review sessions"}),"\n",(0,s.jsx)(t.li,{children:"Solution Review Process - Peer architecture reviews"}),"\n",(0,s.jsx)(t.li,{children:"Action Plan Tracking - Systematic improvement tracking"}),"\n",(0,s.jsx)(t.li,{children:"Architecture Backlog - Technical debt and improvement management"}),"\n",(0,s.jsx)(t.li,{children:"Technical Debt Management - Debt monitoring and reduction"}),"\n",(0,s.jsx)(t.li,{children:"Knowledge Sharing - Organization-wide practice scaling"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"-architecture-validation",children:"\u2705 Architecture Validation"}),"\n",(0,s.jsx)(t.p,{children:"Validation practices for ensuring quality, performance, and compliance."}),"\n",(0,s.jsx)(t.h4,{id:"architecture-evaluation--testing",children:"Architecture Evaluation & Testing"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-validation/code-review-process",children:"Code Review Process"})})," - Quality-focused manual code reviews"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-validation/architecture-evaluation",children:"Architecture Evaluation"})})," - Automated quality monitoring, architectural compliance, and review frameworks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-validation/continuous-testing",children:"Continuous Testing"})})," - Comprehensive testing strategies including unit, integration, E2E, and cross-platform testing"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-validation/non-functional-requirements-validation",children:"Non-functional Requirements Validation"})})," - Performance, security, scalability, and compliance testing frameworks"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Section Status"}),": \u2705 ",(0,s.jsx)(t.strong,{children:"Complete"})," (4/4 practices documented with comprehensive NestJS and Next.js implementations)"]}),"\n",(0,s.jsx)(t.h2,{id:"implementation-approach",children:"Implementation Approach"}),"\n",(0,s.jsx)(t.h3,{id:"-getting-started",children:"\ud83c\udfaf Getting Started"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Assessment"}),": Use the ",(0,s.jsx)(t.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-maturity-assessment",children:"Architecture Maturity Assessment"})," to identify your current maturity level"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Planning"}),": Select practices appropriate for your target maturity level"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Implementation"}),": Follow the detailed guides for each selected practice"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Validation"}),": Verify implementation using the provided checklists and metrics"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Iteration"}),": Continuously improve based on feedback and results"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"-maturity-progression",children:"\ud83d\udcc8 Maturity Progression"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Level 1 (Foundation)"}),": Start with basic documentation, environment setup, and fundamental processes\n",(0,s.jsx)(t.strong,{children:"Level 2 (Managed)"}),": Add automation, standardization, and enhanced monitoring\n",(0,s.jsx)(t.strong,{children:"Level 3 (Defined)"}),": Implement quality gates, comprehensive testing, and metrics-driven improvements\n",(0,s.jsx)(t.strong,{children:"Level 4 (Quantitatively Managed)"}),": Focus on automation, self-service capabilities, and advanced monitoring\n",(0,s.jsx)(t.strong,{children:"Level 5 (Optimizing)"}),": Achieve self-healing systems, organization-wide scaling, and continuous innovation"]}),"\n",(0,s.jsx)(t.h3,{id:"-cross-references",children:"\ud83d\udd17 Cross-References"}),"\n",(0,s.jsx)(t.p,{children:"Each practice guide includes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Prerequisites"}),": Required foundation practices"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Dependencies"}),": Related practices that should be implemented together"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Next Steps"}),": Logical progression to higher maturity levels"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Related Documentation"}),": Links to complementary guides"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"technology-specific-considerations",children:"Technology-Specific Considerations"}),"\n",(0,s.jsx)(t.h3,{id:"nestjs-microservices",children:"NestJS Microservices"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Service mesh integration"})," for inter-service communication"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Distributed tracing"})," for request flow monitoring"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"API versioning strategies"})," for backward compatibility"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Event-driven architecture"})," with message queues"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Database per service"})," pattern implementation"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"nextjs-microfrontends",children:"Next.js Microfrontends"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Module Federation"})," for runtime integration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Shared component libraries"})," for consistency"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Independent deployment"})," strategies"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State management"})," across microfrontends"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Performance optimization"})," for large applications"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"support-and-contribution",children:"Support and Contribution"}),"\n",(0,s.jsx)(t.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Documentation Issues"}),": Report gaps or improvements needed"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Implementation Questions"}),": Seek guidance on specific practices"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Best Practice Updates"}),": Suggest improvements based on experience"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"contributing",children:"Contributing"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Practice Updates"}),": Share improvements and lessons learned"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"New Practices"}),": Propose additional architecture practices"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Technology Updates"}),": Update guides for new technology versions"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Real-world Examples"}),": Contribute working examples and case studies"]}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"This documentation is continuously updated to reflect evolving best practices and technology capabilities."})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},5741:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>o});var n=i(9729);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);