"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7343],{2456:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"architecture-practices/architecture-definition/dev-use-cases-guide","title":"Development Use Cases Guide","description":"This guide provides step-by-step instructions for special development scenarios commonly encountered when building NestJS microservices and Next.js microfrontends.","source":"@site/docs/architecture-practices/architecture-definition/dev-use-cases-guide.md","sourceDirName":"architecture-practices/architecture-definition","slug":"/architecture-practices/architecture-definition/dev-use-cases-guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-use-cases-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-definition/dev-use-cases-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Coding Standards & Conventions for NestJS & Next.js","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards"},"next":{"title":"Code Quality Tools","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/code-quality-tools"}}');var s=t(5813),o=t(5741);const i={},c="Development Use Cases Guide",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Environment Setup Use Cases",id:"environment-setup-use-cases",level:2},{value:"Multi-Service Local Development",id:"multi-service-local-development",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Setup Steps",id:"setup-steps",level:4},{value:"Frontend Development with Backend Proxy",id:"frontend-development-with-backend-proxy",level:3},{value:"Configuration Steps",id:"configuration-steps",level:4},{value:"Custom Tool Integration",id:"custom-tool-integration",level:2},{value:"Database Migration Tools",id:"database-migration-tools",level:3},{value:"TypeORM Migration Setup",id:"typeorm-migration-setup",level:4},{value:"Testing Tool Configuration",id:"testing-tool-configuration",level:3},{value:"Jest Configuration for Integration Tests",id:"jest-configuration-for-integration-tests",level:4},{value:"Test Database Setup",id:"test-database-setup",level:4},{value:"Debugging Procedures",id:"debugging-procedures",level:2},{value:"Microservice Communication Debugging",id:"microservice-communication-debugging",level:3},{value:"Service Health Checks",id:"service-health-checks",level:4},{value:"Message Queue Debugging",id:"message-queue-debugging",level:4},{value:"Frontend Debugging Tools",id:"frontend-debugging-tools",level:3},{value:"Redux DevTools Configuration",id:"redux-devtools-configuration",level:4},{value:"Error Boundary for Debugging",id:"error-boundary-for-debugging",level:4},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Port Conflicts",id:"port-conflicts",level:3},{value:"Database Connection Issues",id:"database-connection-issues",level:3},{value:"CORS Issues in Development",id:"cors-issues-in-development",level:3},{value:"Module Federation Issues",id:"module-federation-issues",level:3},{value:"Custom Scripts and Automation",id:"custom-scripts-and-automation",level:2},{value:"Development Workflow Scripts",id:"development-workflow-scripts",level:3},{value:"Cleanup Scripts",id:"cleanup-scripts",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Service Dependencies",id:"service-dependencies",level:3},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-use-cases-guide",children:"Development Use Cases Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides step-by-step instructions for special development scenarios commonly encountered when building NestJS microservices and Next.js microfrontends."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Special development use cases require specific tools, configurations, and procedures that go beyond standard development workflows. This guide covers environment setup, custom tooling, debugging procedures, and troubleshooting for complex scenarios."}),"\n",(0,s.jsx)(n.h2,{id:"environment-setup-use-cases",children:"Environment Setup Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"multi-service-local-development",children:"Multi-Service Local Development"}),"\n",(0,s.jsx)(n.p,{children:"Setting up multiple NestJS services and Next.js applications locally with proper service discovery and communication."}),"\n",(0,s.jsx)(n.h4,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Docker and Docker Compose installed"}),"\n",(0,s.jsx)(n.li,{children:"Node.js 18+ and pnpm/npm"}),"\n",(0,s.jsx)(n.li,{children:"Git and development tools configured"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"setup-steps",children:"Setup Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Clone and Setup Services"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clone the monorepo\ngit clone <repository-url>\ncd <project-name>\n\n# Install dependencies for all services\npnpm install\n\n# Start infrastructure services\ndocker-compose up -d postgres redis rabbitmq\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Configure Service Discovery"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// shared/config/services.config.ts\nexport const ServiceConfig = {\n  userService: {\n    host: process.env.USER_SERVICE_HOST || 'localhost',\n    port: process.env.USER_SERVICE_PORT || 3001,\n  },\n  orderService: {\n    host: process.env.ORDER_SERVICE_HOST || 'localhost', \n    port: process.env.ORDER_SERVICE_PORT || 3002,\n  },\n  gateway: {\n    host: process.env.GATEWAY_HOST || 'localhost',\n    port: process.env.GATEWAY_PORT || 3000,\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Environment Variable Configuration"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# .env.local (for local development)\nDATABASE_URL="postgresql://user:password@localhost:5432/microservices_db"\nREDIS_URL="redis://localhost:6379"\nRABBITMQ_URL="amqp://localhost:5672"\n\n# Service-specific variables\nUSER_SERVICE_PORT=3001\nORDER_SERVICE_PORT=3002\nGATEWAY_PORT=3000\n\n# JWT secrets\nJWT_SECRET="your-dev-jwt-secret"\nJWT_REFRESH_SECRET="your-dev-refresh-secret"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"frontend-development-with-backend-proxy",children:"Frontend Development with Backend Proxy"}),"\n",(0,s.jsx)(n.p,{children:"Setting up Next.js applications to proxy API calls to local NestJS services during development."}),"\n",(0,s.jsx)(n.h4,{id:"configuration-steps",children:"Configuration Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Next.js Proxy Setup"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  async rewrites() {\n    return [\n      {\n        source: '/api/users/:path*',\n        destination: 'http://localhost:3001/users/:path*',\n      },\n      {\n        source: '/api/orders/:path*', \n        destination: 'http://localhost:3002/orders/:path*',\n      },\n      {\n        source: '/api/auth/:path*',\n        destination: 'http://localhost:3000/auth/:path*',\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"API Client Configuration"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// lib/api-client.ts\nimport axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' \n    ? 'http://localhost:3100' // Next.js dev server\n    : process.env.NEXT_PUBLIC_API_BASE_URL,\n  timeout: 10000,\n});\n\n// Request interceptor for auth\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-tool-integration",children:"Custom Tool Integration"}),"\n",(0,s.jsx)(n.h3,{id:"database-migration-tools",children:"Database Migration Tools"}),"\n",(0,s.jsx)(n.p,{children:"Setting up and using database migration tools for schema management across services."}),"\n",(0,s.jsx)(n.h4,{id:"typeorm-migration-setup",children:"TypeORM Migration Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Migration Configuration"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/database/database.config.ts\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\n\nexport const databaseConfig: TypeOrmModuleOptions = {\n  type: 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT) || 5432,\n  username: process.env.DB_USERNAME || 'postgres',\n  password: process.env.DB_PASSWORD || 'password',\n  database: process.env.DB_NAME || 'microservice_db',\n  entities: ['dist/**/*.entity{.ts,.js}'],\n  migrations: ['dist/migrations/*{.ts,.js}'],\n  synchronize: false, // Never use in production\n  logging: process.env.NODE_ENV === 'development',\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Migration Scripts"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// package.json scripts\n{\n  "scripts": {\n    "migration:generate": "typeorm-ts-node-commonjs migration:generate -d src/database/data-source.ts",\n    "migration:run": "typeorm-ts-node-commonjs migration:run -d src/database/data-source.ts",\n    "migration:revert": "typeorm-ts-node-commonjs migration:revert -d src/database/data-source.ts",\n    "schema:drop": "typeorm-ts-node-commonjs schema:drop -d src/database/data-source.ts"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Cross-Service Migration Coordination"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/run-migrations.sh\necho "Running migrations for all services..."\n\nservices=("user-service" "order-service" "payment-service")\n\nfor service in "${services[@]}"; do\n  echo "Running migrations for $service"\n  cd "services/$service"\n  npm run migration:run\n  cd ../../\ndone\n\necho "All migrations completed"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-tool-configuration",children:"Testing Tool Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Setting up testing tools for microservices integration testing."}),"\n",(0,s.jsx)(n.h4,{id:"jest-configuration-for-integration-tests",children:"Jest Configuration for Integration Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// jest.integration.config.js\nmodule.exports = {\n  displayName: 'Integration Tests',\n  testMatch: ['<rootDir>/test/integration/**/*.spec.ts'],\n  moduleFileExtensions: ['js', 'json', 'ts'],\n  rootDir: '.',\n  testEnvironment: 'node',\n  transform: {\n    '^.+\\\\.(t|j)s$': 'ts-jest',\n  },\n  setupFilesAfterEnv: ['<rootDir>/test/integration/setup.ts'],\n  globalTeardown: '<rootDir>/test/integration/teardown.ts',\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"test-database-setup",children:"Test Database Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// test/integration/setup.ts\nimport { Test } from '@nestjs/testing';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DataSource } from 'typeorm';\n\nexport let testDataSource: DataSource;\n\nbeforeAll(async () => {\n  const module = await Test.createTestingModule({\n    imports: [\n      TypeOrmModule.forRoot({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5433, // Different port for test DB\n        username: 'test_user',\n        password: 'test_password',\n        database: 'test_db',\n        entities: ['src/**/*.entity.ts'],\n        synchronize: true, // OK for tests\n        dropSchema: true, // Clean slate for each test run\n      }),\n    ],\n  }).compile();\n\n  testDataSource = module.get(DataSource);\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-procedures",children:"Debugging Procedures"}),"\n",(0,s.jsx)(n.h3,{id:"microservice-communication-debugging",children:"Microservice Communication Debugging"}),"\n",(0,s.jsx)(n.p,{children:"Debugging inter-service communication issues and message queue problems."}),"\n",(0,s.jsx)(n.h4,{id:"service-health-checks",children:"Service Health Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/health/health.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () => this.checkExternalServices(),\n    ]);\n  }\n\n  private async checkExternalServices() {\n    // Check dependent services\n    const checks = await Promise.allSettled([\n      fetch('http://user-service:3001/health'),\n      fetch('http://order-service:3002/health'),\n    ]);\n    \n    return {\n      external_services: {\n        status: checks.every(check => check.status === 'fulfilled') ? 'up' : 'down',\n        checks: checks.map((check, index) => ({\n          service: ['user-service', 'order-service'][index],\n          status: check.status === 'fulfilled' ? 'up' : 'down',\n        })),\n      },\n    };\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"message-queue-debugging",children:"Message Queue Debugging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/messaging/rabbitmq-debug.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { RabbitMQModule, AmqpConnection } from '@golevelup/nestjs-rabbitmq';\n\n@Injectable()\nexport class RabbitMQDebugService {\n  private readonly logger = new Logger(RabbitMQDebugService.name);\n\n  constructor(private readonly amqpConnection: AmqpConnection) {}\n\n  async debugQueue(queueName: string) {\n    try {\n      const channel = this.amqpConnection.channel;\n      const queueInfo = await channel.checkQueue(queueName);\n      \n      this.logger.log(`Queue ${queueName} info:`, {\n        messageCount: queueInfo.messageCount,\n        consumerCount: queueInfo.consumerCount,\n      });\n      \n      return queueInfo;\n    } catch (error) {\n      this.logger.error(`Failed to check queue ${queueName}:`, error);\n      throw error;\n    }\n  }\n\n  async purgeQueue(queueName: string) {\n    try {\n      const channel = this.amqpConnection.channel;\n      await channel.purgeQueue(queueName);\n      this.logger.log(`Purged queue ${queueName}`);\n    } catch (error) {\n      this.logger.error(`Failed to purge queue ${queueName}:`, error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"frontend-debugging-tools",children:"Frontend Debugging Tools"}),"\n",(0,s.jsx)(n.p,{children:"Setting up debugging tools for Next.js microfrontends."}),"\n",(0,s.jsx)(n.h4,{id:"redux-devtools-configuration",children:"Redux DevTools Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// store/store.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\n\nexport const store = configureStore({\n  reducer: {\n    // your reducers\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST'],\n      },\n    }),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\n// Enable listener behavior for the store\nsetupListeners(store.dispatch);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"error-boundary-for-debugging",children:"Error Boundary for Debugging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// components/ErrorBoundary.tsx\nimport React from 'react';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport class ErrorBoundary extends React.Component<\n  React.PropsWithChildren<{}>,\n  ErrorBoundaryState\n> {\n  constructor(props: React.PropsWithChildren<{}>) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    this.setState({ error, errorInfo });\n    \n    // Log to external service in production\n    if (process.env.NODE_ENV === 'production') {\n      console.error('Error caught by boundary:', error, errorInfo);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"error-boundary\">\n          <h2>Something went wrong.</h2>\n          {process.env.NODE_ENV === 'development' && (\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              <summary>Error details</summary>\n              {this.state.error && this.state.error.toString()}\n              <br />\n              {this.state.errorInfo.componentStack}\n            </details>\n          )}\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,s.jsx)(n.h3,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,s.jsx)(n.p,{children:"When multiple services try to use the same port:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check what's using a port\nlsof -i :3000\n\n# Kill process using port\nkill -9 $(lsof -ti:3000)\n\n# Use different ports per service\nexport USER_SERVICE_PORT=3001\nexport ORDER_SERVICE_PORT=3002\nexport GATEWAY_PORT=3000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"database-connection-issues",children:"Database Connection Issues"}),"\n",(0,s.jsx)(n.p,{children:"Common database connectivity problems and solutions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/database/database-retry.config.ts\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\n\nexport const databaseConfigWithRetry: TypeOrmModuleOptions = {\n  // ... other config\n  retryAttempts: 3,\n  retryDelay: 3000,\n  autoLoadEntities: true,\n  synchronize: false,\n  logging: ['error', 'warn'],\n  extra: {\n    // Connection pool settings\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cors-issues-in-development",children:"CORS Issues in Development"}),"\n",(0,s.jsx)(n.p,{children:"Handling CORS problems when frontend and backend run on different ports:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/main.ts (NestJS)\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  \n  // Configure CORS for development\n  app.enableCors({\n    origin: [\n      'http://localhost:3000', // Next.js dev server\n      'http://localhost:3100', // Alternative port\n      'http://localhost:4200', // Angular dev server if needed\n    ],\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n    allowedHeaders: ['Content-Type', 'Authorization'],\n    credentials: true,\n  });\n\n  await app.listen(process.env.PORT || 3001);\n}\nbootstrap();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"module-federation-issues",children:"Module Federation Issues"}),"\n",(0,s.jsx)(n.p,{children:"Troubleshooting microfrontend integration problems:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js - Module Federation debugging\nconst { NextFederationPlugin } = require('@module-federation/nextjs-mf');\n\nconst nextConfig = {\n  webpack: (config, { dev, isServer }) => {\n    if (!isServer) {\n      config.plugins.push(\n        new NextFederationPlugin({\n          name: 'shell',\n          remotes: {\n            mfe1: `mfe1@http://localhost:3001/_next/static/chunks/remoteEntry.js`,\n            mfe2: `mfe2@http://localhost:3002/_next/static/chunks/remoteEntry.js`,\n          },\n          shared: {\n            react: { singleton: true, eager: true },\n            'react-dom': { singleton: true, eager: true },\n          },\n        })\n      );\n    }\n\n    // Add source maps for debugging\n    if (dev) {\n      config.devtool = 'source-map';\n    }\n\n    return config;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-scripts-and-automation",children:"Custom Scripts and Automation"}),"\n",(0,s.jsx)(n.h3,{id:"development-workflow-scripts",children:"Development Workflow Scripts"}),"\n",(0,s.jsx)(n.p,{children:"Automated scripts for common development tasks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/dev-setup.sh\n\necho "Setting up development environment..."\n\n# Start infrastructure\necho "Starting infrastructure services..."\ndocker-compose up -d postgres redis rabbitmq\n\n# Wait for services to be ready\necho "Waiting for services to be ready..."\nsleep 10\n\n# Run migrations\necho "Running database migrations..."\nnpm run migration:run\n\n# Install dependencies\necho "Installing dependencies..."\npnpm install\n\n# Start all services in development mode\necho "Starting all services..."\npnpm run dev:all\n\necho "Development environment is ready!"\necho "Frontend: http://localhost:3000"\necho "API Gateway: http://localhost:3001"\necho "Service Health: http://localhost:3001/health"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cleanup-scripts",children:"Cleanup Scripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/cleanup-dev.sh\n\necho "Cleaning up development environment..."\n\n# Stop all node processes\npkill -f "node.*3000|node.*3001|node.*3002"\n\n# Stop docker services\ndocker-compose down\n\n# Clean up logs and temp files\nrm -rf logs/*\nrm -rf temp/*\nrm -rf .next\n\necho "Cleanup completed!"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use different database names/ports for each environment"}),"\n",(0,s.jsx)(n.li,{children:"Never commit sensitive environment variables"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:".env.example"})," files to document required variables"]}),"\n",(0,s.jsx)(n.li,{children:"Validate environment variables at application startup"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"service-dependencies",children:"Service Dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement health checks for all dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Use circuit breakers for external service calls"}),"\n",(0,s.jsx)(n.li,{children:"Implement retry logic with exponential backoff"}),"\n",(0,s.jsx)(n.li,{children:"Monitor service dependencies continuously"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use consistent port assignments across team"}),"\n",(0,s.jsx)(n.li,{children:"Implement hot reload for faster development cycles"}),"\n",(0,s.jsx)(n.li,{children:"Use shared configuration for consistent environments"}),"\n",(0,s.jsx)(n.li,{children:"Document special setup requirements clearly"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})})," - Basic environment configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/scm-policy",children:"SCM Policy"})})," - Source control and workflow procedures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards",children:"Coding Standards"})})," - Code quality and testing standards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/cicd-pipeline",children:"CI/CD Pipeline"})})," - Automated build and deployment"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"This guide should be updated as new development use cases are identified and new tools are integrated into the development workflow."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5741:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(9729);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);