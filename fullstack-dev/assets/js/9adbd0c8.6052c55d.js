"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[3146],{3926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"architecture-practices/architecture-execution/infrastructure-monitoring","title":"Infrastructure Monitoring Guide","description":"This guide provides comprehensive infrastructure monitoring strategies for NestJS microservices and Next.js microfrontend applications, covering system health, performance metrics, and automated alerting.","source":"@site/docs/architecture-practices/architecture-execution/infrastructure-monitoring.md","sourceDirName":"architecture-practices/architecture-execution","slug":"/architecture-practices/architecture-execution/infrastructure-monitoring","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/infrastructure-monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-execution/infrastructure-monitoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Deployment Automation Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/deployment-automation"},"next":{"title":"Application Performance Monitoring Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/application-monitoring"}}');var s=t(5813),i=t(5741);const a={},o="Infrastructure Monitoring Guide",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Monitoring Architecture",id:"monitoring-architecture",level:2},{value:"Multi-Layer Monitoring Strategy",id:"multi-layer-monitoring-strategy",level:3},{value:"Core Monitoring Stack",id:"core-monitoring-stack",level:2},{value:"Prometheus Configuration",id:"prometheus-configuration",level:3},{value:"AlertManager Configuration",id:"alertmanager-configuration",level:3},{value:"Application Metrics Integration",id:"application-metrics-integration",level:2},{value:"NestJS Prometheus Integration",id:"nestjs-prometheus-integration",level:3},{value:"Monitoring Middleware",id:"monitoring-middleware",level:3},{value:"Health Check Implementation",id:"health-check-implementation",level:3},{value:"Next.js Monitoring Integration",id:"nextjs-monitoring-integration",level:2},{value:"Client-Side Monitoring",id:"client-side-monitoring",level:3},{value:"Next.js Monitoring Hook",id:"nextjs-monitoring-hook",level:3},{value:"Alerting Rules",id:"alerting-rules",level:2},{value:"Prometheus Alerting Rules",id:"prometheus-alerting-rules",level:3},{value:"Grafana Dashboards",id:"grafana-dashboards",level:2},{value:"Infrastructure Dashboard",id:"infrastructure-dashboard",level:3},{value:"Application Dashboard",id:"application-dashboard",level:3},{value:"Log Aggregation",id:"log-aggregation",level:2},{value:"Fluent Bit Configuration",id:"fluent-bit-configuration",level:3},{value:"Custom Monitoring Components",id:"custom-monitoring-components",level:2},{value:"Database Performance Monitor",id:"database-performance-monitor",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Monitoring Guidelines",id:"monitoring-guidelines",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"infrastructure-monitoring-guide",children:"Infrastructure Monitoring Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide provides comprehensive infrastructure monitoring strategies for NestJS microservices and Next.js microfrontend applications, covering system health, performance metrics, and automated alerting."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Infrastructure monitoring ensures system reliability, performance optimization, and proactive issue detection. This guide covers monitoring setup for containers, Kubernetes clusters, databases, and cloud services using industry-standard tools and practices."}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-architecture",children:"Monitoring Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"multi-layer-monitoring-strategy",children:"Multi-Layer Monitoring Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Application Layer] --\x3e B[Metrics Collection]\n    C[Infrastructure Layer] --\x3e B\n    D[Network Layer] --\x3e B\n    E[Database Layer] --\x3e B\n    \n    B --\x3e F[Prometheus]\n    F --\x3e G[Grafana]\n    F --\x3e H[AlertManager]\n    \n    I[Logs] --\x3e J[Fluentd/Fluent Bit]\n    J --\x3e K[Elasticsearch]\n    K --\x3e L[Kibana]\n    \n    M[Traces] --\x3e N[Jaeger]\n    \n    H --\x3e O[PagerDuty]\n    H --\x3e P[Slack]\n    H --\x3e Q[Email]\n    \n    R[Health Checks] --\x3e S[Blackbox Exporter]\n    S --\x3e F\n"})}),"\n",(0,s.jsx)(n.h2,{id:"core-monitoring-stack",children:"Core Monitoring Stack"}),"\n",(0,s.jsx)(n.h3,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# monitoring/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: 'production'\n    region: 'us-west-2'\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nrule_files:\n  - \"rules/*.yml\"\n\nscrape_configs:\n  # Kubernetes API Server\n  - job_name: 'kubernetes-apiservers'\n    kubernetes_sd_configs:\n    - role: endpoints\n    scheme: https\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n      action: keep\n      regex: default;kubernetes;https\n\n  # Kubernetes Nodes\n  - job_name: 'kubernetes-nodes'\n    kubernetes_sd_configs:\n    - role: node\n    scheme: https\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    relabel_configs:\n    - action: labelmap\n      regex: __meta_kubernetes_node_label_(.+)\n\n  # Kubernetes Pods\n  - job_name: 'kubernetes-pods'\n    kubernetes_sd_configs:\n    - role: pod\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n      action: keep\n      regex: true\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n      action: replace\n      target_label: __metrics_path__\n      regex: (.+)\n    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n      action: replace\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement: $1:$2\n      target_label: __address__\n    - action: labelmap\n      regex: __meta_kubernetes_pod_label_(.+)\n    - source_labels: [__meta_kubernetes_namespace]\n      action: replace\n      target_label: kubernetes_namespace\n    - source_labels: [__meta_kubernetes_pod_name]\n      action: replace\n      target_label: kubernetes_pod_name\n\n  # NestJS Applications\n  - job_name: 'nestjs-services'\n    kubernetes_sd_configs:\n    - role: endpoints\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n      action: keep\n      regex: true\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n      action: replace\n      target_label: __scheme__\n      regex: (https?)\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n      action: replace\n      target_label: __metrics_path__\n      regex: (.+)\n    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n      action: replace\n      target_label: __address__\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement: $1:$2\n    - action: labelmap\n      regex: __meta_kubernetes_service_label_(.+)\n    - source_labels: [__meta_kubernetes_namespace]\n      action: replace\n      target_label: kubernetes_namespace\n    - source_labels: [__meta_kubernetes_service_name]\n      action: replace\n      target_label: kubernetes_name\n\n  # PostgreSQL Database\n  - job_name: 'postgresql'\n    static_configs:\n    - targets: ['postgres-exporter:9187']\n    scrape_interval: 30s\n\n  # Redis Cache\n  - job_name: 'redis'\n    static_configs:\n    - targets: ['redis-exporter:9121']\n    scrape_interval: 30s\n\n  # Node Exporter\n  - job_name: 'node-exporter'\n    kubernetes_sd_configs:\n    - role: endpoints\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_endpoints_name]\n      action: keep\n      regex: node-exporter\n\n  # Blackbox Exporter for URL monitoring\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n    - targets:\n      - https://api.example.com/health\n      - https://app.example.com/health\n    relabel_configs:\n    - source_labels: [__address__]\n      target_label: __param_target\n    - source_labels: [__param_target]\n      target_label: instance\n    - target_label: __address__\n      replacement: blackbox-exporter:9115\n"})}),"\n",(0,s.jsx)(n.h3,{id:"alertmanager-configuration",children:"AlertManager Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# monitoring/alertmanager/alertmanager.yml\nglobal:\n  smtp_smarthost: 'smtp.example.com:587'\n  smtp_from: 'alerts@example.com'\n  smtp_auth_username: 'alerts@example.com'\n  smtp_auth_password: 'password'\n\ntemplates:\n  - '/etc/alertmanager/templates/*.tmpl'\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'default'\n  routes:\n  - match:\n      severity: critical\n    receiver: 'critical-alerts'\n    group_wait: 5s\n    repeat_interval: 5m\n  - match:\n      severity: warning\n    receiver: 'warning-alerts'\n    repeat_interval: 15m\n  - match_re:\n      service: ^(user-service|order-service|payment-service)$\n    receiver: 'microservices-team'\n  - match:\n      component: frontend\n    receiver: 'frontend-team'\n\nreceivers:\n- name: 'default'\n  email_configs:\n  - to: 'devops@example.com'\n    subject: '[ALERT] {{ .GroupLabels.alertname }}'\n    body: |\n      {{ range .Alerts }}\n      Alert: {{ .Annotations.summary }}\n      Description: {{ .Annotations.description }}\n      {{ end }}\n\n- name: 'critical-alerts'\n  pagerduty_configs:\n  - routing_key: 'YOUR_PAGERDUTY_INTEGRATION_KEY'\n    description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'\n  slack_configs:\n  - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n    channel: '#critical-alerts'\n    title: 'Critical Alert: {{ .GroupLabels.alertname }}'\n    text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'\n    send_resolved: true\n\n- name: 'warning-alerts'\n  slack_configs:\n  - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n    channel: '#warnings'\n    title: 'Warning: {{ .GroupLabels.alertname }}'\n    text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'\n    send_resolved: true\n\n- name: 'microservices-team'\n  email_configs:\n  - to: 'microservices-team@example.com'\n    subject: '[Microservices Alert] {{ .GroupLabels.alertname }}'\n  slack_configs:\n  - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n    channel: '#microservices-alerts'\n\n- name: 'frontend-team'\n  email_configs:\n  - to: 'frontend-team@example.com'\n    subject: '[Frontend Alert] {{ .GroupLabels.alertname }}'\n  slack_configs:\n  - api_url: 'YOUR_SLACK_WEBHOOK_URL'\n    channel: '#frontend-alerts'\n\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  equal: ['alertname', 'cluster', 'service']\n"})}),"\n",(0,s.jsx)(n.h2,{id:"application-metrics-integration",children:"Application Metrics Integration"}),"\n",(0,s.jsx)(n.h3,{id:"nestjs-prometheus-integration",children:"NestJS Prometheus Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/monitoring/prometheus.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { register, Counter, Histogram, Gauge } from 'prom-client';\n\n@Injectable()\nexport class PrometheusService {\n  private readonly httpRequestsTotal = new Counter({\n    name: 'http_requests_total',\n    help: 'Total number of HTTP requests',\n    labelNames: ['method', 'route', 'status_code'],\n    registers: [register],\n  });\n\n  private readonly httpRequestDuration = new Histogram({\n    name: 'http_request_duration_seconds',\n    help: 'Duration of HTTP requests in seconds',\n    labelNames: ['method', 'route'],\n    buckets: [0.1, 0.3, 0.5, 0.7, 1, 3, 5, 7, 10],\n    registers: [register],\n  });\n\n  private readonly databaseConnectionsActive = new Gauge({\n    name: 'database_connections_active',\n    help: 'Number of active database connections',\n    registers: [register],\n  });\n\n  private readonly redisConnectionsActive = new Gauge({\n    name: 'redis_connections_active',\n    help: 'Number of active Redis connections',\n    registers: [register],\n  });\n\n  private readonly businessMetrics = {\n    usersRegistered: new Counter({\n      name: 'users_registered_total',\n      help: 'Total number of user registrations',\n      labelNames: ['source'],\n      registers: [register],\n    }),\n    ordersCreated: new Counter({\n      name: 'orders_created_total',\n      help: 'Total number of orders created',\n      labelNames: ['status'],\n      registers: [register],\n    }),\n    paymentProcessed: new Counter({\n      name: 'payments_processed_total',\n      help: 'Total number of payments processed',\n      labelNames: ['status', 'provider'],\n      registers: [register],\n    }),\n    activeUsers: new Gauge({\n      name: 'active_users_current',\n      help: 'Current number of active users',\n      registers: [register],\n    }),\n  };\n\n  recordHttpRequest(method: string, route: string, statusCode: number, duration: number): void {\n    this.httpRequestsTotal.inc({ method, route, status_code: statusCode.toString() });\n    this.httpRequestDuration.observe({ method, route }, duration);\n  }\n\n  updateDatabaseConnections(count: number): void {\n    this.databaseConnectionsActive.set(count);\n  }\n\n  updateRedisConnections(count: number): void {\n    this.redisConnectionsActive.set(count);\n  }\n\n  recordUserRegistration(source: string): void {\n    this.businessMetrics.usersRegistered.inc({ source });\n  }\n\n  recordOrderCreation(status: string): void {\n    this.businessMetrics.ordersCreated.inc({ status });\n  }\n\n  recordPayment(status: string, provider: string): void {\n    this.businessMetrics.paymentProcessed.inc({ status, provider });\n  }\n\n  updateActiveUsers(count: number): void {\n    this.businessMetrics.activeUsers.set(count);\n  }\n\n  getMetrics(): string {\n    return register.metrics();\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"monitoring-middleware",children:"Monitoring Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/middleware/monitoring.middleware.ts\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrometheusService } from '../monitoring/prometheus.service';\n\n@Injectable()\nexport class MonitoringMiddleware implements NestMiddleware {\n  constructor(private readonly prometheusService: PrometheusService) {}\n\n  use(req: Request, res: Response, next: NextFunction): void {\n    const startTime = Date.now();\n\n    res.on('finish', () => {\n      const duration = (Date.now() - startTime) / 1000;\n      const route = req.route?.path || req.path;\n      \n      this.prometheusService.recordHttpRequest(\n        req.method,\n        route,\n        res.statusCode,\n        duration\n      );\n    });\n\n    next();\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"health-check-implementation",children:"Health Check Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/health/health.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { HealthCheckService, HttpHealthIndicator, TypeOrmHealthIndicator } from '@nestjs/terminus';\nimport { PrometheusService } from '../monitoring/prometheus.service';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private db: TypeOrmHealthIndicator,\n    private prometheus: PrometheusService,\n  ) {}\n\n  @Get()\n  check() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () => this.http.pingCheck('redis', 'redis://localhost:6379'),\n    ]);\n  }\n\n  @Get('ready')\n  ready() {\n    return this.health.check([\n      () => this.db.pingCheck('database'),\n      () => this.http.pingCheck('redis', 'redis://localhost:6379'),\n      () => this.http.pingCheck('external-api', 'https://api.external-service.com/health'),\n    ]);\n  }\n\n  @Get('metrics')\n  metrics() {\n    return this.prometheus.getMetrics();\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nextjs-monitoring-integration",children:"Next.js Monitoring Integration"}),"\n",(0,s.jsx)(n.h3,{id:"client-side-monitoring",children:"Client-Side Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// lib/monitoring/client-metrics.ts\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  labels?: Record<string, string>;\n}\n\nclass ClientMetrics {\n  private metrics: PerformanceMetric[] = [];\n\n  // Core Web Vitals\n  recordCLS(value: number, route: string): void {\n    this.metrics.push({\n      name: 'web_vitals_cls',\n      value,\n      labels: { route, metric: 'cls' },\n    });\n  }\n\n  recordFID(value: number, route: string): void {\n    this.metrics.push({\n      name: 'web_vitals_fid',\n      value,\n      labels: { route, metric: 'fid' },\n    });\n  }\n\n  recordLCP(value: number, route: string): void {\n    this.metrics.push({\n      name: 'web_vitals_lcp',\n      value,\n      labels: { route, metric: 'lcp' },\n    });\n  }\n\n  recordFCP(value: number, route: string): void {\n    this.metrics.push({\n      name: 'web_vitals_fcp',\n      value,\n      labels: { route, metric: 'fcp' },\n    });\n  }\n\n  recordTTFB(value: number, route: string): void {\n    this.metrics.push({\n      name: 'web_vitals_ttfb',\n      value,\n      labels: { route, metric: 'ttfb' },\n    });\n  }\n\n  // Custom Business Metrics\n  recordUserInteraction(action: string, component: string): void {\n    this.metrics.push({\n      name: 'user_interactions_total',\n      value: 1,\n      labels: { action, component },\n    });\n  }\n\n  recordAPICall(endpoint: string, status: number, duration: number): void {\n    this.metrics.push({\n      name: 'api_calls_total',\n      value: 1,\n      labels: { endpoint, status: status.toString() },\n    });\n    \n    this.metrics.push({\n      name: 'api_call_duration_seconds',\n      value: duration / 1000,\n      labels: { endpoint },\n    });\n  }\n\n  recordPageView(route: string, loadTime: number): void {\n    this.metrics.push({\n      name: 'page_views_total',\n      value: 1,\n      labels: { route },\n    });\n    \n    this.metrics.push({\n      name: 'page_load_time_seconds',\n      value: loadTime / 1000,\n      labels: { route },\n    });\n  }\n\n  recordError(type: string, message: string, component?: string): void {\n    this.metrics.push({\n      name: 'client_errors_total',\n      value: 1,\n      labels: { type, component: component || 'unknown' },\n    });\n  }\n\n  // Send metrics to backend\n  async sendMetrics(): Promise<void> {\n    if (this.metrics.length === 0) return;\n\n    try {\n      await fetch('/api/metrics', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ metrics: this.metrics }),\n      });\n      \n      this.metrics = []; // Clear after sending\n    } catch (error) {\n      console.error('Failed to send metrics:', error);\n    }\n  }\n\n  // Automatic metric collection\n  collectWebVitals(): void {\n    if (typeof window === 'undefined') return;\n\n    // Collect Core Web Vitals\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      const route = window.location.pathname;\n      \n      getCLS((metric) => this.recordCLS(metric.value, route));\n      getFID((metric) => this.recordFID(metric.value, route));\n      getFCP((metric) => this.recordFCP(metric.value, route));\n      getLCP((metric) => this.recordLCP(metric.value, route));\n      getTTFB((metric) => this.recordTTFB(metric.value, route));\n    });\n\n    // Page load metrics\n    window.addEventListener('load', () => {\n      const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n      this.recordPageView(window.location.pathname, loadTime);\n    });\n\n    // Unhandled errors\n    window.addEventListener('error', (event) => {\n      this.recordError('javascript', event.error?.message || 'Unknown error', event.filename);\n    });\n\n    // Unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      this.recordError('promise', event.reason?.message || 'Unhandled promise rejection');\n    });\n\n    // Send metrics periodically\n    setInterval(() => this.sendMetrics(), 30000); // Every 30 seconds\n  }\n}\n\nexport const clientMetrics = new ClientMetrics();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nextjs-monitoring-hook",children:"Next.js Monitoring Hook"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// hooks/use-monitoring.ts\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { clientMetrics } from '../lib/monitoring/client-metrics';\n\nexport const useMonitoring = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // Initialize monitoring\n    clientMetrics.collectWebVitals();\n\n    // Track route changes\n    const handleRouteChange = (url: string) => {\n      const startTime = Date.now();\n      \n      const handleRouteComplete = () => {\n        const loadTime = Date.now() - startTime;\n        clientMetrics.recordPageView(url, loadTime);\n        router.events.off('routeChangeComplete', handleRouteComplete);\n      };\n      \n      router.events.on('routeChangeComplete', handleRouteComplete);\n    };\n\n    router.events.on('routeChangeStart', handleRouteChange);\n\n    return () => {\n      router.events.off('routeChangeStart', handleRouteChange);\n    };\n  }, [router]);\n\n  const trackUserInteraction = (action: string, component: string) => {\n    clientMetrics.recordUserInteraction(action, component);\n  };\n\n  const trackAPICall = (endpoint: string, status: number, duration: number) => {\n    clientMetrics.recordAPICall(endpoint, status, duration);\n  };\n\n  const trackError = (type: string, message: string, component?: string) => {\n    clientMetrics.recordError(type, message, component);\n  };\n\n  return {\n    trackUserInteraction,\n    trackAPICall,\n    trackError,\n  };\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"alerting-rules",children:"Alerting Rules"}),"\n",(0,s.jsx)(n.h3,{id:"prometheus-alerting-rules",children:"Prometheus Alerting Rules"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# monitoring/rules/infrastructure.yml\ngroups:\n- name: infrastructure\n  rules:\n  - alert: HighCPUUsage\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: "High CPU usage detected"\n      description: "CPU usage is above 80% for more than 5 minutes on {{ $labels.instance }}"\n\n  - alert: HighMemoryUsage\n    expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: "High memory usage detected"\n      description: "Memory usage is above 85% for more than 5 minutes on {{ $labels.instance }}"\n\n  - alert: DiskSpaceLow\n    expr: 100 - ((node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes) > 90\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: "Disk space critically low"\n      description: "Disk usage is above 90% on {{ $labels.instance }} filesystem {{ $labels.mountpoint }}"\n\n  - alert: PodCrashLooping\n    expr: rate(kube_pod_container_status_restarts_total[5m]) > 0\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: "Pod is crash looping"\n      description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is restarting frequently"\n\n- name: applications\n  rules:\n  - alert: HighErrorRate\n    expr: rate(http_requests_total{status_code=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: "High application error rate"\n      description: "Error rate is above 5% for service {{ $labels.kubernetes_name }}"\n\n  - alert: HighResponseTime\n    expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: "High response time detected"\n      description: "95th percentile response time is above 1 second for {{ $labels.kubernetes_name }}"\n\n  - alert: DatabaseConnectionsHigh\n    expr: database_connections_active > 80\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: "High database connection usage"\n      description: "Database connections are above 80 for service {{ $labels.kubernetes_name }}"\n\n  - alert: ServiceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: "Service is down"\n      description: "Service {{ $labels.job }} is down"\n\n- name: business\n  rules:\n  - alert: LowOrderRate\n    expr: rate(orders_created_total[1h]) < 10\n    for: 15m\n    labels:\n      severity: warning\n    annotations:\n      summary: "Low order creation rate"\n      description: "Order creation rate is below 10 per hour"\n\n  - alert: HighPaymentFailureRate\n    expr: rate(payments_processed_total{status="failed"}[5m]) / rate(payments_processed_total[5m]) > 0.1\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: "High payment failure rate"\n      description: "Payment failure rate is above 10%"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"grafana-dashboards",children:"Grafana Dashboards"}),"\n",(0,s.jsx)(n.h3,{id:"infrastructure-dashboard",children:"Infrastructure Dashboard"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "id": null,\n    "title": "Infrastructure Monitoring",\n    "tags": ["infrastructure", "kubernetes"],\n    "timezone": "browser",\n    "panels": [\n      {\n        "id": 1,\n        "title": "CPU Usage",\n        "type": "stat",\n        "targets": [\n          {\n            "expr": "100 - (avg(irate(node_cpu_seconds_total{mode=\\"idle\\"}[5m])) * 100)",\n            "legendFormat": "CPU Usage %"\n          }\n        ],\n        "fieldConfig": {\n          "defaults": {\n            "thresholds": {\n              "steps": [\n                {"color": "green", "value": null},\n                {"color": "yellow", "value": 70},\n                {"color": "red", "value": 85}\n              ]\n            }\n          }\n        }\n      },\n      {\n        "id": 2,\n        "title": "Memory Usage",\n        "type": "stat",\n        "targets": [\n          {\n            "expr": "100 * (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))",\n            "legendFormat": "Memory Usage %"\n          }\n        ]\n      },\n      {\n        "id": 3,\n        "title": "Pod Status",\n        "type": "table",\n        "targets": [\n          {\n            "expr": "kube_pod_status_phase",\n            "format": "table"\n          }\n        ]\n      },\n      {\n        "id": 4,\n        "title": "Network I/O",\n        "type": "timeseries",\n        "targets": [\n          {\n            "expr": "rate(node_network_receive_bytes_total[5m])",\n            "legendFormat": "{{device}} - Receive"\n          },\n          {\n            "expr": "rate(node_network_transmit_bytes_total[5m])",\n            "legendFormat": "{{device}} - Transmit"\n          }\n        ]\n      }\n    ],\n    "time": {\n      "from": "now-1h",\n      "to": "now"\n    },\n    "refresh": "30s"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"application-dashboard",children:"Application Dashboard"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Application Monitoring",\n    "panels": [\n      {\n        "id": 1,\n        "title": "Request Rate",\n        "type": "timeseries",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total[5m])",\n            "legendFormat": "{{method}} {{route}}"\n          }\n        ]\n      },\n      {\n        "id": 2,\n        "title": "Error Rate",\n        "type": "timeseries",\n        "targets": [\n          {\n            "expr": "rate(http_requests_total{status_code=~\\"5..\\"}[5m])",\n            "legendFormat": "5xx Errors"\n          },\n          {\n            "expr": "rate(http_requests_total{status_code=~\\"4..\\"}[5m])",\n            "legendFormat": "4xx Errors"\n          }\n        ]\n      },\n      {\n        "id": 3,\n        "title": "Response Time",\n        "type": "timeseries",\n        "targets": [\n          {\n            "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "50th percentile"\n          },\n          {\n            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "95th percentile"\n          },\n          {\n            "expr": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))",\n            "legendFormat": "99th percentile"\n          }\n        ]\n      },\n      {\n        "id": 4,\n        "title": "Database Connections",\n        "type": "timeseries",\n        "targets": [\n          {\n            "expr": "database_connections_active",\n            "legendFormat": "Active Connections"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"log-aggregation",children:"Log Aggregation"}),"\n",(0,s.jsx)(n.h3,{id:"fluent-bit-configuration",children:"Fluent Bit Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# logging/fluent-bit/fluent-bit.conf\n[SERVICE]\n    Flush         1\n    Log_Level     info\n    Daemon        off\n    Parsers_File  parsers.conf\n    HTTP_Server   On\n    HTTP_Listen   0.0.0.0\n    HTTP_Port     2020\n\n[INPUT]\n    Name              tail\n    Path              /var/log/containers/*.log\n    Parser            cri\n    Tag               kube.*\n    Refresh_Interval  5\n    Mem_Buf_Limit     50MB\n    Skip_Long_Lines   On\n\n[INPUT]\n    Name            systemd\n    Tag             host.*\n    Systemd_Filter  _SYSTEMD_UNIT=kubelet.service\n    Read_From_Tail  On\n\n[FILTER]\n    Name                kubernetes\n    Match               kube.*\n    Kube_URL            https://kubernetes.default.svc:443\n    Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token\n    Kube_Tag_Prefix     kube.var.log.containers.\n    Merge_Log           On\n    Merge_Log_Key       log_processed\n    K8S-Logging.Parser  On\n    K8S-Logging.Exclude Off\n\n[FILTER]\n    Name        nest\n    Match       kube.*\n    Operation   lift\n    Nested_under kubernetes\n    Add_prefix   kubernetes_\n\n[FILTER]\n    Name        modify\n    Match       kube.*\n    Add         cluster production\n    Add         region us-west-2\n\n[OUTPUT]\n    Name        es\n    Match       kube.*\n    Host        elasticsearch.logging.svc.cluster.local\n    Port        9200\n    Index       kubernetes-logs\n    Type        _doc\n    Logstash_Format On\n    Logstash_Prefix kubernetes\n    Time_Key    @timestamp\n    Time_Key_Format %Y-%m-%dT%H:%M:%S.%L%z\n\n[OUTPUT]\n    Name        prometheus_exporter\n    Match       *\n    Host        0.0.0.0\n    Port        2021\n"})}),"\n",(0,s.jsx)(n.h2,{id:"custom-monitoring-components",children:"Custom Monitoring Components"}),"\n",(0,s.jsx)(n.h3,{id:"database-performance-monitor",children:"Database Performance Monitor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/monitoring/database-monitor.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { DataSource } from 'typeorm';\nimport { PrometheusService } from './prometheus.service';\n\n@Injectable()\nexport class DatabaseMonitorService {\n  private readonly logger = new Logger(DatabaseMonitorService.name);\n\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly prometheus: PrometheusService,\n  ) {}\n\n  @Cron(CronExpression.EVERY_30_SECONDS)\n  async monitorDatabasePerformance(): Promise<void> {\n    try {\n      // Monitor active connections\n      const connectionCount = await this.getActiveConnections();\n      this.prometheus.updateDatabaseConnections(connectionCount);\n\n      // Monitor slow queries\n      const slowQueries = await this.getSlowQueries();\n      this.logSlowQueries(slowQueries);\n\n      // Monitor database size\n      const dbSize = await this.getDatabaseSize();\n      this.prometheus.updateDatabaseSize(dbSize);\n\n      // Monitor table sizes\n      const tableSizes = await this.getTableSizes();\n      this.updateTableSizeMetrics(tableSizes);\n\n    } catch (error) {\n      this.logger.error('Database monitoring failed', error);\n    }\n  }\n\n  private async getActiveConnections(): Promise<number> {\n    const result = await this.dataSource.query(`\n      SELECT count(*) as connections \n      FROM pg_stat_activity \n      WHERE state = 'active'\n    `);\n    return parseInt(result[0].connections);\n  }\n\n  private async getSlowQueries(): Promise<any[]> {\n    return this.dataSource.query(`\n      SELECT query, mean_exec_time, calls \n      FROM pg_stat_statements \n      WHERE mean_exec_time > 1000 \n      ORDER BY mean_exec_time DESC \n      LIMIT 10\n    `);\n  }\n\n  private async getDatabaseSize(): Promise<number> {\n    const result = await this.dataSource.query(`\n      SELECT pg_database_size(current_database()) as size\n    `);\n    return parseInt(result[0].size);\n  }\n\n  private async getTableSizes(): Promise<Array<{table: string, size: number}>> {\n    return this.dataSource.query(`\n      SELECT \n        schemaname,\n        tablename as table,\n        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,\n        pg_total_relation_size(schemaname||'.'||tablename) as size_bytes\n      FROM pg_tables \n      WHERE schemaname = 'public'\n      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC\n    `);\n  }\n\n  private logSlowQueries(queries: any[]): void {\n    queries.forEach(query => {\n      this.logger.warn(`Slow query detected: ${query.query.substring(0, 100)}... (${query.mean_exec_time}ms avg, ${query.calls} calls)`);\n    });\n  }\n\n  private updateTableSizeMetrics(tableSizes: Array<{table: string, size_bytes: number}>): void {\n    // Update Prometheus metrics for table sizes\n    // Implementation depends on your specific metrics setup\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"monitoring-guidelines",children:"Monitoring Guidelines"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Golden Signals"}),": Monitor latency, traffic, errors, and saturation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SLI/SLO Definition"}),": Define Service Level Indicators and Objectives"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Alert Fatigue"}),": Minimize false positives and actionable alerts only"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Observability"}),": Combine metrics, logs, and traces for complete visibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Business Metrics"}),": Include business-relevant metrics alongside technical ones"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Efficient metric collection patterns\nexport const MONITORING_BEST_PRACTICES = {\n  // Sample rates for high-traffic endpoints\n  METRIC_SAMPLING: {\n    'high-traffic': 0.1,    // 10% sampling\n    'medium-traffic': 0.5,  // 50% sampling\n    'low-traffic': 1.0,     // 100% sampling\n  },\n  \n  // Metric retention policies\n  RETENTION_POLICIES: {\n    'high-resolution': '7d',    // 7 days of 15s resolution\n    'medium-resolution': '30d', // 30 days of 1m resolution\n    'low-resolution': '1y',     // 1 year of 1h resolution\n  },\n  \n  // Alert escalation timings\n  ALERT_ESCALATION: {\n    'warning': '5m',\n    'critical': '1m',\n    'page-worthy': '30s',\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/deployment-automation",children:"Deployment Automation"})})," - Infrastructure deployment and management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/cicd-pipeline",children:"CI/CD Pipeline"})})," - Build and deployment monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/architecture-foundation",children:"Architecture Foundation"})})," - Core monitoring patterns"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"This infrastructure monitoring guide should be regularly updated to incorporate new tools and monitoring requirements as your system evolves."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},5741:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(9729);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);