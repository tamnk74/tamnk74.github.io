"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9407],{2969:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var r=t(6635),o=t(5813),i=t(7814);const s={slug:"building-interactive-tour-guide",title:"Building an Interactive Tour Guide for New Features - Full-Stack Developer Guide",authors:["tam"],tags:["user-experience","react","typescript","onboarding","feature-discovery","full-stack"],date:new Date("2025-10-05T00:00:00.000Z")},a="Building an Interactive Tour Guide for New Features - Full-Stack Developer Guide",l={authorsImageUrls:[void 0]},c=[{value:"Why Interactive Tours Matter",id:"why-interactive-tours-matter",level:2},{value:"\ud83d\udcc8 <strong>Improved Feature Adoption</strong>",id:"-improved-feature-adoption",level:3},{value:"\ud83c\udfaf <strong>Enhanced User Onboarding</strong>",id:"-enhanced-user-onboarding",level:3},{value:"\ud83d\udca1 <strong>Reduced Support Burden</strong>",id:"-reduced-support-burden",level:3},{value:"Tour System Architecture",id:"tour-system-architecture",level:2},{value:"Core Tour Engine Implementation",id:"core-tour-engine-implementation",level:2},{value:"Tour Overlay Component",id:"tour-overlay-component",level:2},{value:"Tour Tooltip Component",id:"tour-tooltip-component",level:2},{value:"Tour Manager for Multiple Tours",id:"tour-manager-for-multiple-tours",level:2},{value:"Tour Definitions and Configuration",id:"tour-definitions-and-configuration",level:2},{value:"Tour Styles and Animations",id:"tour-styles-and-animations",level:2},{value:"Integration with Your App",id:"integration-with-your-app",level:2},{value:"Open Source Solutions",id:"open-source-solutions",level:2},{value:"1. Intro.js - The Classic Choice",id:"1-introjs---the-classic-choice",level:3},{value:"2. Reactour - React-First Approach",id:"2-reactour---react-first-approach",level:3},{value:"3. Shepherd.js - Framework Agnostic",id:"3-shepherdjs---framework-agnostic",level:3},{value:"4. Driver.js - Lightweight and Modern",id:"4-driverjs---lightweight-and-modern",level:3},{value:"Library Comparison and Recommendations",id:"library-comparison-and-recommendations",level:3},{value:"Choosing the Right Library",id:"choosing-the-right-library",level:3},{value:"Hybrid Approach: Combining Libraries",id:"hybrid-approach-combining-libraries",level:3},{value:"Quick Start Templates",id:"quick-start-templates",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Analytics Integration",id:"analytics-integration",level:3},{value:"A/B Testing Support",id:"ab-testing-support",level:3},{value:"Best Practices and Tips",id:"best-practices-and-tips",level:2},{value:"\ud83c\udfaf <strong>Content Guidelines</strong>",id:"-content-guidelines",level:3},{value:"\ud83d\udd27 <strong>Technical Considerations</strong>",id:"-technical-considerations",level:3},{value:"\ud83d\udcca <strong>Measurement and Optimization</strong>",id:"-measurement-and-optimization",level:3},{value:"\ud83c\udfa8 <strong>Design Principles</strong>",id:"-design-principles",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(n){const e={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"Creating an effective interactive tour guide is crucial for helping users discover and adopt new features in your application. A well-designed tour can significantly improve user onboarding, feature adoption rates, and overall user satisfaction. In this comprehensive guide, we'll explore how to build a flexible, accessible, and engaging tour system that can highlight new features and guide users through complex workflows."}),"\n",(0,o.jsx)(e.h2,{id:"why-interactive-tours-matter",children:"Why Interactive Tours Matter"}),"\n",(0,o.jsx)(e.p,{children:"Before diving into implementation, let's understand why interactive tours are essential for modern applications:"}),"\n",(0,o.jsxs)(e.h3,{id:"-improved-feature-adoption",children:["\ud83d\udcc8 ",(0,o.jsx)(e.strong,{children:"Improved Feature Adoption"})]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"New features often go unnoticed without proper introduction"}),"\n",(0,o.jsx)(e.li,{children:"Tours increase feature discovery by 40-60% on average"}),"\n",(0,o.jsx)(e.li,{children:"Guided experiences reduce the learning curve for complex features"}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"-enhanced-user-onboarding",children:["\ud83c\udfaf ",(0,o.jsx)(e.strong,{children:"Enhanced User Onboarding"})]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Contextual guidance reduces user frustration"}),"\n",(0,o.jsx)(e.li,{children:"Step-by-step walkthroughs improve task completion rates"}),"\n",(0,o.jsx)(e.li,{children:"Personalized tours adapt to different user roles and experience levels"}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"-reduced-support-burden",children:["\ud83d\udca1 ",(0,o.jsx)(e.strong,{children:"Reduced Support Burden"})]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Proactive guidance prevents common user questions"}),"\n",(0,o.jsx)(e.li,{children:"Self-service learning reduces support ticket volume"}),"\n",(0,o.jsx)(e.li,{children:"Interactive help is available exactly when needed"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"tour-system-architecture",children:"Tour System Architecture"}),"\n",(0,o.jsx)(e.p,{children:"Let's build a tour system that's flexible, reusable, and easy to maintain. Our architecture will consist of several key components:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// Types for our tour system\ninterface TourStep {\n  id: string;\n  target: string; // CSS selector or element ID\n  title: string;\n  content: string;\n  placement?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  action?: 'click' | 'hover' | 'focus' | 'none';\n  beforeShow?: () => Promise<void> | void;\n  afterShow?: () => Promise<void> | void;\n  beforeHide?: () => Promise<void> | void;\n  skipable?: boolean;\n  highlightPadding?: number;\n  zIndex?: number;\n}\n\ninterface Tour {\n  id: string;\n  name: string;\n  description: string;\n  steps: TourStep[];\n  triggerConditions?: TriggerCondition[];\n  userSegments?: string[];\n  isActive: boolean;\n  priority: number;\n}\n\ninterface TourState {\n  currentTour: Tour | null;\n  currentStepIndex: number;\n  isPlaying: boolean;\n  completedTours: string[];\n  skippedTours: string[];\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"core-tour-engine-implementation",children:"Core Tour Engine Implementation"}),"\n",(0,o.jsx)(e.p,{children:"Let's start with the main tour engine that will manage tour execution:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// hooks/useTourEngine.ts\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\n\nexport const useTourEngine = () => {\n  const [tourState, setTourState] = useState<TourState>({\n    currentTour: null,\n    currentStepIndex: 0,\n    isPlaying: false,\n    completedTours: [],\n    skippedTours: [],\n  });\n\n  const [completedTours, setCompletedTours] = useLocalStorage<string[]>('tour-completed', []);\n  const [skippedTours, setSkippedTours] = useLocalStorage<string[]>('tour-skipped', []);\n  \n  const overlayRef = useRef<HTMLDivElement | null>(null);\n  const highlightRef = useRef<HTMLDivElement | null>(null);\n\n  // Start a tour\n  const startTour = useCallback(async (tour: Tour) => {\n    if (completedTours.includes(tour.id) || skippedTours.includes(tour.id)) {\n      return;\n    }\n\n    setTourState({\n      currentTour: tour,\n      currentStepIndex: 0,\n      isPlaying: true,\n      completedTours,\n      skippedTours,\n    });\n\n    // Execute beforeShow hook for first step\n    if (tour.steps[0]?.beforeShow) {\n      await tour.steps[0].beforeShow();\n    }\n  }, [completedTours, skippedTours]);\n\n  // Navigate to next step\n  const nextStep = useCallback(async () => {\n    if (!tourState.currentTour) return;\n\n    const currentStep = tourState.currentTour.steps[tourState.currentStepIndex];\n    \n    // Execute beforeHide hook\n    if (currentStep?.beforeHide) {\n      await currentStep.beforeHide();\n    }\n\n    const nextIndex = tourState.currentStepIndex + 1;\n    \n    if (nextIndex >= tourState.currentTour.steps.length) {\n      // Tour completed\n      completeTour();\n      return;\n    }\n\n    setTourState(prev => ({\n      ...prev,\n      currentStepIndex: nextIndex,\n    }));\n\n    // Execute beforeShow hook for next step\n    const nextStep = tourState.currentTour.steps[nextIndex];\n    if (nextStep?.beforeShow) {\n      await nextStep.beforeShow();\n    }\n  }, [tourState]);\n\n  // Navigate to previous step\n  const previousStep = useCallback(async () => {\n    if (!tourState.currentTour || tourState.currentStepIndex === 0) return;\n\n    const currentStep = tourState.currentTour.steps[tourState.currentStepIndex];\n    \n    if (currentStep?.beforeHide) {\n      await currentStep.beforeHide();\n    }\n\n    const prevIndex = tourState.currentStepIndex - 1;\n    setTourState(prev => ({\n      ...prev,\n      currentStepIndex: prevIndex,\n    }));\n\n    const prevStep = tourState.currentTour.steps[prevIndex];\n    if (prevStep?.beforeShow) {\n      await prevStep.beforeShow();\n    }\n  }, [tourState]);\n\n  // Complete tour\n  const completeTour = useCallback(() => {\n    if (!tourState.currentTour) return;\n\n    const newCompleted = [...completedTours, tourState.currentTour.id];\n    setCompletedTours(newCompleted);\n    \n    setTourState(prev => ({\n      ...prev,\n      currentTour: null,\n      currentStepIndex: 0,\n      isPlaying: false,\n      completedTours: newCompleted,\n    }));\n  }, [tourState.currentTour, completedTours, setCompletedTours]);\n\n  // Skip tour\n  const skipTour = useCallback(() => {\n    if (!tourState.currentTour) return;\n\n    const newSkipped = [...skippedTours, tourState.currentTour.id];\n    setSkippedTours(newSkipped);\n    \n    setTourState(prev => ({\n      ...prev,\n      currentTour: null,\n      currentStepIndex: 0,\n      isPlaying: false,\n      skippedTours: newSkipped,\n    }));\n  }, [tourState.currentTour, skippedTours, setSkippedTours]);\n\n  // Get current step\n  const getCurrentStep = useCallback((): TourStep | null => {\n    if (!tourState.currentTour) return null;\n    return tourState.currentTour.steps[tourState.currentStepIndex] || null;\n  }, [tourState]);\n\n  return {\n    tourState,\n    startTour,\n    nextStep,\n    previousStep,\n    completeTour,\n    skipTour,\n    getCurrentStep,\n  };\n};\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tour-overlay-component",children:"Tour Overlay Component"}),"\n",(0,o.jsx)(e.p,{children:"The overlay component creates the spotlight effect and manages the visual presentation:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// components/TourOverlay/TourOverlay.tsx\nimport React, { useEffect, useState, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { TourStep } from '../../types/tour.types';\nimport { TourTooltip } from './TourTooltip';\n\ninterface TourOverlayProps {\n  step: TourStep;\n  onNext: () => void;\n  onPrevious: () => void;\n  onSkip: () => void;\n  onComplete: () => void;\n  currentStepIndex: number;\n  totalSteps: number;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n}\n\nexport const TourOverlay: React.FC<TourOverlayProps> = ({\n  step,\n  onNext,\n  onPrevious,\n  onSkip,\n  onComplete,\n  currentStepIndex,\n  totalSteps,\n  isFirstStep,\n  isLastStep,\n}) => {\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\n  const [targetRect, setTargetRect] = useState<DOMRect | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const element = document.querySelector(step.target) as HTMLElement;\n    if (element) {\n      setTargetElement(element);\n      updatePositions(element);\n      \n      // Scroll element into view\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'center',\n      });\n\n      // Add highlight class to target element\n      element.classList.add('tour-highlight');\n      \n      // Execute step action\n      if (step.action === 'click') {\n        element.click();\n      } else if (step.action === 'focus') {\n        element.focus();\n      } else if (step.action === 'hover') {\n        element.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));\n      }\n    }\n\n    return () => {\n      if (element) {\n        element.classList.remove('tour-highlight');\n      }\n    };\n  }, [step]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (targetElement) {\n        updatePositions(targetElement);\n      }\n    };\n\n    const handleScroll = () => {\n      if (targetElement) {\n        updatePositions(targetElement);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('scroll', handleScroll, true);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('scroll', handleScroll, true);\n    };\n  }, [targetElement]);\n\n  const updatePositions = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n    setTargetRect(rect);\n\n    // Calculate tooltip position based on placement preference\n    const placement = step.placement || 'bottom';\n    const padding = step.highlightPadding || 8;\n    \n    let tooltipX = 0;\n    let tooltipY = 0;\n\n    switch (placement) {\n      case 'top':\n        tooltipX = rect.left + rect.width / 2;\n        tooltipY = rect.top - padding;\n        break;\n      case 'bottom':\n        tooltipX = rect.left + rect.width / 2;\n        tooltipY = rect.bottom + padding;\n        break;\n      case 'left':\n        tooltipX = rect.left - padding;\n        tooltipY = rect.top + rect.height / 2;\n        break;\n      case 'right':\n        tooltipX = rect.right + padding;\n        tooltipY = rect.top + rect.height / 2;\n        break;\n      case 'center':\n        tooltipX = window.innerWidth / 2;\n        tooltipY = window.innerHeight / 2;\n        break;\n    }\n\n    setTooltipPosition({ x: tooltipX, y: tooltipY });\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'Escape':\n        onSkip();\n        break;\n      case 'ArrowRight':\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        if (isLastStep) {\n          onComplete();\n        } else {\n          onNext();\n        }\n        break;\n      case 'ArrowLeft':\n        e.preventDefault();\n        if (!isFirstStep) {\n          onPrevious();\n        }\n        break;\n    }\n  };\n\n  if (!targetRect) return null;\n\n  const overlayStyle: React.CSSProperties = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    zIndex: step.zIndex || 1000,\n    pointerEvents: 'auto',\n  };\n\n  const spotlightStyle: React.CSSProperties = {\n    position: 'absolute',\n    top: targetRect.top - (step.highlightPadding || 8),\n    left: targetRect.left - (step.highlightPadding || 8),\n    width: targetRect.width + (step.highlightPadding || 8) * 2,\n    height: targetRect.height + (step.highlightPadding || 8) * 2,\n    boxShadow: `0 0 0 9999px rgba(0, 0, 0, 0.5)`,\n    borderRadius: '8px',\n    pointerEvents: 'none',\n  };\n\n  return createPortal(\n    <div\n      ref={overlayRef}\n      style={overlayStyle}\n      onKeyDown={handleKeyDown}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"tour-title\"\n      aria-describedby=\"tour-content\"\n    >\n      {/* Spotlight effect */}\n      <div style={spotlightStyle} />\n      \n      {/* Tooltip */}\n      <TourTooltip\n        step={step}\n        position={tooltipPosition}\n        onNext={onNext}\n        onPrevious={onPrevious}\n        onSkip={onSkip}\n        onComplete={onComplete}\n        currentStepIndex={currentStepIndex}\n        totalSteps={totalSteps}\n        isFirstStep={isFirstStep}\n        isLastStep={isLastStep}\n        placement={step.placement || 'bottom'}\n      />\n    </div>,\n    document.body\n  );\n};\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tour-tooltip-component",children:"Tour Tooltip Component"}),"\n",(0,o.jsx)(e.p,{children:"The tooltip displays step content and navigation controls:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// components/TourOverlay/TourTooltip.tsx\nimport React from 'react';\nimport { TourStep } from '../../types/tour.types';\n\ninterface TourTooltipProps {\n  step: TourStep;\n  position: { x: number; y: number };\n  placement: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  onNext: () => void;\n  onPrevious: () => void;\n  onSkip: () => void;\n  onComplete: () => void;\n  currentStepIndex: number;\n  totalSteps: number;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n}\n\nexport const TourTooltip: React.FC<TourTooltipProps> = ({\n  step,\n  position,\n  placement,\n  onNext,\n  onPrevious,\n  onSkip,\n  onComplete,\n  currentStepIndex,\n  totalSteps,\n  isFirstStep,\n  isLastStep,\n}) => {\n  const getTooltipStyle = (): React.CSSProperties => {\n    const baseStyle: React.CSSProperties = {\n      position: 'absolute',\n      backgroundColor: 'white',\n      borderRadius: '12px',\n      padding: '20px',\n      boxShadow: '0 10px 40px rgba(0, 0, 0, 0.2)',\n      maxWidth: '320px',\n      minWidth: '280px',\n      zIndex: 1001,\n      transform: getTransform(),\n    };\n\n    return {\n      ...baseStyle,\n      left: position.x,\n      top: position.y,\n    };\n  };\n\n  const getTransform = (): string => {\n    switch (placement) {\n      case 'top':\n        return 'translate(-50%, -100%)';\n      case 'bottom':\n        return 'translate(-50%, 0)';\n      case 'left':\n        return 'translate(-100%, -50%)';\n      case 'right':\n        return 'translate(0, -50%)';\n      case 'center':\n        return 'translate(-50%, -50%)';\n      default:\n        return 'translate(-50%, 0)';\n    }\n  };\n\n  const getArrowStyle = (): React.CSSProperties | null => {\n    if (placement === 'center') return null;\n\n    const baseArrow: React.CSSProperties = {\n      position: 'absolute',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid',\n    };\n\n    switch (placement) {\n      case 'top':\n        return {\n          ...baseArrow,\n          bottom: '-8px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '8px 8px 0 8px',\n          borderColor: 'white transparent transparent transparent',\n        };\n      case 'bottom':\n        return {\n          ...baseArrow,\n          top: '-8px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '0 8px 8px 8px',\n          borderColor: 'transparent transparent white transparent',\n        };\n      case 'left':\n        return {\n          ...baseArrow,\n          right: '-8px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 0 8px 8px',\n          borderColor: 'transparent transparent transparent white',\n        };\n      case 'right':\n        return {\n          ...baseArrow,\n          left: '-8px',\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 8px 8px 0',\n          borderColor: 'transparent white transparent transparent',\n        };\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div style={getTooltipStyle()} className=\"tour-tooltip\">\n      {/* Arrow */}\n      {getArrowStyle() && <div style={getArrowStyle()!} />}\n      \n      {/* Header */}\n      <div className=\"tour-tooltip__header\">\n        <h3 id=\"tour-title\" className=\"tour-tooltip__title\">\n          {step.title}\n        </h3>\n        <div className=\"tour-tooltip__progress\">\n          <span className=\"tour-tooltip__step-counter\">\n            {currentStepIndex + 1} of {totalSteps}\n          </span>\n          <div className=\"tour-tooltip__progress-bar\">\n            <div\n              className=\"tour-tooltip__progress-fill\"\n              style={{\n                width: `${((currentStepIndex + 1) / totalSteps) * 100}%`,\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div\n        id=\"tour-content\"\n        className=\"tour-tooltip__content\"\n        dangerouslySetInnerHTML={{ __html: step.content }}\n      />\n\n      {/* Navigation */}\n      <div className=\"tour-tooltip__actions\">\n        <div className=\"tour-tooltip__actions-left\">\n          {step.skipable !== false && (\n            <button\n              onClick={onSkip}\n              className=\"tour-button tour-button--secondary\"\n              type=\"button\"\n            >\n              Skip Tour\n            </button>\n          )}\n        </div>\n        \n        <div className=\"tour-tooltip__actions-right\">\n          {!isFirstStep && (\n            <button\n              onClick={onPrevious}\n              className=\"tour-button tour-button--secondary\"\n              type=\"button\"\n            >\n              Previous\n            </button>\n          )}\n          \n          <button\n            onClick={isLastStep ? onComplete : onNext}\n            className=\"tour-button tour-button--primary\"\n            type=\"button\"\n            autoFocus\n          >\n            {isLastStep ? 'Finish' : 'Next'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tour-manager-for-multiple-tours",children:"Tour Manager for Multiple Tours"}),"\n",(0,o.jsx)(e.p,{children:"A tour manager handles multiple tours and their triggering conditions:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// hooks/useTourManager.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { Tour, TriggerCondition } from '../types/tour.types';\nimport { useTourEngine } from './useTourEngine';\n\ninterface TourManagerConfig {\n  tours: Tour[];\n  autoStart?: boolean;\n  debugMode?: boolean;\n}\n\nexport const useTourManager = ({ tours, autoStart = true, debugMode = false }: TourManagerConfig) => {\n  const [availableTours, setAvailableTours] = useState<Tour[]>([]);\n  const tourEngine = useTourEngine();\n\n  // Evaluate tour trigger conditions\n  const evaluateTriggerConditions = useCallback((conditions: TriggerCondition[]): boolean => {\n    return conditions.every(condition => {\n      switch (condition.type) {\n        case 'url_match':\n          return window.location.pathname.includes(condition.value);\n        \n        case 'element_exists':\n          return document.querySelector(condition.value) !== null;\n        \n        case 'user_segment':\n          // This would typically check against user data from your auth system\n          const userSegment = localStorage.getItem('user_segment');\n          return userSegment === condition.value;\n        \n        case 'feature_flag':\n          // Check if a feature flag is enabled\n          const featureFlags = JSON.parse(localStorage.getItem('feature_flags') || '{}');\n          return featureFlags[condition.value] === true;\n        \n        case 'page_visit_count':\n          const visitCount = parseInt(localStorage.getItem('page_visit_count') || '0');\n          return visitCount >= parseInt(condition.value);\n        \n        case 'time_on_page':\n          // This would need to be implemented with a timer\n          return true; // Simplified for example\n        \n        default:\n          return false;\n      }\n    });\n  }, []);\n\n  // Find eligible tours\n  const findEligibleTours = useCallback((): Tour[] => {\n    return tours.filter(tour => {\n      // Skip if tour is not active\n      if (!tour.isActive) return false;\n      \n      // Skip if already completed or skipped\n      if (tourEngine.tourState.completedTours.includes(tour.id) || \n          tourEngine.tourState.skippedTours.includes(tour.id)) {\n        return false;\n      }\n      \n      // Check trigger conditions\n      if (tour.triggerConditions && tour.triggerConditions.length > 0) {\n        return evaluateTriggerConditions(tour.triggerConditions);\n      }\n      \n      return true;\n    }).sort((a, b) => b.priority - a.priority); // Higher priority first\n  }, [tours, tourEngine.tourState, evaluateTriggerConditions]);\n\n  // Auto-start eligible tours\n  useEffect(() => {\n    if (!autoStart || tourEngine.tourState.isPlaying) return;\n\n    const eligible = findEligibleTours();\n    if (eligible.length > 0) {\n      const nextTour = eligible[0];\n      \n      if (debugMode) {\n        console.log('Starting tour:', nextTour.name);\n      }\n      \n      // Small delay to ensure page is fully loaded\n      setTimeout(() => {\n        tourEngine.startTour(nextTour);\n      }, 500);\n    }\n  }, [findEligibleTours, autoStart, tourEngine, debugMode]);\n\n  // Manual tour starter\n  const startTourById = useCallback((tourId: string) => {\n    const tour = tours.find(t => t.id === tourId);\n    if (tour) {\n      tourEngine.startTour(tour);\n    }\n  }, [tours, tourEngine]);\n\n  // Reset tour state (useful for testing)\n  const resetTourState = useCallback(() => {\n    localStorage.removeItem('tour-completed');\n    localStorage.removeItem('tour-skipped');\n    window.location.reload();\n  }, []);\n\n  return {\n    ...tourEngine,\n    availableTours: findEligibleTours(),\n    startTourById,\n    resetTourState,\n  };\n};\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tour-definitions-and-configuration",children:"Tour Definitions and Configuration"}),"\n",(0,o.jsx)(e.p,{children:"Create tour definitions for your application features:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// data/tours.ts\nexport const appTours: Tour[] = [\n  {\n    id: 'new-dashboard-features',\n    name: 'New Dashboard Features',\n    description: 'Discover the latest improvements to your dashboard',\n    priority: 10,\n    isActive: true,\n    triggerConditions: [\n      { type: 'url_match', value: '/dashboard' },\n      { type: 'feature_flag', value: 'new_dashboard_tour' }\n    ],\n    steps: [\n      {\n        id: 'welcome',\n        target: 'body',\n        title: 'Welcome to Your Enhanced Dashboard! \ud83c\udf89',\n        content: `\n          <p>We've added some exciting new features to make your experience even better. \n          Let's take a quick tour to show you what's new!</p>\n          <p><strong>This tour will take about 2 minutes.</strong></p>\n        `,\n        placement: 'center',\n        skipable: true,\n      },\n      {\n        id: 'analytics-widget',\n        target: '[data-testid=\"analytics-widget\"]',\n        title: 'Enhanced Analytics Widget',\n        content: `\n          <p>Your analytics widget now includes:</p>\n          <ul>\n            <li>\ud83d\udcca Real-time data updates</li>\n            <li>\ud83c\udfaf Custom date range selection</li>\n            <li>\ud83d\udcc8 Advanced filtering options</li>\n          </ul>\n          <p>Click on any chart to drill down into detailed metrics.</p>\n        `,\n        placement: 'bottom',\n        action: 'none',\n        beforeShow: async () => {\n          // Ensure the analytics widget is visible\n          const widget = document.querySelector('[data-testid=\"analytics-widget\"]');\n          if (widget) {\n            widget.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          }\n        },\n      },\n      {\n        id: 'quick-actions',\n        target: '[data-testid=\"quick-actions\"]',\n        title: 'New Quick Actions Bar',\n        content: `\n          <p>Save time with our new quick actions bar:</p>\n          <ul>\n            <li>\u26a1 Create new items instantly</li>\n            <li>\ud83d\udd0d Smart search with filters</li>\n            <li>\ud83d\udd04 Bulk operations</li>\n          </ul>\n          <p>Try clicking the \"+\" button to see all available actions.</p>\n        `,\n        placement: 'bottom',\n        action: 'click',\n        beforeShow: async () => {\n          // Highlight the quick actions area\n          const element = document.querySelector('[data-testid=\"quick-actions\"]');\n          if (element) {\n            element.classList.add('tour-pulse-animation');\n          }\n        },\n        afterShow: async () => {\n          // Remove pulse animation after a delay\n          setTimeout(() => {\n            const element = document.querySelector('[data-testid=\"quick-actions\"]');\n            if (element) {\n              element.classList.remove('tour-pulse-animation');\n            }\n          }, 2000);\n        },\n      },\n      {\n        id: 'notification-center',\n        target: '[data-testid=\"notification-bell\"]',\n        title: 'Improved Notification Center',\n        content: `\n          <p>Stay updated with our enhanced notification system:</p>\n          <ul>\n            <li>\ud83d\udd14 Smart notification grouping</li>\n            <li>\u2699\ufe0f Customizable notification preferences</li>\n            <li>\ud83d\udcf1 Mobile push notifications</li>\n          </ul>\n          <p>Click the bell icon to see your notifications and manage your preferences.</p>\n        `,\n        placement: 'left',\n        highlightPadding: 12,\n      },\n      {\n        id: 'user-menu',\n        target: '[data-testid=\"user-menu\"]',\n        title: 'Enhanced User Menu',\n        content: `\n          <p>We've reorganized your user menu for better accessibility:</p>\n          <ul>\n            <li>\ud83d\udc64 Quick profile editing</li>\n            <li>\ud83c\udfa8 Theme customization</li>\n            <li>\ud83d\udd10 Enhanced security settings</li>\n          </ul>\n          <p>Access your account settings and preferences from here.</p>\n        `,\n        placement: 'left',\n      },\n      {\n        id: 'completion',\n        target: 'body',\n        title: 'Tour Complete! \ud83c\udf8a',\n        content: `\n          <p>Congratulations! You've discovered all the new features.</p>\n          <p>Here are some helpful resources:</p>\n          <ul>\n            <li>\ud83d\udcda <a href=\"/help\" target=\"_blank\">Help Documentation</a></li>\n            <li>\ud83d\udcac <a href=\"/support\" target=\"_blank\">Contact Support</a></li>\n            <li>\ud83c\udfa5 <a href=\"/tutorials\" target=\"_blank\">Video Tutorials</a></li>\n          </ul>\n          <p><strong>Need to see this tour again?</strong><br>\n          Go to Help \u2192 Feature Tours in your user menu.</p>\n        `,\n        placement: 'center',\n        skipable: false,\n      },\n    ],\n  },\n  \n  {\n    id: 'new-user-onboarding',\n    name: 'Getting Started',\n    description: 'Complete setup and learn the basics',\n    priority: 20,\n    isActive: true,\n    triggerConditions: [\n      { type: 'user_segment', value: 'new_user' },\n      { type: 'page_visit_count', value: '1' }\n    ],\n    userSegments: ['new_user'],\n    steps: [\n      {\n        id: 'welcome-new-user',\n        target: 'body',\n        title: 'Welcome to Our Platform! \ud83d\udc4b',\n        content: `\n          <p>We're excited to have you on board! Let's get you set up for success.</p>\n          <p>This quick tour will help you:</p>\n          <ul>\n            <li>Complete your profile setup</li>\n            <li>Understand key features</li>\n            <li>Know where to find help</li>\n          </ul>\n        `,\n        placement: 'center',\n      },\n      // Additional onboarding steps...\n    ],\n  },\n];\n\n// Trigger conditions types\nexport interface TriggerCondition {\n  type: 'url_match' | 'element_exists' | 'user_segment' | 'feature_flag' | 'page_visit_count' | 'time_on_page';\n  value: string;\n  operator?: 'equals' | 'contains' | 'greater_than' | 'less_than';\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"tour-styles-and-animations",children:"Tour Styles and Animations"}),"\n",(0,o.jsx)(e.p,{children:"Add CSS for tour styling and animations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-css",children:"/* styles/tour.css */\n.tour-highlight {\n  position: relative;\n  z-index: 1001;\n  pointer-events: auto;\n}\n\n.tour-pulse-animation {\n  animation: tourPulse 2s infinite;\n}\n\n@keyframes tourPulse {\n  0% {\n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);\n  }\n}\n\n.tour-tooltip {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  color: #333;\n  line-height: 1.5;\n}\n\n.tour-tooltip__header {\n  border-bottom: 1px solid #e5e7eb;\n  padding-bottom: 16px;\n  margin-bottom: 16px;\n}\n\n.tour-tooltip__title {\n  margin: 0 0 12px 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #111827;\n}\n\n.tour-tooltip__progress {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.tour-tooltip__step-counter {\n  font-size: 14px;\n  color: #6b7280;\n  white-space: nowrap;\n}\n\n.tour-tooltip__progress-bar {\n  flex: 1;\n  height: 4px;\n  background-color: #e5e7eb;\n  border-radius: 2px;\n  overflow: hidden;\n}\n\n.tour-tooltip__progress-fill {\n  height: 100%;\n  background-color: #3b82f6;\n  transition: width 0.3s ease;\n}\n\n.tour-tooltip__content {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.6;\n}\n\n.tour-tooltip__content ul {\n  margin: 8px 0;\n  padding-left: 20px;\n}\n\n.tour-tooltip__content li {\n  margin-bottom: 4px;\n}\n\n.tour-tooltip__content a {\n  color: #3b82f6;\n  text-decoration: none;\n}\n\n.tour-tooltip__content a:hover {\n  text-decoration: underline;\n}\n\n.tour-tooltip__actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 12px;\n}\n\n.tour-tooltip__actions-left,\n.tour-tooltip__actions-right {\n  display: flex;\n  gap: 8px;\n}\n\n.tour-button {\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  border: none;\n  outline: none;\n}\n\n.tour-button:focus {\n  outline: 2px solid #3b82f6;\n  outline-offset: 2px;\n}\n\n.tour-button--primary {\n  background-color: #3b82f6;\n  color: white;\n}\n\n.tour-button--primary:hover {\n  background-color: #2563eb;\n}\n\n.tour-button--secondary {\n  background-color: #f3f4f6;\n  color: #374151;\n  border: 1px solid #d1d5db;\n}\n\n.tour-button--secondary:hover {\n  background-color: #e5e7eb;\n}\n\n/* Dark mode support */\n@media (prefers-color-scheme: dark) {\n  .tour-tooltip {\n    background-color: #1f2937;\n    color: #f9fafb;\n  }\n  \n  .tour-tooltip__title {\n    color: #f9fafb;\n  }\n  \n  .tour-tooltip__header {\n    border-color: #374151;\n  }\n  \n  .tour-button--secondary {\n    background-color: #374151;\n    color: #f9fafb;\n    border-color: #4b5563;\n  }\n  \n  .tour-button--secondary:hover {\n    background-color: #4b5563;\n  }\n}\n\n/* Responsive design */\n@media (max-width: 640px) {\n  .tour-tooltip {\n    max-width: calc(100vw - 32px);\n    min-width: calc(100vw - 32px);\n    padding: 16px;\n  }\n  \n  .tour-tooltip__actions {\n    flex-direction: column;\n  }\n  \n  .tour-tooltip__actions-left,\n  .tour-tooltip__actions-right {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n/* Accessibility improvements */\n.tour-overlay[role=\"dialog\"] {\n  outline: none;\n}\n\n.tour-button:focus-visible {\n  outline: 2px solid #3b82f6;\n  outline-offset: 2px;\n}\n\n/* Animation for tour entrance */\n.tour-tooltip {\n  animation: tourTooltipEnter 0.3s ease-out;\n}\n\n@keyframes tourTooltipEnter {\n  from {\n    opacity: 0;\n    transform: scale(0.95) translate(-50%, 10px);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1) translate(-50%, 0);\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"integration-with-your-app",children:"Integration with Your App"}),"\n",(0,o.jsx)(e.p,{children:"Here's how to integrate the tour system into your main application:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// App.tsx\nimport React from 'react';\nimport { TourProvider } from './contexts/TourContext';\nimport { TourOverlay } from './components/TourOverlay/TourOverlay';\nimport { useTourManager } from './hooks/useTourManager';\nimport { appTours } from './data/tours';\nimport './styles/tour.css';\n\nconst TourWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const tourManager = useTourManager({\n    tours: appTours,\n    autoStart: true,\n    debugMode: process.env.NODE_ENV === 'development',\n  });\n\n  const currentStep = tourManager.getCurrentStep();\n\n  return (\n    <>\n      {children}\n      \n      {/* Render tour overlay when active */}\n      {tourManager.tourState.isPlaying && currentStep && (\n        <TourOverlay\n          step={currentStep}\n          onNext={tourManager.nextStep}\n          onPrevious={tourManager.previousStep}\n          onSkip={tourManager.skipTour}\n          onComplete={tourManager.completeTour}\n          currentStepIndex={tourManager.tourState.currentStepIndex}\n          totalSteps={tourManager.tourState.currentTour?.steps.length || 0}\n          isFirstStep={tourManager.tourState.currentStepIndex === 0}\n          isLastStep={\n            tourManager.tourState.currentStepIndex === \n            (tourManager.tourState.currentTour?.steps.length || 0) - 1\n          }\n        />\n      )}\n      \n      {/* Debug panel for development */}\n      {process.env.NODE_ENV === 'development' && (\n        <TourDebugPanel tourManager={tourManager} />\n      )}\n    </>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <TourWrapper>\n      <YourAppContent />\n    </TourWrapper>\n  );\n};\n\nexport default App;\n"})}),"\n",(0,o.jsx)(e.h2,{id:"open-source-solutions",children:"Open Source Solutions"}),"\n",(0,o.jsx)(e.p,{children:"While building a custom tour system gives you complete control, there are excellent open source libraries that can accelerate development. Here are the most popular and well-maintained options:"}),"\n",(0,o.jsx)(e.h3,{id:"1-introjs---the-classic-choice",children:"1. Intro.js - The Classic Choice"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Intro.js"})," is one of the most popular and mature tour libraries with excellent browser support."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install intro.js\nnpm install @types/intro.js  # For TypeScript support\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Basic Implementation:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// components/IntroJsTour.tsx\nimport React, { useEffect } from 'react';\nimport { introJs } from 'intro.js';\nimport 'intro.js/introjs.css';\nimport 'intro.js/themes/introjs-modern.css'; // Optional theme\n\ninterface IntroTourProps {\n  steps: Array<{\n    element: string;\n    title: string;\n    intro: string;\n    position?: 'top' | 'bottom' | 'left' | 'right';\n  }>;\n  onComplete?: () => void;\n  onExit?: () => void;\n  autoStart?: boolean;\n}\n\nexport const IntroJsTour: React.FC<IntroTourProps> = ({\n  steps,\n  onComplete,\n  onExit,\n  autoStart = true,\n}) => {\n  useEffect(() => {\n    if (!autoStart) return;\n\n    // Add data attributes to elements\n    steps.forEach((step, index) => {\n      const element = document.querySelector(step.element);\n      if (element) {\n        element.setAttribute('data-intro', step.intro);\n        element.setAttribute('data-step', (index + 1).toString());\n        element.setAttribute('data-title', step.title);\n        if (step.position) {\n          element.setAttribute('data-position', step.position);\n        }\n      }\n    });\n\n    // Configure and start tour\n    const intro = introJs();\n    \n    intro.setOptions({\n      nextLabel: 'Next \u2192',\n      prevLabel: '\u2190 Previous',\n      skipLabel: 'Skip Tour',\n      doneLabel: 'Finish',\n      showProgress: true,\n      showBullets: false,\n      exitOnOverlayClick: false,\n      keyboardNavigation: true,\n      disableInteraction: false,\n    });\n\n    intro.oncomplete(() => {\n      onComplete?.();\n    });\n\n    intro.onexit(() => {\n      onExit?.();\n    });\n\n    intro.start();\n\n    return () => {\n      intro.exit();\n    };\n  }, [steps, onComplete, onExit, autoStart]);\n\n  return null; // This component doesn't render anything\n};\n\n// Usage example\nconst DashboardWithTour = () => {\n  const tourSteps = [\n    {\n      element: '[data-testid=\"analytics-widget\"]',\n      title: 'Enhanced Analytics',\n      intro: 'Your new analytics dashboard with real-time updates and advanced filtering.',\n      position: 'bottom' as const,\n    },\n    {\n      element: '[data-testid=\"quick-actions\"]',\n      title: 'Quick Actions',\n      intro: 'Access frequently used actions instantly from this new toolbar.',\n      position: 'bottom' as const,\n    },\n    {\n      element: '[data-testid=\"notification-bell\"]',\n      title: 'Smart Notifications',\n      intro: 'Get organized notifications with smart grouping and custom preferences.',\n      position: 'left' as const,\n    },\n  ];\n\n  const handleTourComplete = () => {\n    localStorage.setItem('dashboard-tour-completed', 'true');\n    console.log('Tour completed!');\n  };\n\n  return (\n    <div>\n      <IntroJsTour \n        steps={tourSteps}\n        onComplete={handleTourComplete}\n        autoStart={!localStorage.getItem('dashboard-tour-completed')}\n      />\n      {/* Your dashboard content */}\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Advanced Intro.js Configuration:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// utils/tourConfig.ts\nimport { introJs } from 'intro.js';\n\nexport const createAdvancedTour = (config: {\n  steps: any[];\n  onProgress?: (stepIndex: number) => void;\n  onBeforeChange?: (targetElement: Element) => void;\n}) => {\n  const intro = introJs();\n\n  intro.setOptions({\n    nextLabel: 'Next \u2192',\n    prevLabel: '\u2190 Previous',\n    skipLabel: 'Skip Tour',\n    doneLabel: 'Got it!',\n    showProgress: true,\n    progressBarAdditionalClass: 'custom-progress',\n    highlightClass: 'custom-highlight',\n    showBullets: false,\n    exitOnOverlayClick: false,\n    keyboardNavigation: true,\n    disableInteraction: false,\n    scrollToElement: true,\n    scrollPadding: 30,\n    overlayOpacity: 0.7,\n    tooltipClass: 'custom-tooltip',\n  });\n\n  // Progress tracking\n  intro.onbeforechange((targetElement) => {\n    config.onBeforeChange?.(targetElement);\n    \n    // Add custom animations\n    targetElement.classList.add('tour-highlight-pulse');\n    setTimeout(() => {\n      targetElement.classList.remove('tour-highlight-pulse');\n    }, 1000);\n  });\n\n  intro.onchange((targetElement) => {\n    const currentStep = intro._currentStep;\n    config.onProgress?.(currentStep);\n    \n    // Track analytics\n    if (typeof gtag !== 'undefined') {\n      gtag('event', 'tour_step_view', {\n        step_number: currentStep + 1,\n        step_element: targetElement.getAttribute('data-testid') || 'unknown',\n      });\n    }\n  });\n\n  return intro;\n};\n\n// Custom CSS for enhanced styling\nconst customTourStyles = `\n.custom-tooltip {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 12px;\n  box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.custom-progress {\n  background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);\n  height: 4px;\n}\n\n.custom-highlight {\n  box-shadow: 0 0 30px rgba(102, 126, 234, 0.6);\n  border-radius: 8px;\n}\n\n.tour-highlight-pulse {\n  animation: tourPulse 1s ease-in-out;\n}\n\n@keyframes tourPulse {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.05); }\n}\n`;\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-reactour---react-first-approach",children:"2. Reactour - React-First Approach"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Reactour"})," is specifically designed for React applications with hooks and modern patterns."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install @reactour/tour\nnpm install @reactour/mask\nnpm install @reactour/popover\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Implementation:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// components/ReactourTour.tsx\nimport React from 'react';\nimport { TourProvider, useTour } from '@reactour/tour';\nimport { Mask } from '@reactour/mask';\nimport { Popover, PopoverContent } from '@reactour/popover';\n\nconst TourContent: React.FC<{\n  currentStep: number;\n  steps: any[];\n  setCurrentStep: (step: number) => void;\n  setIsOpen: (isOpen: boolean) => void;\n}> = ({ currentStep, steps, setCurrentStep, setIsOpen }) => {\n  const isLastStep = currentStep === steps.length - 1;\n  const isFirstStep = currentStep === 0;\n\n  return (\n    <PopoverContent>\n      <div className=\"tour-content\">\n        <div className=\"tour-header\">\n          <h3>{steps[currentStep]?.title}</h3>\n          <span className=\"tour-progress\">\n            {currentStep + 1} of {steps.length}\n          </span>\n        </div>\n        \n        <div className=\"tour-body\">\n          {steps[currentStep]?.content}\n        </div>\n        \n        <div className=\"tour-actions\">\n          <button \n            onClick={() => setIsOpen(false)}\n            className=\"tour-btn tour-btn--secondary\"\n          >\n            Skip\n          </button>\n          \n          <div className=\"tour-navigation\">\n            {!isFirstStep && (\n              <button\n                onClick={() => setCurrentStep(currentStep - 1)}\n                className=\"tour-btn tour-btn--secondary\"\n              >\n                Previous\n              </button>\n            )}\n            \n            <button\n              onClick={() => {\n                if (isLastStep) {\n                  setIsOpen(false);\n                } else {\n                  setCurrentStep(currentStep + 1);\n                }\n              }}\n              className=\"tour-btn tour-btn--primary\"\n            >\n              {isLastStep ? 'Finish' : 'Next'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </PopoverContent>\n  );\n};\n\nexport const ReactourTourProvider: React.FC<{\n  children: React.ReactNode;\n  steps: Array<{\n    selector: string;\n    title: string;\n    content: React.ReactNode;\n    position?: [number, number];\n    action?: (elem: Element) => void;\n  }>;\n}> = ({ children, steps }) => {\n  return (\n    <TourProvider\n      steps={steps}\n      components={{\n        Mask: Mask,\n        Popover: ({ children, ...props }) => (\n          <Popover {...props}>\n            {children}\n          </Popover>\n        ),\n        Content: TourContent,\n      }}\n      styles={{\n        popover: (base) => ({\n          ...base,\n          '--reactour-accent': '#3b82f6',\n          borderRadius: 12,\n          backgroundColor: 'white',\n          boxShadow: '0 20px 40px rgba(0,0,0,0.15)',\n        }),\n        mask: (base) => ({\n          ...base,\n          color: 'rgba(0, 0, 0, 0.7)',\n        }),\n      }}\n      onClickMask={({ setIsOpen }) => setIsOpen(false)}\n      showCloseButton={false}\n      showNavigation={false}\n      showBadge={false}\n    >\n      {children}\n    </TourProvider>\n  );\n};\n\n// Hook for controlling tour\nexport const useTourControl = () => {\n  const { setIsOpen, currentStep, setCurrentStep, isOpen } = useTour();\n  \n  const startTour = () => {\n    setCurrentStep(0);\n    setIsOpen(true);\n  };\n  \n  const endTour = () => {\n    setIsOpen(false);\n  };\n  \n  return {\n    startTour,\n    endTour,\n    isActive: isOpen,\n    currentStep,\n  };\n};\n\n// Usage\nconst App = () => {\n  const tourSteps = [\n    {\n      selector: '[data-tour=\"welcome\"]',\n      title: 'Welcome! \ud83d\udc4b',\n      content: (\n        <div>\n          <p>Let's take a quick tour of the new features!</p>\n          <ul>\n            <li>Enhanced analytics</li>\n            <li>Quick actions</li>\n            <li>Smart notifications</li>\n          </ul>\n        </div>\n      ),\n    },\n    {\n      selector: '[data-tour=\"analytics\"]',\n      title: 'Analytics Dashboard',\n      content: (\n        <div>\n          <p>Your new analytics dashboard includes:</p>\n          <ul>\n            <li>\ud83d\udcca Real-time data</li>\n            <li>\ud83c\udfaf Custom filters</li>\n            <li>\ud83d\udcc8 Trend analysis</li>\n          </ul>\n        </div>\n      ),\n      action: (elem) => {\n        // Trigger any actions when this step is reached\n        elem.classList.add('highlight-pulse');\n      },\n    },\n  ];\n\n  return (\n    <ReactourTourProvider steps={tourSteps}>\n      <YourAppContent />\n    </ReactourTourProvider>\n  );\n};\n"})}),"\n",(0,o.jsx)(e.h3,{id:"3-shepherdjs---framework-agnostic",children:"3. Shepherd.js - Framework Agnostic"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Shepherd.js"})," works with any framework and provides excellent customization options."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install shepherd.js\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Implementation:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// utils/shepherdTour.ts\nimport Shepherd from 'shepherd.js';\nimport 'shepherd.js/dist/css/shepherd.css';\n\nexport class ShepherdTourManager {\n  private tour: Shepherd.Tour;\n  private onComplete?: () => void;\n\n  constructor(onComplete?: () => void) {\n    this.onComplete = onComplete;\n    this.tour = new Shepherd.Tour({\n      useModalOverlay: true,\n      defaultStepOptions: {\n        classes: 'shepherd-theme-custom',\n        scrollTo: true,\n        cancelIcon: {\n          enabled: true,\n        },\n        when: {\n          show: this.onStepShow.bind(this),\n          hide: this.onStepHide.bind(this),\n        },\n      },\n    });\n\n    this.tour.on('complete', () => {\n      this.onComplete?.();\n    });\n  }\n\n  private onStepShow() {\n    // Add custom behavior when step shows\n    const currentStep = this.tour.getCurrentStep();\n    if (currentStep) {\n      // Track analytics\n      this.trackStepView(currentStep.id || 'unknown');\n    }\n  }\n\n  private onStepHide() {\n    // Cleanup when step hides\n  }\n\n  private trackStepView(stepId: string) {\n    if (typeof gtag !== 'undefined') {\n      gtag('event', 'tour_step_view', {\n        step_id: stepId,\n        tour_name: 'dashboard_features',\n      });\n    }\n  }\n\n  addStep(step: {\n    id: string;\n    title: string;\n    text: string;\n    attachTo: {\n      element: string;\n      on: 'top' | 'bottom' | 'left' | 'right';\n    };\n    buttons?: Array<{\n      text: string;\n      action: () => void;\n      classes?: string;\n    }>;\n    beforeShowPromise?: () => Promise<void>;\n  }) {\n    this.tour.addStep({\n      id: step.id,\n      title: step.title,\n      text: step.text,\n      attachTo: step.attachTo,\n      buttons: step.buttons || [\n        {\n          text: 'Skip',\n          classes: 'shepherd-button-secondary',\n          action: () => this.tour.complete(),\n        },\n        {\n          text: 'Next',\n          classes: 'shepherd-button-primary',\n          action: () => this.tour.next(),\n        },\n      ],\n      beforeShowPromise: step.beforeShowPromise,\n    });\n  }\n\n  start() {\n    this.tour.start();\n  }\n\n  complete() {\n    this.tour.complete();\n  }\n}\n\n// React Hook wrapper\nimport { useEffect, useRef } from 'react';\n\nexport const useShepherdTour = (steps: any[], autoStart = false) => {\n  const tourRef = useRef<ShepherdTourManager | null>(null);\n\n  useEffect(() => {\n    tourRef.current = new ShepherdTourManager(() => {\n      localStorage.setItem('tour-completed', 'true');\n    });\n\n    // Add all steps\n    steps.forEach(step => {\n      tourRef.current!.addStep(step);\n    });\n\n    if (autoStart && !localStorage.getItem('tour-completed')) {\n      tourRef.current.start();\n    }\n\n    return () => {\n      if (tourRef.current) {\n        tourRef.current.complete();\n      }\n    };\n  }, [steps, autoStart]);\n\n  const startTour = () => {\n    tourRef.current?.start();\n  };\n\n  const completeTour = () => {\n    tourRef.current?.complete();\n  };\n\n  return { startTour, completeTour };\n};\n\n// Usage in React component\nconst DashboardWithShepherd = () => {\n  const tourSteps = [\n    {\n      id: 'welcome',\n      title: 'Welcome to the New Dashboard! \ud83c\udf89',\n      text: `\n        <p>We've added some exciting new features. Let's take a quick tour!</p>\n        <div class=\"tour-features\">\n          <span class=\"feature-badge\">\ud83d\udcca Enhanced Analytics</span>\n          <span class=\"feature-badge\">\u26a1 Quick Actions</span>\n          <span class=\"feature-badge\">\ud83d\udd14 Smart Notifications</span>\n        </div>\n      `,\n      attachTo: {\n        element: 'body',\n        on: 'top' as const,\n      },\n    },\n    {\n      id: 'analytics',\n      title: 'Enhanced Analytics Widget',\n      text: `\n        <p>Your analytics now include:</p>\n        <ul>\n          <li>\ud83d\udcca Real-time data updates</li>\n          <li>\ud83c\udfaf Custom date range selection</li>\n          <li>\ud83d\udcc8 Advanced filtering options</li>\n        </ul>\n        <p>Click any chart to drill down into detailed metrics.</p>\n      `,\n      attachTo: {\n        element: '[data-testid=\"analytics-widget\"]',\n        on: 'bottom' as const,\n      },\n      beforeShowPromise: () => {\n        return new Promise(resolve => {\n          // Ensure element is visible before showing step\n          const element = document.querySelector('[data-testid=\"analytics-widget\"]');\n          if (element) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            setTimeout(resolve, 500);\n          } else {\n            resolve();\n          }\n        });\n      },\n    },\n  ];\n\n  const { startTour } = useShepherdTour(tourSteps, true);\n\n  return (\n    <div>\n      <button onClick={startTour} className=\"start-tour-btn\">\n        Take a Tour\n      </button>\n      {/* Your dashboard content */}\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(e.h3,{id:"4-driverjs---lightweight-and-modern",children:"4. Driver.js - Lightweight and Modern"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Driver.js"})," is a lightweight, modern library with great performance."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install driver.js\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Implementation:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// utils/driverTour.ts\nimport { driver, DriveStep } from 'driver.js';\nimport 'driver.js/dist/driver.css';\n\nexport class DriverTourManager {\n  private driverObj: any;\n\n  constructor(config?: {\n    onHighlightStarted?: (element: Element, step: DriveStep) => void;\n    onHighlighted?: (element: Element, step: DriveStep) => void;\n    onDeselected?: (element: Element, step: DriveStep) => void;\n    onDestroyed?: () => void;\n  }) {\n    this.driverObj = driver({\n      showProgress: true,\n      showButtons: ['next', 'previous', 'close'],\n      steps: [], // Will be populated later\n      onHighlightStarted: config?.onHighlightStarted,\n      onHighlighted: config?.onHighlighted,\n      onDeselected: config?.onDeselected,\n      onDestroyed: config?.onDestroyed,\n    });\n  }\n\n  setSteps(steps: DriveStep[]) {\n    this.driverObj.setSteps(steps);\n  }\n\n  start() {\n    this.driverObj.drive();\n  }\n\n  destroy() {\n    this.driverObj.destroy();\n  }\n\n  highlight(element: string) {\n    this.driverObj.highlight({\n      element,\n      popover: {\n        title: 'Highlighted Feature',\n        description: 'This is an important feature to note.',\n      },\n    });\n  }\n}\n\n// React Hook\nexport const useDriverTour = () => {\n  const [tourManager] = useState(() => new DriverTourManager({\n    onDestroyed: () => {\n      localStorage.setItem('driver-tour-completed', 'true');\n    },\n    onHighlighted: (element, step) => {\n      // Add pulse animation\n      element.classList.add('driver-highlighted');\n      \n      // Track step view\n      if (typeof gtag !== 'undefined') {\n        gtag('event', 'tour_step_view', {\n          step_index: step.element,\n          tour_type: 'driver_js',\n        });\n      }\n    },\n    onDeselected: (element) => {\n      element.classList.remove('driver-highlighted');\n    },\n  }));\n\n  const startTour = (steps: DriveStep[]) => {\n    tourManager.setSteps(steps);\n    tourManager.start();\n  };\n\n  const highlightElement = (element: string) => {\n    tourManager.highlight(element);\n  };\n\n  return { startTour, highlightElement, destroy: () => tourManager.destroy() };\n};\n\n// Component usage\nconst FeatureTour = () => {\n  const { startTour } = useDriverTour();\n\n  const tourSteps: DriveStep[] = [\n    {\n      element: 'body',\n      popover: {\n        title: 'Welcome to the Enhanced Dashboard! \ud83d\ude80',\n        description: `\n          <div class=\"tour-welcome\">\n            <p>Discover our latest features that will boost your productivity:</p>\n            <div class=\"feature-grid\">\n              <div class=\"feature-item\">\n                <span class=\"feature-icon\">\ud83d\udcca</span>\n                <span>Real-time Analytics</span>\n              </div>\n              <div class=\"feature-item\">\n                <span class=\"feature-icon\">\u26a1</span>\n                <span>Quick Actions</span>\n              </div>\n              <div class=\"feature-item\">\n                <span class=\"feature-icon\">\ud83d\udd14</span>\n                <span>Smart Notifications</span>\n              </div>\n            </div>\n          </div>\n        `,\n        side: 'bottom',\n        align: 'center',\n      },\n    },\n    {\n      element: '[data-testid=\"analytics-widget\"]',\n      popover: {\n        title: '\ud83d\udcca Enhanced Analytics',\n        description: `\n          <p>Your analytics dashboard now features:</p>\n          <ul class=\"feature-list\">\n            <li>\u2728 Real-time data streaming</li>\n            <li>\ud83c\udfaf Advanced filtering and segmentation</li>\n            <li>\ud83d\udcc8 Predictive trend analysis</li>\n            <li>\ud83d\udcca Custom dashboard creation</li>\n          </ul>\n          <div class=\"tour-tip\">\n            \ud83d\udca1 <strong>Pro tip:</strong> Click any chart to drill down into detailed metrics!\n          </div>\n        `,\n        side: 'bottom',\n        align: 'start',\n      },\n    },\n    {\n      element: '[data-testid=\"quick-actions\"]',\n      popover: {\n        title: '\u26a1 Quick Actions Toolbar',\n        description: `\n          <p>Save time with instant access to common tasks:</p>\n          <div class=\"action-showcase\">\n            <div class=\"action-item\">\n              <span class=\"action-icon\">\u2795</span>\n              <span>Create new items</span>\n            </div>\n            <div class=\"action-item\">\n              <span class=\"action-icon\">\ud83d\udd0d</span>\n              <span>Smart search & filter</span>\n            </div>\n            <div class=\"action-item\">\n              <span class=\"action-icon\">\ud83d\udd04</span>\n              <span>Bulk operations</span>\n            </div>\n          </div>\n        `,\n        side: 'bottom',\n        align: 'center',\n      },\n    },\n  ];\n\n  useEffect(() => {\n    // Auto-start tour for new users\n    const hasSeenTour = localStorage.getItem('driver-tour-completed');\n    if (!hasSeenTour) {\n      setTimeout(() => startTour(tourSteps), 1000);\n    }\n  }, []);\n\n  return (\n    <button \n      onClick={() => startTour(tourSteps)}\n      className=\"tour-trigger-btn\"\n    >\n      \ud83c\udfaf Take Feature Tour\n    </button>\n  );\n};\n"})}),"\n",(0,o.jsx)(e.h3,{id:"library-comparison-and-recommendations",children:"Library Comparison and Recommendations"}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Library"}),(0,o.jsx)(e.th,{children:"Bundle Size"}),(0,o.jsx)(e.th,{children:"React Integration"}),(0,o.jsx)(e.th,{children:"Customization"}),(0,o.jsx)(e.th,{children:"TypeScript"}),(0,o.jsx)(e.th,{children:"Best For"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.strong,{children:"Intro.js"})}),(0,o.jsx)(e.td,{children:"~20KB"}),(0,o.jsx)(e.td,{children:"Good"}),(0,o.jsx)(e.td,{children:"High"}),(0,o.jsx)(e.td,{children:"Partial"}),(0,o.jsx)(e.td,{children:"Traditional web apps, maximum browser support"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.strong,{children:"Reactour"})}),(0,o.jsx)(e.td,{children:"~15KB"}),(0,o.jsx)(e.td,{children:"Excellent"}),(0,o.jsx)(e.td,{children:"High"}),(0,o.jsx)(e.td,{children:"Excellent"}),(0,o.jsx)(e.td,{children:"React-first projects, modern styling"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.strong,{children:"Shepherd.js"})}),(0,o.jsx)(e.td,{children:"~25KB"}),(0,o.jsx)(e.td,{children:"Good"}),(0,o.jsx)(e.td,{children:"Very High"}),(0,o.jsx)(e.td,{children:"Good"}),(0,o.jsx)(e.td,{children:"Complex tours, framework agnostic"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:(0,o.jsx)(e.strong,{children:"Driver.js"})}),(0,o.jsx)(e.td,{children:"~12KB"}),(0,o.jsx)(e.td,{children:"Good"}),(0,o.jsx)(e.td,{children:"Medium"}),(0,o.jsx)(e.td,{children:"Good"}),(0,o.jsx)(e.td,{children:"Lightweight tours, performance-critical apps"})]})]})]}),"\n",(0,o.jsx)(e.h3,{id:"choosing-the-right-library",children:"Choosing the Right Library"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use Intro.js when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"You need maximum browser compatibility"}),"\n",(0,o.jsx)(e.li,{children:"Working with legacy codebases"}),"\n",(0,o.jsx)(e.li,{children:"Want extensive documentation and community support"}),"\n",(0,o.jsx)(e.li,{children:"Need proven stability in production"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use Reactour when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Building React applications"}),"\n",(0,o.jsx)(e.li,{children:"Want modern hooks-based API"}),"\n",(0,o.jsx)(e.li,{children:"Need excellent TypeScript support"}),"\n",(0,o.jsx)(e.li,{children:"Prefer component-based architecture"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use Shepherd.js when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Need maximum customization flexibility"}),"\n",(0,o.jsx)(e.li,{children:"Building complex, multi-step workflows"}),"\n",(0,o.jsx)(e.li,{children:"Working with multiple frameworks"}),"\n",(0,o.jsx)(e.li,{children:"Want advanced tour features (branching, conditionals)"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use Driver.js when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Bundle size is critical"}),"\n",(0,o.jsx)(e.li,{children:"Need simple, straightforward tours"}),"\n",(0,o.jsx)(e.li,{children:"Want modern, clean API"}),"\n",(0,o.jsx)(e.li,{children:"Performance is a priority"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"hybrid-approach-combining-libraries",children:"Hybrid Approach: Combining Libraries"}),"\n",(0,o.jsx)(e.p,{children:"You can also combine libraries for different use cases:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// tourStrategy.ts\nimport { TourLibrary, TourStep } from './types';\n\nexport class TourStrategy {\n  private getOptimalLibrary(steps: TourStep[], context: any): TourLibrary {\n    // Use lightweight library for simple tours\n    if (steps.length <= 3 && !context.needsCustomization) {\n      return 'driver';\n    }\n    \n    // Use React-specific library for component-heavy tours\n    if (context.isReactApp && steps.some(s => s.hasReactContent)) {\n      return 'reactour';\n    }\n    \n    // Use Shepherd for complex business workflows\n    if (steps.length > 8 || context.needsBranching) {\n      return 'shepherd';\n    }\n    \n    // Default to Intro.js for compatibility\n    return 'introjs';\n  }\n\n  async createTour(steps: TourStep[], context: any) {\n    const library = this.getOptimalLibrary(steps, context);\n    \n    switch (library) {\n      case 'driver':\n        const { DriverTourManager } = await import('./drivers/driverTour');\n        return new DriverTourManager();\n      \n      case 'reactour':\n        const { ReactourManager } = await import('./drivers/reactourTour');\n        return new ReactourManager();\n      \n      case 'shepherd':\n        const { ShepherdTourManager } = await import('./drivers/shepherdTour');\n        return new ShepherdTourManager();\n      \n      default:\n        const { IntroJsManager } = await import('./drivers/introJsTour');\n        return new IntroJsManager();\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"quick-start-templates",children:"Quick Start Templates"}),"\n",(0,o.jsx)(e.p,{children:"Here are ready-to-use templates for each library:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Intro.js Quick Start:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install\nnpm install intro.js @types/intro.js\n\n# Add to your component\nimport { introJs } from 'intro.js';\nimport 'intro.js/introjs.css';\n\n// Initialize tour\nconst startTour = () => {\n  introJs().setOptions({\n    steps: [\n      {\n        element: '#step1',\n        intro: 'This is your first feature!',\n        title: 'Welcome'\n      }\n    ]\n  }).start();\n};\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Reactour Quick Start:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install\nnpm install @reactour/tour @reactour/mask @reactour/popover\n\n# Wrap your app\nimport { TourProvider } from '@reactour/tour';\n\nconst steps = [\n  { selector: '#step1', content: 'Welcome to our app!' }\n];\n\n<TourProvider steps={steps}>\n  <App />\n</TourProvider>\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Shepherd.js Quick Start:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install\nnpm install shepherd.js\n\n# Create tour\nimport Shepherd from 'shepherd.js';\n\nconst tour = new Shepherd.Tour({\n  defaultStepOptions: { scrollTo: true }\n});\n\ntour.addStep({\n  title: 'Welcome!',\n  text: 'This is your first step',\n  attachTo: { element: '#step1', on: 'bottom' }\n});\n\ntour.start();\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Driver.js Quick Start:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install\nnpm install driver.js\n\n# Create tour\nimport { driver } from 'driver.js';\n\nconst driverObj = driver({\n  steps: [\n    { element: '#step1', popover: { title: 'Title', description: 'Description' } }\n  ]\n});\n\ndriverObj.drive();\n"})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,o.jsx)(e.h3,{id:"analytics-integration",children:"Analytics Integration"}),"\n",(0,o.jsx)(e.p,{children:"Track tour performance and user engagement:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// utils/tourAnalytics.ts\ninterface TourAnalyticsEvent {\n  tourId: string;\n  stepId: string;\n  action: 'start' | 'next' | 'previous' | 'skip' | 'complete';\n  timestamp: number;\n  userSegment?: string;\n}\n\nexport class TourAnalytics {\n  private events: TourAnalyticsEvent[] = [];\n\n  trackEvent(event: Omit<TourAnalyticsEvent, 'timestamp'>) {\n    const fullEvent: TourAnalyticsEvent = {\n      ...event,\n      timestamp: Date.now(),\n    };\n    \n    this.events.push(fullEvent);\n    \n    // Send to your analytics service\n    this.sendToAnalytics(fullEvent);\n  }\n\n  private sendToAnalytics(event: TourAnalyticsEvent) {\n    // Integration with your analytics platform\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', 'tour_interaction', {\n        tour_id: event.tourId,\n        step_id: event.stepId,\n        action: event.action,\n        user_segment: event.userSegment,\n      });\n    }\n    \n    // Or send to your custom analytics endpoint\n    fetch('/api/analytics/tour-events', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(event),\n    }).catch(console.error);\n  }\n\n  getTourMetrics(tourId: string) {\n    const tourEvents = this.events.filter(e => e.tourId === tourId);\n    const startEvents = tourEvents.filter(e => e.action === 'start');\n    const completeEvents = tourEvents.filter(e => e.action === 'complete');\n    const skipEvents = tourEvents.filter(e => e.action === 'skip');\n    \n    return {\n      starts: startEvents.length,\n      completions: completeEvents.length,\n      skips: skipEvents.length,\n      completionRate: startEvents.length > 0 ? completeEvents.length / startEvents.length : 0,\n      skipRate: startEvents.length > 0 ? skipEvents.length / startEvents.length : 0,\n    };\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"ab-testing-support",children:"A/B Testing Support"}),"\n",(0,o.jsx)(e.p,{children:"Test different tour variations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// utils/tourVariants.ts\ninterface TourVariant {\n  id: string;\n  name: string;\n  tour: Tour;\n  weight: number; // Percentage allocation\n}\n\nexport class TourVariantManager {\n  private variants: Map<string, TourVariant[]> = new Map();\n\n  addVariant(baseTrackId: string, variant: TourVariant) {\n    if (!this.variants.has(baseTrackId)) {\n      this.variants.set(baseTrackId, []);\n    }\n    this.variants.get(baseTrackId)!.push(variant);\n  }\n\n  getVariantForUser(baseTrackId: string, userId: string): Tour | null {\n    const variants = this.variants.get(baseTrackId);\n    if (!variants || variants.length === 0) return null;\n\n    // Use consistent hash of user ID for stable variant assignment\n    const hash = this.hashString(userId + baseTrackId);\n    const totalWeight = variants.reduce((sum, v) => sum + v.weight, 0);\n    const target = (hash % 100) / 100 * totalWeight;\n    \n    let cumulative = 0;\n    for (const variant of variants) {\n      cumulative += variant.weight;\n      if (target <= cumulative) {\n        return variant.tour;\n      }\n    }\n    \n    return variants[0].tour; // Fallback\n  }\n\n  private hashString(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices-and-tips",children:"Best Practices and Tips"}),"\n",(0,o.jsxs)(e.h3,{id:"-content-guidelines",children:["\ud83c\udfaf ",(0,o.jsx)(e.strong,{children:"Content Guidelines"})]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Keep it concise"}),": Limit steps to 5-7 for optimal engagement"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use progressive disclosure"}),": Start with overview, then dive into specifics"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Include visuals"}),": Use emojis and bullet points for better readability"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Provide context"}),': Explain the "why" behind features, not just the "how"']}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"-technical-considerations",children:["\ud83d\udd27 ",(0,o.jsx)(e.strong,{children:"Technical Considerations"})]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance"}),": Use lazy loading for tour components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Accessibility"}),": Ensure keyboard navigation and screen reader compatibility"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Mobile responsiveness"}),": Test tours on different screen sizes"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Error handling"}),": Gracefully handle missing target elements"]}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"-measurement-and-optimization",children:["\ud83d\udcca ",(0,o.jsx)(e.strong,{children:"Measurement and Optimization"})]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Track completion rates"}),": Monitor which steps cause dropoffs"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Gather feedback"}),": Add optional feedback collection at tour end"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"A/B testing"}),": Test different content and flows"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Timing"}),": Experiment with when tours are triggered"]}),"\n"]}),"\n",(0,o.jsxs)(e.h3,{id:"-design-principles",children:["\ud83c\udfa8 ",(0,o.jsx)(e.strong,{children:"Design Principles"})]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Non-intrusive"}),": Allow users to continue working while touring"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Contextual"}),": Show tours when users encounter relevant features"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Skippable"}),": Always provide an easy exit option"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Memorable"}),": Use consistent styling that matches your brand"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"Interactive tour guides are powerful tools for improving user onboarding and feature adoption. By implementing a flexible, well-designed tour system, you can:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Reduce time to value"})," for new users"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Increase feature adoption"})," for existing users"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Decrease support burden"})," through proactive guidance"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Improve user satisfaction"})," with contextual help"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"The tour system we've built provides a solid foundation that can be extended with additional features like:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Multi-step forms guidance"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Video integration"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Branching tour paths"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Personalized content based on user behavior"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Integration with help desk systems"})}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Remember to continuously gather user feedback and iterate on your tour content and timing. The best tours feel helpful rather than intrusive, and they evolve based on real user needs and behaviors."}),"\n",(0,o.jsx)(e.p,{children:"Start with simple tours for your most important features, measure their effectiveness, and gradually expand your tour system as you learn what works best for your users and application."}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"Want to learn more about user experience optimization? This guide provides a solid foundation for building interactive user experiences that enhance feature discovery and adoption."})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},6635:n=>{n.exports=JSON.parse('{"permalink":"/fullstack-dev/blog/building-interactive-tour-guide","editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/blog/2025-10-05-interactive-tour-guide.md","source":"@site/blog/2025-10-05-interactive-tour-guide.md","title":"Building an Interactive Tour Guide for New Features - Full-Stack Developer Guide","description":"Creating an effective interactive tour guide is crucial for helping users discover and adopt new features in your application. A well-designed tour can significantly improve user onboarding, feature adoption rates, and overall user satisfaction. In this comprehensive guide, we\'ll explore how to build a flexible, accessible, and engaging tour system that can highlight new features and guide users through complex workflows.","date":"2025-10-05T00:00:00.000Z","tags":[{"inline":false,"label":"User Experience","permalink":"/fullstack-dev/blog/tags/user-experience","description":"UX design and user interaction patterns"},{"inline":false,"label":"React","permalink":"/fullstack-dev/blog/tags/react","description":"React framework and component development"},{"inline":false,"label":"TypeScript","permalink":"/fullstack-dev/blog/tags/typescript","description":"TypeScript language and type safety"},{"inline":false,"label":"Onboarding","permalink":"/fullstack-dev/blog/tags/onboarding","description":"User onboarding and introduction flows"},{"inline":false,"label":"Feature Discovery","permalink":"/fullstack-dev/blog/tags/feature-discovery","description":"Feature introduction and discovery techniques"},{"inline":false,"label":"Full Stack","permalink":"/fullstack-dev/blog/tags/full-stack","description":"Full stack development practices"}],"readingTime":27.63,"hasTruncateMarker":true,"authors":[{"name":"Tam Nguyen","title":"Full Stack Developer, Next.js for Production Creator","url":"https://github.com/tamnk74","page":{"permalink":"/fullstack-dev/blog/authors/tam"},"socials":{"github":"https://github.com/tamnk74"},"imageURL":"https://github.com/tamnk74.png","key":"tam"}],"frontMatter":{"slug":"building-interactive-tour-guide","title":"Building an Interactive Tour Guide for New Features - Full-Stack Developer Guide","authors":["tam"],"tags":["user-experience","react","typescript","onboarding","feature-discovery","full-stack"],"date":"2025-10-05T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"The Art of Prompt Engineering: How to Create Effective Prompts for AI","permalink":"/fullstack-dev/blog/how-to-create-good-prompts"},"nextItem":{"title":"Handling Rate Limiting in NestJS for Production Microservices","permalink":"/fullstack-dev/blog/nestjs-rate-limiting-microservices"}}')},7814:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>a});var r=t(9729);const o={},i=r.createContext(o);function s(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);