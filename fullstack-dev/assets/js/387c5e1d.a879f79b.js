"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[2857],{2630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"security-practices/security-implementation/security-testing","title":"Security Testing Implementation Guide","description":"This guide provides comprehensive security testing implementation for NestJS/Next.js applications on GCP Kubernetes, covering automated vulnerability scanning, security regression testing, and continuous security monitoring.","source":"@site/docs/security-practices/security-implementation/security-testing.md","sourceDirName":"security-practices/security-implementation","slug":"/security-practices/security-implementation/security-testing","permalink":"/fullstack-dev/docs/security-practices/security-implementation/security-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/security-practices/security-implementation/security-testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Code Review & Solution Design Security Guide","permalink":"/fullstack-dev/docs/security-practices/security-implementation/code-review-security"},"next":{"title":"Dynamic Application Security Testing (DAST) with OWASP ZAP and GitHub Actions","permalink":"/fullstack-dev/docs/security-practices/dast-owasp-zap-github-actions"}}');var r=t(5813),s=t(7814);const o={},c="Security Testing Implementation Guide",a={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Vulnerability Scanning",id:"vulnerability-scanning",level:2},{value:"OWASP ZAP Integration",id:"owasp-zap-integration",level:3},{value:"Google Cloud Security Scanner Integration",id:"google-cloud-security-scanner-integration",level:3},{value:"Security Regression Testing",id:"security-regression-testing",level:2},{value:"NestJS Security Test Suite",id:"nestjs-security-test-suite",level:3},{value:"End-to-End Security Tests with Cypress",id:"end-to-end-security-tests-with-cypress",level:3},{value:"Continuous Security Testing",id:"continuous-security-testing",level:2},{value:"Cloud Build Security Pipeline",id:"cloud-build-security-pipeline",level:3},{value:"GitHub Actions Security Workflow",id:"github-actions-security-workflow",level:3},{value:"OWASP Security Testing",id:"owasp-security-testing",level:2},{value:"Security Testing Utilities",id:"security-testing-utilities",level:3},{value:"Container Security Scanning",id:"container-security-scanning",level:2},{value:"Dockerfile Security Best Practices",id:"dockerfile-security-best-practices",level:3},{value:"Container Security Scanning Script",id:"container-security-scanning-script",level:3},{value:"Deployment &amp; CI/CD Integration",id:"deployment--cicd-integration",level:2},{value:"Kubernetes Security Policies",id:"kubernetes-security-policies",level:3},{value:"Security Monitoring Dashboard",id:"security-monitoring-dashboard",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"security-testing-implementation-guide",children:"Security Testing Implementation Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides comprehensive security testing implementation for NestJS/Next.js applications on GCP Kubernetes, covering automated vulnerability scanning, security regression testing, and continuous security monitoring."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#vulnerability-scanning",children:"Vulnerability Scanning"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#security-regression-testing",children:"Security Regression Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#continuous-security-testing",children:"Continuous Security Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#owasp-security-testing",children:"OWASP Security Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#container-security-scanning",children:"Container Security Scanning"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#deployment--cicd-integration",children:"Deployment & CI/CD Integration"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"vulnerability-scanning",children:"Vulnerability Scanning"}),"\n",(0,r.jsx)(n.h3,{id:"owasp-zap-integration",children:"OWASP ZAP Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// scripts/security-scan.ts\nimport { execSync } from 'child_process';\nimport * as fs from 'fs';\n\ninterface SecurityScanResult {\n  alerts: Array<{\n    alert: string;\n    risk: 'High' | 'Medium' | 'Low' | 'Informational';\n    confidence: string;\n    url: string;\n    description: string;\n  }>;\n}\n\nexport class SecurityScanner {\n  private readonly zapApiKey: string;\n  private readonly targetUrl: string;\n\n  constructor(zapApiKey: string, targetUrl: string) {\n    this.zapApiKey = zapApiKey;\n    this.targetUrl = targetUrl;\n  }\n\n  async runBaselineScan(): Promise<SecurityScanResult> {\n    const command = `\n      docker run -t owasp/zap2docker-stable zap-baseline.py \\\n        -t ${this.targetUrl} \\\n        -f json \\\n        -J zap-report.json\n    `;\n\n    try {\n      execSync(command, { stdio: 'inherit' });\n      const report = JSON.parse(fs.readFileSync('zap-report.json', 'utf8'));\n      return this.parseZapReport(report);\n    } catch (error) {\n      console.error('Security scan failed:', error);\n      throw error;\n    }\n  }\n\n  async runFullScan(): Promise<SecurityScanResult> {\n    const command = `\n      docker run -t owasp/zap2docker-stable zap-full-scan.py \\\n        -t ${this.targetUrl} \\\n        -f json \\\n        -J zap-full-report.json\n    `;\n\n    try {\n      execSync(command, { stdio: 'inherit' });\n      const report = JSON.parse(fs.readFileSync('zap-full-report.json', 'utf8'));\n      return this.parseZapReport(report);\n    } catch (error) {\n      console.error('Full security scan failed:', error);\n      throw error;\n    }\n  }\n\n  private parseZapReport(report: any): SecurityScanResult {\n    return {\n      alerts: report.site?.[0]?.alerts?.map((alert: any) => ({\n        alert: alert.name,\n        risk: alert.riskdesc.split(' ')[0],\n        confidence: alert.confidence,\n        url: alert.url,\n        description: alert.desc\n      })) || []\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"google-cloud-security-scanner-integration",children:"Google Cloud Security Scanner Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/security/cloud-security-scanner.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { SecurityScanner } from '@google-cloud/security-center';\n\n@Injectable()\nexport class CloudSecurityScannerService {\n  private readonly logger = new Logger(CloudSecurityScannerService.name);\n  private readonly scanner: SecurityScanner;\n\n  constructor(private configService: ConfigService) {\n    this.scanner = new SecurityScanner({\n      projectId: this.configService.get('GCP_PROJECT_ID'),\n    });\n  }\n\n  async scanWebApplication(targetUrl: string): Promise<any> {\n    try {\n      const [operation] = await this.scanner.createScanConfig({\n        parent: `projects/${this.configService.get('GCP_PROJECT_ID')}`,\n        scanConfig: {\n          displayName: 'Automated Security Scan',\n          startingUrls: [targetUrl],\n          targetPlatforms: ['APP_ENGINE', 'COMPUTE'],\n          userAgent: 'CHROME_LINUX',\n          maxQps: 5,\n          authentication: {\n            customAccount: {\n              username: this.configService.get('SCAN_USERNAME'),\n              password: this.configService.get('SCAN_PASSWORD'),\n            },\n          },\n        },\n      });\n\n      this.logger.log(`Security scan started: ${operation.name}`);\n      return operation;\n    } catch (error) {\n      this.logger.error('Failed to start security scan:', error);\n      throw error;\n    }\n  }\n\n  async getScanResults(scanName: string): Promise<any> {\n    try {\n      const [findings] = await this.scanner.listFindings({\n        parent: scanName,\n      });\n\n      return findings.map(finding => ({\n        name: finding.name,\n        severity: finding.severity,\n        category: finding.findingClass,\n        description: finding.description,\n        url: finding.httpMethod,\n        reproductionUrl: finding.reproductionUrl,\n      }));\n    } catch (error) {\n      this.logger.error('Failed to get scan results:', error);\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-regression-testing",children:"Security Regression Testing"}),"\n",(0,r.jsx)(n.h3,{id:"nestjs-security-test-suite",children:"NestJS Security Test Suite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// test/security/auth.security.spec.ts\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { JwtService } from '@nestjs/jwt';\n\ndescribe('Authentication Security Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    await app.init();\n  });\n\n  describe('JWT Security', () => {\n    it('should reject invalid JWT tokens', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/protected-route')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n\n      expect(response.body.message).toContain('Unauthorized');\n    });\n\n    it('should reject expired JWT tokens', async () => {\n      const expiredToken = jwtService.sign(\n        { sub: 'test-user' },\n        { expiresIn: '-1h' }\n      );\n\n      await request(app.getHttpServer())\n        .get('/protected-route')\n        .set('Authorization', `Bearer ${expiredToken}`)\n        .expect(401);\n    });\n\n    it('should reject tokens with invalid signature', async () => {\n      const token = jwtService.sign({ sub: 'test-user' });\n      const tamperedToken = token.slice(0, -5) + 'xxxxx';\n\n      await request(app.getHttpServer())\n        .get('/protected-route')\n        .set('Authorization', `Bearer ${tamperedToken}`)\n        .expect(401);\n    });\n  });\n\n  describe('SQL Injection Protection', () => {\n    it('should prevent SQL injection in login endpoint', async () => {\n      const maliciousPayload = {\n        username: \"admin' OR '1'='1\",\n        password: \"password' OR '1'='1\",\n      };\n\n      await request(app.getHttpServer())\n        .post('/auth/login')\n        .send(maliciousPayload)\n        .expect(401);\n    });\n\n    it('should sanitize query parameters', async () => {\n      const maliciousQuery = \"1'; DROP TABLE users; --\";\n\n      await request(app.getHttpServer())\n        .get(`/users/${maliciousQuery}`)\n        .expect(400);\n    });\n  });\n\n  describe('XSS Protection', () => {\n    it('should sanitize HTML input', async () => {\n      const xssPayload = {\n        name: '<script>alert(\"XSS\")<\/script>',\n        email: 'test@example.com',\n      };\n\n      const response = await request(app.getHttpServer())\n        .post('/users')\n        .send(xssPayload)\n        .expect(400);\n\n      expect(response.body.message).toContain('validation failed');\n    });\n\n    it('should set proper security headers', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/')\n        .expect(200);\n\n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n      expect(response.headers['x-frame-options']).toBe('DENY');\n      expect(response.headers['x-xss-protection']).toBe('1; mode=block');\n    });\n  });\n\n  describe('CSRF Protection', () => {\n    it('should require CSRF token for state-changing operations', async () => {\n      await request(app.getHttpServer())\n        .post('/users')\n        .send({ name: 'Test User' })\n        .expect(403);\n    });\n\n    it('should accept valid CSRF tokens', async () => {\n      // First get CSRF token\n      const tokenResponse = await request(app.getHttpServer())\n        .get('/csrf-token')\n        .expect(200);\n\n      const csrfToken = tokenResponse.body.token;\n\n      await request(app.getHttpServer())\n        .post('/users')\n        .set('X-CSRF-Token', csrfToken)\n        .send({ name: 'Test User' })\n        .expect(201);\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"end-to-end-security-tests-with-cypress",children:"End-to-End Security Tests with Cypress"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// cypress/e2e/security.cy.ts\ndescribe('Application Security Tests', () => {\n  beforeEach(() => {\n    cy.visit('/');\n  });\n\n  describe('Authentication Flow Security', () => {\n    it('should redirect to login when accessing protected routes', () => {\n      cy.visit('/dashboard');\n      cy.url().should('include', '/login');\n    });\n\n    it('should prevent brute force attacks', () => {\n      const attemptLogin = () => {\n        cy.get('[data-cy=username]').type('admin');\n        cy.get('[data-cy=password]').type('wrongpassword');\n        cy.get('[data-cy=login-button]').click();\n      };\n\n      // Attempt multiple failed logins\n      for (let i = 0; i < 5; i++) {\n        attemptLogin();\n      }\n\n      // Should be rate limited\n      cy.get('[data-cy=error-message]')\n        .should('contain', 'Too many attempts');\n    });\n\n    it('should secure session management', () => {\n      cy.login('testuser@example.com', 'password123');\n      \n      // Check session cookie is HttpOnly and Secure\n      cy.getCookie('session').should('have.property', 'httpOnly', true);\n      cy.getCookie('session').should('have.property', 'secure', true);\n      \n      // Check automatic logout after inactivity\n      cy.wait(300000); // 5 minutes\n      cy.visit('/dashboard');\n      cy.url().should('include', '/login');\n    });\n  });\n\n  describe('Input Validation Security', () => {\n    it('should prevent XSS in user inputs', () => {\n      cy.login('testuser@example.com', 'password123');\n      cy.visit('/profile');\n\n      const xssPayload = '<script>alert(\"XSS\")<\/script>';\n      \n      cy.get('[data-cy=name-input]').type(xssPayload);\n      cy.get('[data-cy=save-button]').click();\n\n      // Should show validation error, not execute script\n      cy.get('[data-cy=error-message]')\n        .should('contain', 'Invalid characters');\n      \n      // Verify script didn't execute\n      cy.window().its('alert').should('not.exist');\n    });\n\n    it('should validate file uploads', () => {\n      cy.login('testuser@example.com', 'password123');\n      cy.visit('/profile');\n\n      // Try uploading executable file\n      const fileName = 'malicious.exe';\n      cy.get('[data-cy=file-input]').selectFile({\n        contents: 'MZ', // PE header\n        fileName,\n        mimeType: 'application/octet-stream',\n      });\n\n      cy.get('[data-cy=upload-button]').click();\n      cy.get('[data-cy=error-message]')\n        .should('contain', 'File type not allowed');\n    });\n  });\n\n  describe('Authorization Security', () => {\n    it('should enforce role-based access control', () => {\n      cy.login('user@example.com', 'password123'); // Regular user\n      \n      // Try accessing admin endpoint\n      cy.request({\n        method: 'GET',\n        url: '/api/admin/users',\n        failOnStatusCode: false,\n      }).then((response) => {\n        expect(response.status).to.eq(403);\n      });\n    });\n\n    it('should prevent privilege escalation', () => {\n      cy.login('user@example.com', 'password123');\n      \n      // Try modifying user role\n      cy.request({\n        method: 'PATCH',\n        url: '/api/users/profile',\n        body: { role: 'admin' },\n        failOnStatusCode: false,\n      }).then((response) => {\n        expect(response.status).to.eq(400);\n      });\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"continuous-security-testing",children:"Continuous Security Testing"}),"\n",(0,r.jsx)(n.h3,{id:"cloud-build-security-pipeline",children:"Cloud Build Security Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# cloudbuild-security.yaml\nsteps:\n  # Security linting\n  - name: 'node:18'\n    entrypoint: 'npm'\n    args: ['run', 'security:lint']\n    \n  # Dependency vulnerability scan\n  - name: 'node:18'\n    entrypoint: 'npm'\n    args: ['audit', '--audit-level=moderate']\n    \n  # OWASP Dependency Check\n  - name: 'owasp/dependency-check'\n    args:\n      - '--scan'\n      - '/workspace'\n      - '--format'\n      - 'JSON'\n      - '--out'\n      - '/workspace/dependency-check-report.json'\n    \n  # Container image security scan\n  - name: 'gcr.io/cloud-builders/gcloud'\n    script: |\n      #!/bin/bash\n      gcloud container images scan $_IMAGE_URL \\\n        --format='value(response.vulnerabilities.vulnerability.effectiveSeverity)' > scan-results.txt\n      \n      if grep -q \"CRITICAL\\|HIGH\" scan-results.txt; then\n        echo \"Critical or High vulnerabilities found!\"\n        exit 1\n      fi\n    \n  # OWASP ZAP baseline scan\n  - name: 'owasp/zap2docker-stable'\n    args:\n      - 'zap-baseline.py'\n      - '-t'\n      - '${_TARGET_URL}'\n      - '-f'\n      - 'json'\n      - '-J'\n      - 'zap-report.json'\n    \n  # Upload security reports\n  - name: 'gcr.io/cloud-builders/gsutil'\n    args:\n      - 'cp'\n      - '*.json'\n      - 'gs://${_SECURITY_REPORTS_BUCKET}/reports/${BUILD_ID}/'\n\nsubstitutions:\n  _IMAGE_URL: 'gcr.io/${PROJECT_ID}/app:${SHORT_SHA}'\n  _TARGET_URL: 'https://staging.example.com'\n  _SECURITY_REPORTS_BUCKET: 'security-reports-bucket'\n\noptions:\n  logging: CLOUD_LOGGING_ONLY\n"})}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-security-workflow",children:"GitHub Actions Security Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/security.yml\nname: Security Testing\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 2 * * *' # Daily at 2 AM\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run security linting\n        run: npm run security:lint\n      \n      - name: Audit dependencies\n        run: npm audit --audit-level=moderate\n      \n      - name: Run Snyk security scan\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n      \n      - name: Run security tests\n        run: npm run test:security\n      \n      - name: OWASP ZAP Baseline Scan\n        uses: zaproxy/action-baseline@v0.7.0\n        with:\n          target: 'https://staging.example.com'\n          rules_file_name: '.zap/rules.tsv'\n          cmd_options: '-a'\n      \n      - name: Upload security reports\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: security-reports\n          path: |\n            zap-report.json\n            snyk-report.json\n            security-test-results.xml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"owasp-security-testing",children:"OWASP Security Testing"}),"\n",(0,r.jsx)(n.h3,{id:"security-testing-utilities",children:"Security Testing Utilities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/testing/security-utils.ts\nimport * as crypto from 'crypto';\nimport { ValidationPipe } from '@nestjs/common';\n\nexport class SecurityTestUtils {\n  static generateSqlInjectionPayloads(): string[] {\n    return [\n      \"' OR '1'='1\",\n      \"'; DROP TABLE users; --\",\n      \"' UNION SELECT * FROM users --\",\n      \"1'; EXEC sp_configure 'show advanced options', 1--\",\n      \"' OR 1=1#\",\n      \"admin'--\",\n      \"admin' /*\",\n      \"' OR 'x'='x\",\n    ];\n  }\n\n  static generateXssPayloads(): string[] {\n    return [\n      '<script>alert(\"XSS\")<\/script>',\n      '<img src=x onerror=alert(\"XSS\")>',\n      '<svg onload=alert(\"XSS\")>',\n      'javascript:alert(\"XSS\")',\n      '<iframe src=\"javascript:alert(`XSS`)\">',\n      '<input onfocus=alert(\"XSS\") autofocus>',\n      '<select onfocus=alert(\"XSS\") autofocus>',\n      '<textarea onfocus=alert(\"XSS\") autofocus>',\n    ];\n  }\n\n  static generateCommandInjectionPayloads(): string[] {\n    return [\n      '; ls -la',\n      '| cat /etc/passwd',\n      '&& whoami',\n      '`whoami`',\n      '$(whoami)',\n      '; ping -c 1 google.com',\n      '| nc -l 4444',\n    ];\n  }\n\n  static validateSecurityHeaders(headers: Record<string, string>): boolean {\n    const requiredHeaders = {\n      'x-content-type-options': 'nosniff',\n      'x-frame-options': ['DENY', 'SAMEORIGIN'],\n      'x-xss-protection': '1; mode=block',\n      'strict-transport-security': 'max-age=',\n      'content-security-policy': 'default-src',\n    };\n\n    for (const [header, expectedValue] of Object.entries(requiredHeaders)) {\n      const headerValue = headers[header.toLowerCase()];\n      \n      if (!headerValue) {\n        console.error(`Missing security header: ${header}`);\n        return false;\n      }\n\n      if (Array.isArray(expectedValue)) {\n        if (!expectedValue.some(val => headerValue.includes(val))) {\n          console.error(`Invalid ${header} header value: ${headerValue}`);\n          return false;\n        }\n      } else if (!headerValue.includes(expectedValue)) {\n        console.error(`Invalid ${header} header value: ${headerValue}`);\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static createSecureValidationPipe(): ValidationPipe {\n    return new ValidationPipe({\n      whitelist: true,\n      forbidNonWhitelisted: true,\n      transform: true,\n      disableErrorMessages: process.env.NODE_ENV === 'production',\n      validateCustomDecorators: true,\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"container-security-scanning",children:"Container Security Scanning"}),"\n",(0,r.jsx)(n.h3,{id:"dockerfile-security-best-practices",children:"Dockerfile Security Best Practices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'# Use official, minimal base image\nFROM node:18-alpine AS base\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\n# Set working directory\nWORKDIR /app\n\n# Install dependencies\nCOPY package*.json ./\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy source code\nCOPY --chown=nextjs:nodejs . .\n\n# Build application\nFROM base AS build\nRUN npm run build\n\n# Production image\nFROM node:18-alpine AS production\n\n# Install security updates\nRUN apk upgrade --no-cache\n\n# Create app directory\nWORKDIR /app\n\n# Copy built application\nCOPY --from=build --chown=nextjs:nodejs /app/dist ./dist\nCOPY --from=build --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --from=build --chown=nextjs:nodejs /app/package.json ./package.json\n\n# Use non-root user\nUSER nextjs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# Start application\nCMD ["node", "dist/main.js"]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"container-security-scanning-script",children:"Container Security Scanning Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# scripts/container-security-scan.sh\n\nset -e\n\nIMAGE_NAME="$1"\nif [ -z "$IMAGE_NAME" ]; then\n    echo "Usage: $0 <image-name>"\n    exit 1\nfi\n\necho "Running container security scans for: $IMAGE_NAME"\n\n# Trivy vulnerability scan\necho "Running Trivy vulnerability scan..."\ntrivy image --exit-code 1 --severity HIGH,CRITICAL "$IMAGE_NAME"\n\n# Docker Bench Security\necho "Running Docker Bench Security..."\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc:ro \\\n    -v /usr/bin/containerd:/usr/bin/containerd:ro \\\n    -v /usr/bin/runc:/usr/bin/runc:ro \\\n    -v /usr/lib/systemd:/usr/lib/systemd:ro \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker/docker-bench-security\n\n# Hadolint for Dockerfile linting\necho "Running Hadolint..."\nhadolint Dockerfile\n\n# Dockle for container image linting\necho "Running Dockle..."\ndockle --exit-code 1 "$IMAGE_NAME"\n\necho "Container security scan completed!"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"deployment--cicd-integration",children:"Deployment & CI/CD Integration"}),"\n",(0,r.jsx)(n.h3,{id:"kubernetes-security-policies",children:"Kubernetes Security Policies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# k8s/security-policies.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: app-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: ecom-app\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          role: frontend\n    ports:\n    - protocol: TCP\n      port: 3000\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          role: database\n    ports:\n    - protocol: TCP\n      port: 5432\n\n---\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted-psp\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  fsGroup:\n    rule: 'RunAsAny'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"security-monitoring-dashboard",children:"Security Monitoring Dashboard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/monitoring/security-metrics.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { PrometheusService } from './prometheus.service';\n\n@Injectable()\nexport class SecurityMetricsService {\n  constructor(private prometheus: PrometheusService) {}\n\n  recordFailedLogin(username: string, ip: string): void {\n    this.prometheus.increment('failed_login_attempts_total', {\n      username,\n      ip,\n    });\n  }\n\n  recordSecurityScanResult(severity: string, count: number): void {\n    this.prometheus.set('security_vulnerabilities_total', count, {\n      severity,\n    });\n  }\n\n  recordSuspiciousActivity(type: string, ip: string): void {\n    this.prometheus.increment('suspicious_activity_total', {\n      type,\n      ip,\n    });\n  }\n\n  getSecurityMetrics(): any {\n    return {\n      failedLogins: this.prometheus.get('failed_login_attempts_total'),\n      vulnerabilities: this.prometheus.get('security_vulnerabilities_total'),\n      suspiciousActivity: this.prometheus.get('suspicious_activity_total'),\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This comprehensive security testing implementation provides:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automated vulnerability scanning"})," with OWASP ZAP and Google Cloud Security Scanner"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security regression testing"})," with comprehensive test suites"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Continuous security testing"})," integrated into CI/CD pipelines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Container security scanning"})," with industry-standard tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security monitoring and metrics"})," for ongoing security assessment"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The implementation ensures that security testing is automated, comprehensive, and integrated into the development lifecycle."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(9729);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);