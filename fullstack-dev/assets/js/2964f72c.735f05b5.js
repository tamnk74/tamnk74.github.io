"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[2134],{5349:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"devops/gcp/gke-cluster-setup","title":"GKE Cluster Setup Guide","description":"A comprehensive guide to setting up and configuring Google Kubernetes Engine (GKE) clusters from scratch.","source":"@site/docs/devops/gcp/gke-cluster-setup.md","sourceDirName":"devops/gcp","slug":"/devops/gcp/gke-cluster-setup","permalink":"/fullstack-dev/docs/devops/gcp/gke-cluster-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/devops/gcp/gke-cluster-setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Google Cloud Platform (GCP) DevOps Guides","permalink":"/fullstack-dev/docs/devops/gcp/"},"next":{"title":"GKE Ingress Setup Guide","permalink":"/fullstack-dev/docs/devops/gcp/gke-ingress-setup"}}');var t=r(5813),a=r(5741);const i={},s="GKE Cluster Setup Guide",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"GKE Cluster Types",id:"gke-cluster-types",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Tools",id:"required-tools",level:3},{value:"Installation Commands",id:"installation-commands",level:3},{value:"GCP Account Setup",id:"gcp-account-setup",level:3},{value:"Initial Setup",id:"initial-setup",level:2},{value:"Step 1: Enable Required APIs",id:"step-1-enable-required-apis",level:3},{value:"Step 2: Set Default Configuration",id:"step-2-set-default-configuration",level:3},{value:"Step 3: Create Service Account (Optional but Recommended)",id:"step-3-create-service-account-optional-but-recommended",level:3},{value:"Terraform Setup",id:"terraform-setup",level:2},{value:"Prerequisites for Terraform",id:"prerequisites-for-terraform",level:3},{value:"Install Terraform",id:"install-terraform",level:4},{value:"Setup Service Account for Terraform",id:"setup-service-account-for-terraform",level:4},{value:"Basic Terraform Configuration",id:"basic-terraform-configuration",level:3},{value:"Project Structure",id:"project-structure",level:4},{value:"Provider Configuration",id:"provider-configuration",level:4},{value:"Variables Configuration",id:"variables-configuration",level:4},{value:"VPC Network Module",id:"vpc-network-module",level:3},{value:"GKE Cluster Module",id:"gke-cluster-module",level:3},{value:"Main Terraform Configuration",id:"main-terraform-configuration",level:3},{value:"Terraform Variables File",id:"terraform-variables-file",level:3},{value:"Outputs Configuration",id:"outputs-configuration",level:3},{value:"Deployment Instructions",id:"deployment-instructions",level:3},{value:"1. Initialize and Plan",id:"1-initialize-and-plan",level:4},{value:"2. Deploy Infrastructure",id:"2-deploy-infrastructure",level:4},{value:"3. Connect to Cluster",id:"3-connect-to-cluster",level:4},{value:"4. Verify Deployment",id:"4-verify-deployment",level:4},{value:"Environment-Specific Configurations",id:"environment-specific-configurations",level:3},{value:"Development Environment",id:"development-environment",level:4},{value:"Production Environment",id:"production-environment",level:4},{value:"Terraform Best Practices",id:"terraform-best-practices",level:3},{value:"1. State Management",id:"1-state-management",level:4},{value:"2. Workspace Management",id:"2-workspace-management",level:4},{value:"3. Security Considerations",id:"3-security-considerations",level:4},{value:"4. Automation with CI/CD",id:"4-automation-with-cicd",level:4},{value:"Cleanup",id:"cleanup",level:3},{value:"Cluster Creation Options",id:"cluster-creation-options",level:2},{value:"Comparison: Standard vs Autopilot",id:"comparison-standard-vs-autopilot",level:3},{value:"When to Choose Standard GKE",id:"when-to-choose-standard-gke",level:3},{value:"When to Choose Autopilot GKE",id:"when-to-choose-autopilot-gke",level:3},{value:"Standard GKE Cluster Setup",id:"standard-gke-cluster-setup",level:2},{value:"Basic Standard Cluster",id:"basic-standard-cluster",level:3},{value:"Production-Ready Standard Cluster",id:"production-ready-standard-cluster",level:3},{value:"Advanced Standard Cluster Configuration",id:"advanced-standard-cluster-configuration",level:3},{value:"Autopilot GKE Cluster Setup",id:"autopilot-gke-cluster-setup",level:2},{value:"Basic Autopilot Cluster",id:"basic-autopilot-cluster",level:3},{value:"Production Autopilot Cluster",id:"production-autopilot-cluster",level:3},{value:"Node Pool Configuration",id:"node-pool-configuration",level:2},{value:"Create Additional Node Pools",id:"create-additional-node-pools",level:3},{value:"Node Pool Management",id:"node-pool-management",level:3},{value:"Security Configuration",id:"security-configuration",level:2},{value:"Workload Identity Setup",id:"workload-identity-setup",level:3},{value:"Network Security",id:"network-security",level:3},{value:"Pod Security Standards",id:"pod-security-standards",level:3},{value:"Networking Configuration",id:"networking-configuration",level:2},{value:"VPC-Native Networking",id:"vpc-native-networking",level:3},{value:"Private Cluster Configuration",id:"private-cluster-configuration",level:3},{value:"Network Policies",id:"network-policies",level:3},{value:"Monitoring and Logging",id:"monitoring-and-logging",level:2},{value:"Enable Monitoring and Logging",id:"enable-monitoring-and-logging",level:3},{value:"Configure Custom Monitoring",id:"configure-custom-monitoring",level:3},{value:"Log Aggregation Setup",id:"log-aggregation-setup",level:3},{value:"Storage Configuration",id:"storage-configuration",level:2},{value:"Persistent Volume Classes",id:"persistent-volume-classes",level:3},{value:"Filestore CSI Driver",id:"filestore-csi-driver",level:3},{value:"Cluster Management",id:"cluster-management",level:2},{value:"Connect to Cluster",id:"connect-to-cluster",level:3},{value:"Cluster Upgrade",id:"cluster-upgrade",level:3},{value:"Backup and Disaster Recovery",id:"backup-and-disaster-recovery",level:3},{value:"Resource Quotas",id:"resource-quotas",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Security Best Practices",id:"1-security-best-practices",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"3. Cost Optimization",id:"3-cost-optimization",level:3},{value:"4. High Availability",id:"4-high-availability",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"1. Node Not Ready",id:"1-node-not-ready",level:4},{value:"2. Pod Scheduling Issues",id:"2-pod-scheduling-issues",level:4},{value:"3. Network Connectivity Issues",id:"3-network-connectivity-issues",level:4},{value:"4. Authentication Issues",id:"4-authentication-issues",level:4},{value:"Monitoring Commands",id:"monitoring-commands",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:3},{value:"Additional Resources",id:"additional-resources",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gke-cluster-setup-guide",children:"GKE Cluster Setup Guide"})}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive guide to setting up and configuring Google Kubernetes Engine (GKE) clusters from scratch."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#initial-setup",children:"Initial Setup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#terraform-setup",children:"Terraform Setup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#cluster-creation-options",children:"Cluster Creation Options"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#standard-gke-cluster-setup",children:"Standard GKE Cluster Setup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#autopilot-gke-cluster-setup",children:"Autopilot GKE Cluster Setup"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#node-pool-configuration",children:"Node Pool Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#security-configuration",children:"Security Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#networking-configuration",children:"Networking Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#monitoring-and-logging",children:"Monitoring and Logging"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#storage-configuration",children:"Storage Configuration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#cluster-management",children:"Cluster Management"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Google Kubernetes Engine (GKE) is a managed Kubernetes service that provides a powerful platform for deploying, managing, and scaling containerized applications. This guide covers everything from basic cluster creation to advanced configurations."}),"\n",(0,t.jsx)(n.h3,{id:"gke-cluster-types",children:"GKE Cluster Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Standard Cluster"}),": Full control over cluster configuration and node management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Autopilot Cluster"}),": Fully managed, optimized for cost and operational efficiency"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.h3,{id:"required-tools",children:"Required Tools"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Google Cloud SDK (gcloud)"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"kubectl"})," - Kubernetes command-line tool"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Docker"})," (for building container images)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Helm"})," (optional, for package management)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"installation-commands",children:"Installation Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Google Cloud SDK (macOS)\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\n\n# Install kubectl\ngcloud components install kubectl\n\n# Install Docker (macOS)\nbrew install docker\n\n# Install Helm\ncurl https://get.helm.sh/helm-v3.13.0-darwin-amd64.tar.gz | tar xz\nsudo mv darwin-amd64/helm /usr/local/bin/\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gcp-account-setup",children:"GCP Account Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Authenticate with Google Cloud\ngcloud auth login\n\n# List available projects\ngcloud projects list\n\n# Create a new project (if needed)\ngcloud projects create PROJECT_ID --name="My GKE Project"\n\n# Set the project\ngcloud config set project PROJECT_ID\n\n# Enable billing (required for GKE)\n# This must be done through the GCP Console\n'})}),"\n",(0,t.jsx)(n.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-enable-required-apis",children:"Step 1: Enable Required APIs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable essential APIs for GKE\ngcloud services enable container.googleapis.com\ngcloud services enable compute.googleapis.com\ngcloud services enable monitoring.googleapis.com\ngcloud services enable logging.googleapis.com\ngcloud services enable cloudresourcemanager.googleapis.com\ngcloud services enable storage-api.googleapis.com\ngcloud services enable artifactregistry.googleapis.com\n\n# Verify enabled APIs\ngcloud services list --enabled\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-set-default-configuration",children:"Step 2: Set Default Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Set default region and zone\ngcloud config set compute/region us-central1\ngcloud config set compute/zone us-central1-a\n\n# Verify configuration\ngcloud config list\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-create-service-account-optional-but-recommended",children:"Step 3: Create Service Account (Optional but Recommended)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create service account for GKE operations\ngcloud iam service-accounts create gke-service-account \\\n    --description="Service account for GKE cluster operations" \\\n    --display-name="GKE Service Account"\n\n# Grant necessary roles\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:gke-service-account@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/container.developer"\n\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:gke-service-account@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/storage.objectViewer"\n\n# Download service account key\ngcloud iam service-accounts keys create ~/gke-service-account-key.json \\\n    --iam-account=gke-service-account@PROJECT_ID.iam.gserviceaccount.com\n'})}),"\n",(0,t.jsx)(n.h2,{id:"terraform-setup",children:"Terraform Setup"}),"\n",(0,t.jsx)(n.p,{children:"Infrastructure as Code (IaC) with Terraform provides reproducible, version-controlled infrastructure deployments. This section covers comprehensive GKE cluster setup using Terraform."}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites-for-terraform",children:"Prerequisites for Terraform"}),"\n",(0,t.jsx)(n.h4,{id:"install-terraform",children:"Install Terraform"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Terraform (macOS)\nbrew install terraform\n\n# Install Terraform (Linux)\nwget https://releases.hashicorp.com/terraform/1.6.2/terraform_1.6.2_linux_amd64.zip\nunzip terraform_1.6.2_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n\n# Verify installation\nterraform version\n"})}),"\n",(0,t.jsx)(n.h4,{id:"setup-service-account-for-terraform",children:"Setup Service Account for Terraform"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create service account for Terraform\ngcloud iam service-accounts create terraform-gke \\\n    --description="Terraform service account for GKE" \\\n    --display-name="Terraform GKE"\n\n# Grant necessary roles\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:terraform-gke@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/container.admin"\n\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:terraform-gke@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/compute.admin"\n\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:terraform-gke@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/iam.serviceAccountAdmin"\n\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="serviceAccount:terraform-gke@PROJECT_ID.iam.gserviceaccount.com" \\\n    --role="roles/resourcemanager.projectIamAdmin"\n\n# Download service account key\ngcloud iam service-accounts keys create terraform-gke-key.json \\\n    --iam-account=terraform-gke@PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/terraform-gke-key.json"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"basic-terraform-configuration",children:"Basic Terraform Configuration"}),"\n",(0,t.jsx)(n.h4,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create Terraform project structure\nmkdir gke-terraform\ncd gke-terraform\n\n# Create directory structure\nmkdir -p {modules/gke,modules/vpc,environments/dev,environments/prod}\n\n# Project structure:\n# gke-terraform/\n# \u251c\u2500\u2500 main.tf\n# \u251c\u2500\u2500 variables.tf\n# \u251c\u2500\u2500 outputs.tf\n# \u251c\u2500\u2500 terraform.tfvars\n# \u251c\u2500\u2500 versions.tf\n# \u251c\u2500\u2500 modules/\n# \u2502   \u251c\u2500\u2500 gke/\n# \u2502   \u2514\u2500\u2500 vpc/\n# \u2514\u2500\u2500 environments/\n#     \u251c\u2500\u2500 dev/\n#     \u2514\u2500\u2500 prod/\n"})}),"\n",(0,t.jsx)(n.h4,{id:"provider-configuration",children:"Provider Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# versions.tf\nterraform {\n  required_version = ">= 1.6"\n  \n  required_providers {\n    google = {\n      source  = "hashicorp/google"\n      version = "~> 5.0"\n    }\n    google-beta = {\n      source  = "hashicorp/google-beta"\n      version = "~> 5.0"\n    }\n  }\n\n  # Optional: Configure remote state storage\n  backend "gcs" {\n    bucket = "your-terraform-state-bucket"\n    prefix = "gke-cluster"\n  }\n}\n\nprovider "google" {\n  project = var.project_id\n  region  = var.region\n}\n\nprovider "google-beta" {\n  project = var.project_id\n  region  = var.region\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"variables-configuration",children:"Variables Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n  default     = "us-central1"\n}\n\nvariable "zones" {\n  description = "The GCP zones"\n  type        = list(string)\n  default     = ["us-central1-a", "us-central1-b", "us-central1-c"]\n}\n\nvariable "cluster_name" {\n  description = "The name of the GKE cluster"\n  type        = string\n  default     = "gke-cluster"\n}\n\nvariable "network_name" {\n  description = "The name of the VPC network"\n  type        = string\n  default     = "gke-network"\n}\n\nvariable "subnet_name" {\n  description = "The name of the subnet"\n  type        = string\n  default     = "gke-subnet"\n}\n\nvariable "master_ipv4_cidr_block" {\n  description = "The IP range for the cluster master"\n  type        = string\n  default     = "172.16.0.0/28"\n}\n\nvariable "cluster_secondary_range_name" {\n  description = "The name of the secondary range for pods"\n  type        = string\n  default     = "gke-pods"\n}\n\nvariable "services_secondary_range_name" {\n  description = "The name of the secondary range for services"\n  type        = string\n  default     = "gke-services"\n}\n\nvariable "enable_private_nodes" {\n  description = "Whether to enable private nodes"\n  type        = bool\n  default     = true\n}\n\nvariable "enable_private_endpoint" {\n  description = "Whether to enable private endpoint"\n  type        = bool\n  default     = false\n}\n\nvariable "authorized_networks" {\n  description = "List of authorized networks for API server access"\n  type = list(object({\n    cidr_block   = string\n    display_name = string\n  }))\n  default = [\n    {\n      cidr_block   = "0.0.0.0/0"\n      display_name = "All networks"\n    }\n  ]\n}\n\nvariable "node_pools" {\n  description = "List of node pools"\n  type = list(object({\n    name         = string\n    machine_type = string\n    disk_size_gb = number\n    disk_type    = string\n    image_type   = string\n    auto_repair  = bool\n    auto_upgrade = bool\n    preemptible  = bool\n    min_count    = number\n    max_count    = number\n    initial_node_count = number\n    node_labels  = map(string)\n    node_taints = list(object({\n      key    = string\n      value  = string\n      effect = string\n    }))\n  }))\n  default = [\n    {\n      name         = "primary-pool"\n      machine_type = "e2-medium"\n      disk_size_gb = 50\n      disk_type    = "pd-ssd"\n      image_type   = "COS_CONTAINERD"\n      auto_repair  = true\n      auto_upgrade = true\n      preemptible  = false\n      min_count    = 1\n      max_count    = 10\n      initial_node_count = 3\n      node_labels  = {}\n      node_taints  = []\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"vpc-network-module",children:"VPC Network Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/vpc/main.tf\nresource "google_compute_network" "vpc" {\n  name                    = var.network_name\n  auto_create_subnetworks = false\n  description             = "VPC network for GKE cluster"\n}\n\nresource "google_compute_subnetwork" "subnet" {\n  name          = var.subnet_name\n  ip_cidr_range = var.subnet_cidr\n  region        = var.region\n  network       = google_compute_network.vpc.id\n  description   = "Subnet for GKE cluster"\n\n  secondary_ip_range {\n    range_name    = var.cluster_secondary_range_name\n    ip_cidr_range = var.cluster_secondary_range_cidr\n  }\n\n  secondary_ip_range {\n    range_name    = var.services_secondary_range_name\n    ip_cidr_range = var.services_secondary_range_cidr\n  }\n\n  private_ip_google_access = true\n\n  log_config {\n    aggregation_interval = "INTERVAL_10_MIN"\n    flow_sampling        = 0.5\n    metadata             = "INCLUDE_ALL_METADATA"\n  }\n}\n\n# Cloud Router for NAT\nresource "google_compute_router" "router" {\n  name    = "${var.network_name}-router"\n  region  = var.region\n  network = google_compute_network.vpc.id\n}\n\n# Cloud NAT for private nodes\nresource "google_compute_router_nat" "nat" {\n  name                               = "${var.network_name}-nat"\n  router                             = google_compute_router.router.name\n  region                             = var.region\n  nat_ip_allocate_option            = "AUTO_ONLY"\n  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"\n\n  log_config {\n    enable = true\n    filter = "ERRORS_ONLY"\n  }\n}\n\n# Firewall rules\nresource "google_compute_firewall" "allow_internal" {\n  name    = "${var.network_name}-allow-internal"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "icmp"\n  }\n\n  allow {\n    protocol = "tcp"\n    ports    = ["0-65535"]\n  }\n\n  allow {\n    protocol = "udp"\n    ports    = ["0-65535"]\n  }\n\n  source_ranges = [\n    var.subnet_cidr,\n    var.cluster_secondary_range_cidr,\n    var.services_secondary_range_cidr\n  ]\n\n  description = "Allow internal communication within VPC"\n}\n\nresource "google_compute_firewall" "allow_ssh" {\n  name    = "${var.network_name}-allow-ssh"\n  network = google_compute_network.vpc.name\n\n  allow {\n    protocol = "tcp"\n    ports    = ["22"]\n  }\n\n  source_ranges = ["0.0.0.0/0"]\n  target_tags   = ["ssh-allowed"]\n  description   = "Allow SSH access"\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/vpc/variables.tf\nvariable "network_name" {\n  description = "Name of the VPC network"\n  type        = string\n}\n\nvariable "subnet_name" {\n  description = "Name of the subnet"\n  type        = string\n}\n\nvariable "subnet_cidr" {\n  description = "CIDR range for the subnet"\n  type        = string\n  default     = "10.1.0.0/16"\n}\n\nvariable "cluster_secondary_range_name" {\n  description = "Name of the secondary range for pods"\n  type        = string\n}\n\nvariable "cluster_secondary_range_cidr" {\n  description = "CIDR range for pods"\n  type        = string\n  default     = "10.2.0.0/16"\n}\n\nvariable "services_secondary_range_name" {\n  description = "Name of the secondary range for services"\n  type        = string\n}\n\nvariable "services_secondary_range_cidr" {\n  description = "CIDR range for services"\n  type        = string\n  default     = "10.3.0.0/16"\n}\n\nvariable "region" {\n  description = "GCP region"\n  type        = string\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/vpc/outputs.tf\noutput "network_id" {\n  description = "The ID of the VPC network"\n  value       = google_compute_network.vpc.id\n}\n\noutput "network_name" {\n  description = "The name of the VPC network"\n  value       = google_compute_network.vpc.name\n}\n\noutput "subnet_id" {\n  description = "The ID of the subnet"\n  value       = google_compute_subnetwork.subnet.id\n}\n\noutput "subnet_name" {\n  description = "The name of the subnet"\n  value       = google_compute_subnetwork.subnet.name\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"gke-cluster-module",children:"GKE Cluster Module"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/gke/main.tf\nresource "google_service_account" "gke_service_account" {\n  account_id   = "${var.cluster_name}-sa"\n  display_name = "GKE Service Account for ${var.cluster_name}"\n  description  = "Service account for GKE cluster nodes"\n}\n\nresource "google_project_iam_member" "gke_service_account_roles" {\n  for_each = toset([\n    "roles/logging.logWriter",\n    "roles/monitoring.metricWriter",\n    "roles/monitoring.viewer",\n    "roles/stackdriver.resourceMetadata.writer",\n    "roles/storage.objectViewer"\n  ])\n\n  project = var.project_id\n  role    = each.value\n  member  = "serviceAccount:${google_service_account.gke_service_account.email}"\n}\n\nresource "google_container_cluster" "primary" {\n  name     = var.cluster_name\n  location = var.regional ? var.region : var.zone\n\n  # Remove default node pool\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  # Network configuration\n  network    = var.network_id\n  subnetwork = var.subnet_id\n\n  # IP allocation policy for VPC-native networking\n  ip_allocation_policy {\n    cluster_secondary_range_name  = var.cluster_secondary_range_name\n    services_secondary_range_name = var.services_secondary_range_name\n  }\n\n  # Private cluster configuration\n  dynamic "private_cluster_config" {\n    for_each = var.enable_private_nodes ? [1] : []\n    content {\n      enable_private_nodes    = true\n      enable_private_endpoint = var.enable_private_endpoint\n      master_ipv4_cidr_block  = var.master_ipv4_cidr_block\n    }\n  }\n\n  # Master authorized networks\n  dynamic "master_authorized_networks_config" {\n    for_each = length(var.authorized_networks) > 0 ? [1] : []\n    content {\n      dynamic "cidr_blocks" {\n        for_each = var.authorized_networks\n        content {\n          cidr_block   = cidr_blocks.value.cidr_block\n          display_name = cidr_blocks.value.display_name\n        }\n      }\n    }\n  }\n\n  # Workload Identity\n  workload_identity_config {\n    workload_pool = "${var.project_id}.svc.id.goog"\n  }\n\n  # Add-ons configuration\n  addons_config {\n    http_load_balancing {\n      disabled = false\n    }\n    \n    horizontal_pod_autoscaling {\n      disabled = false\n    }\n\n    network_policy_config {\n      disabled = !var.enable_network_policy\n    }\n\n    dns_cache_config {\n      enabled = true\n    }\n\n    gcp_filestore_csi_driver_config {\n      enabled = var.enable_filestore_csi\n    }\n  }\n\n  # Network policy\n  dynamic "network_policy" {\n    for_each = var.enable_network_policy ? [1] : []\n    content {\n      enabled  = true\n      provider = "CALICO"\n    }\n  }\n\n  # Cluster security\n  enable_shielded_nodes = true\n  \n  # Binary authorization\n  enable_binary_authorization = var.enable_binary_authorization\n\n  # Database encryption\n  dynamic "database_encryption" {\n    for_each = var.database_encryption_key != "" ? [1] : []\n    content {\n      state    = "ENCRYPTED"\n      key_name = var.database_encryption_key\n    }\n  }\n\n  # Maintenance policy\n  maintenance_policy {\n    daily_maintenance_window {\n      start_time = var.maintenance_start_time\n    }\n  }\n\n  # Resource usage export\n  resource_usage_export_config {\n    enable_network_egress_metering = true\n    enable_resource_consumption_metering = true\n    \n    bigquery_destination {\n      dataset_id = var.resource_usage_bigquery_dataset_id\n    }\n  }\n\n  # Logging and monitoring configuration\n  logging_config {\n    enable_components = var.logging_components\n  }\n\n  monitoring_config {\n    enable_components = var.monitoring_components\n  }\n\n  # Lifecycle rules\n  lifecycle {\n    ignore_changes = [\n      # Ignore changes to initial_node_count as we manage nodes via node pools\n      initial_node_count,\n    ]\n  }\n}\n\n# Node pools\nresource "google_container_node_pool" "node_pools" {\n  for_each = { for np in var.node_pools : np.name => np }\n\n  name       = each.value.name\n  location   = google_container_cluster.primary.location\n  cluster    = google_container_cluster.primary.name\n  \n  initial_node_count = each.value.initial_node_count\n\n  # Autoscaling configuration\n  autoscaling {\n    min_node_count = each.value.min_count\n    max_node_count = each.value.max_count\n  }\n\n  # Management configuration\n  management {\n    auto_repair  = each.value.auto_repair\n    auto_upgrade = each.value.auto_upgrade\n  }\n\n  # Node configuration\n  node_config {\n    preemptible  = each.value.preemptible\n    machine_type = each.value.machine_type\n    disk_size_gb = each.value.disk_size_gb\n    disk_type    = each.value.disk_type\n    image_type   = each.value.image_type\n\n    # Service account\n    service_account = google_service_account.gke_service_account.email\n    oauth_scopes = [\n      "https://www.googleapis.com/auth/cloud-platform"\n    ]\n\n    # Labels\n    labels = merge(\n      each.value.node_labels,\n      {\n        cluster = var.cluster_name\n        pool    = each.value.name\n      }\n    )\n\n    # Taints\n    dynamic "taint" {\n      for_each = each.value.node_taints\n      content {\n        key    = taint.value.key\n        value  = taint.value.value\n        effect = taint.value.effect\n      }\n    }\n\n    # Shielded instance configuration\n    shielded_instance_config {\n      enable_secure_boot          = true\n      enable_integrity_monitoring = true\n    }\n\n    # Workload metadata configuration\n    workload_metadata_config {\n      mode = "GKE_METADATA"\n    }\n\n    # Metadata\n    metadata = {\n      disable-legacy-endpoints = "true"\n    }\n  }\n\n  # Upgrade settings\n  upgrade_settings {\n    max_surge       = 1\n    max_unavailable = 0\n  }\n\n  # Lifecycle\n  lifecycle {\n    ignore_changes = [initial_node_count]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/gke/variables.tf\nvariable "project_id" {\n  description = "The GCP project ID"\n  type        = string\n}\n\nvariable "cluster_name" {\n  description = "The name of the GKE cluster"\n  type        = string\n}\n\nvariable "region" {\n  description = "The GCP region"\n  type        = string\n}\n\nvariable "zone" {\n  description = "The GCP zone (for zonal clusters)"\n  type        = string\n  default     = ""\n}\n\nvariable "regional" {\n  description = "Whether to create a regional cluster"\n  type        = bool\n  default     = true\n}\n\nvariable "network_id" {\n  description = "The ID of the VPC network"\n  type        = string\n}\n\nvariable "subnet_id" {\n  description = "The ID of the subnet"\n  type        = string\n}\n\nvariable "cluster_secondary_range_name" {\n  description = "The name of the secondary range for pods"\n  type        = string\n}\n\nvariable "services_secondary_range_name" {\n  description = "The name of the secondary range for services"\n  type        = string\n}\n\nvariable "enable_private_nodes" {\n  description = "Whether to enable private nodes"\n  type        = bool\n  default     = true\n}\n\nvariable "enable_private_endpoint" {\n  description = "Whether to enable private endpoint"\n  type        = bool\n  default     = false\n}\n\nvariable "master_ipv4_cidr_block" {\n  description = "The IP range for the cluster master"\n  type        = string\n  default     = "172.16.0.0/28"\n}\n\nvariable "authorized_networks" {\n  description = "List of authorized networks"\n  type = list(object({\n    cidr_block   = string\n    display_name = string\n  }))\n  default = []\n}\n\nvariable "enable_network_policy" {\n  description = "Whether to enable network policy"\n  type        = bool\n  default     = true\n}\n\nvariable "enable_filestore_csi" {\n  description = "Whether to enable Filestore CSI driver"\n  type        = bool\n  default     = false\n}\n\nvariable "enable_binary_authorization" {\n  description = "Whether to enable binary authorization"\n  type        = bool\n  default     = false\n}\n\nvariable "database_encryption_key" {\n  description = "The Cloud KMS key to use for database encryption"\n  type        = string\n  default     = ""\n}\n\nvariable "maintenance_start_time" {\n  description = "Start time for daily maintenance window"\n  type        = string\n  default     = "03:00"\n}\n\nvariable "resource_usage_bigquery_dataset_id" {\n  description = "BigQuery dataset ID for resource usage export"\n  type        = string\n  default     = ""\n}\n\nvariable "logging_components" {\n  description = "List of logging components to enable"\n  type        = list(string)\n  default     = ["SYSTEM_COMPONENTS", "WORKLOADS"]\n}\n\nvariable "monitoring_components" {\n  description = "List of monitoring components to enable"\n  type        = list(string)\n  default     = ["SYSTEM_COMPONENTS"]\n}\n\nvariable "node_pools" {\n  description = "List of node pool configurations"\n  type = list(object({\n    name         = string\n    machine_type = string\n    disk_size_gb = number\n    disk_type    = string\n    image_type   = string\n    auto_repair  = bool\n    auto_upgrade = bool\n    preemptible  = bool\n    min_count    = number\n    max_count    = number\n    initial_node_count = number\n    node_labels  = map(string)\n    node_taints = list(object({\n      key    = string\n      value  = string\n      effect = string\n    }))\n  }))\n  default = []\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# modules/gke/outputs.tf\noutput "cluster_id" {\n  description = "The ID of the cluster"\n  value       = google_container_cluster.primary.id\n}\n\noutput "cluster_name" {\n  description = "The name of the cluster"\n  value       = google_container_cluster.primary.name\n}\n\noutput "cluster_location" {\n  description = "The location of the cluster"\n  value       = google_container_cluster.primary.location\n}\n\noutput "cluster_endpoint" {\n  description = "The cluster endpoint"\n  value       = google_container_cluster.primary.endpoint\n  sensitive   = true\n}\n\noutput "cluster_ca_certificate" {\n  description = "The cluster CA certificate"\n  value       = google_container_cluster.primary.master_auth[0].cluster_ca_certificate\n  sensitive   = true\n}\n\noutput "service_account_email" {\n  description = "The service account email"\n  value       = google_service_account.gke_service_account.email\n}\n\noutput "node_pools" {\n  description = "The node pools"\n  value       = google_container_node_pool.node_pools\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"main-terraform-configuration",children:"Main Terraform Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# main.tf\n# Enable required APIs\nresource "google_project_service" "required_apis" {\n  for_each = toset([\n    "compute.googleapis.com",\n    "container.googleapis.com",\n    "monitoring.googleapis.com",\n    "logging.googleapis.com",\n    "cloudresourcemanager.googleapis.com",\n    "certificatemanager.googleapis.com"\n  ])\n\n  project = var.project_id\n  service = each.value\n\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\n# VPC Network\nmodule "vpc" {\n  source = "./modules/vpc"\n\n  network_name                      = var.network_name\n  subnet_name                       = var.subnet_name\n  cluster_secondary_range_name      = var.cluster_secondary_range_name\n  services_secondary_range_name     = var.services_secondary_range_name\n  region                           = var.region\n\n  depends_on = [google_project_service.required_apis]\n}\n\n# GKE Cluster\nmodule "gke" {\n  source = "./modules/gke"\n\n  project_id                        = var.project_id\n  cluster_name                      = var.cluster_name\n  region                           = var.region\n  network_id                       = module.vpc.network_id\n  subnet_id                        = module.vpc.subnet_id\n  cluster_secondary_range_name      = var.cluster_secondary_range_name\n  services_secondary_range_name     = var.services_secondary_range_name\n  enable_private_nodes             = var.enable_private_nodes\n  enable_private_endpoint          = var.enable_private_endpoint\n  master_ipv4_cidr_block           = var.master_ipv4_cidr_block\n  authorized_networks              = var.authorized_networks\n  node_pools                       = var.node_pools\n\n  depends_on = [module.vpc]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"terraform-variables-file",children:"Terraform Variables File"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# terraform.tfvars\nproject_id   = "your-gcp-project-id"\nregion       = "us-central1"\ncluster_name = "production-gke-cluster"\n\n# Network configuration\nnetwork_name = "gke-vpc"\nsubnet_name  = "gke-subnet"\n\n# Private cluster settings\nenable_private_nodes    = true\nenable_private_endpoint = false\nmaster_ipv4_cidr_block = "172.16.0.0/28"\n\n# Authorized networks for API server access\nauthorized_networks = [\n  {\n    cidr_block   = "10.0.0.0/8"\n    display_name = "Internal networks"\n  },\n  {\n    cidr_block   = "YOUR_OFFICE_IP/32"\n    display_name = "Office network"\n  }\n]\n\n# Node pools configuration\nnode_pools = [\n  {\n    name               = "primary-pool"\n    machine_type       = "e2-standard-4"\n    disk_size_gb       = 50\n    disk_type          = "pd-ssd"\n    image_type         = "COS_CONTAINERD"\n    auto_repair        = true\n    auto_upgrade       = true\n    preemptible        = false\n    min_count          = 1\n    max_count          = 10\n    initial_node_count = 3\n    node_labels = {\n      environment = "production"\n      workload    = "general"\n    }\n    node_taints = []\n  },\n  {\n    name               = "spot-pool"\n    machine_type       = "e2-standard-2"\n    disk_size_gb       = 30\n    disk_type          = "pd-standard"\n    image_type         = "COS_CONTAINERD"\n    auto_repair        = true\n    auto_upgrade       = true\n    preemptible        = true\n    min_count          = 0\n    max_count          = 20\n    initial_node_count = 0\n    node_labels = {\n      environment = "production"\n      workload    = "spot"\n    }\n    node_taints = [\n      {\n        key    = "spot"\n        value  = "true"\n        effect = "NO_SCHEDULE"\n      }\n    ]\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"outputs-configuration",children:"Outputs Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# outputs.tf\noutput "cluster_name" {\n  description = "The name of the GKE cluster"\n  value       = module.gke.cluster_name\n}\n\noutput "cluster_location" {\n  description = "The location of the GKE cluster"\n  value       = module.gke.cluster_location\n}\n\noutput "cluster_endpoint" {\n  description = "The endpoint of the GKE cluster"\n  value       = module.gke.cluster_endpoint\n  sensitive   = true\n}\n\noutput "network_name" {\n  description = "The name of the VPC network"\n  value       = module.vpc.network_name\n}\n\noutput "subnet_name" {\n  description = "The name of the subnet"\n  value       = module.vpc.subnet_name\n}\n\noutput "service_account_email" {\n  description = "The email of the GKE service account"\n  value       = module.gke.service_account_email\n}\n\noutput "kubectl_connection_command" {\n  description = "Command to connect kubectl to the cluster"\n  value       = "gcloud container clusters get-credentials ${module.gke.cluster_name} --region ${module.gke.cluster_location} --project ${var.project_id}"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"deployment-instructions",children:"Deployment Instructions"}),"\n",(0,t.jsx)(n.h4,{id:"1-initialize-and-plan",children:"1. Initialize and Plan"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan -var-file="terraform.tfvars"\n\n# Review the plan carefully before applying\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-deploy-infrastructure",children:"2. Deploy Infrastructure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Apply the configuration\nterraform apply -var-file=\"terraform.tfvars\"\n\n# Confirm with 'yes' when prompted\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-connect-to-cluster",children:"3. Connect to Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Get cluster credentials\ngcloud container clusters get-credentials production-gke-cluster \\\n    --region us-central1 \\\n    --project your-gcp-project-id\n\n# Verify connection\nkubectl get nodes\nkubectl cluster-info\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-verify-deployment",children:"4. Verify Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check cluster status\nkubectl get nodes -o wide\n\n# Check node pools\nkubectl get nodes --show-labels\n\n# Verify networking\nkubectl get services -A\nkubectl get pods -A\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-specific-configurations",children:"Environment-Specific Configurations"}),"\n",(0,t.jsx)(n.h4,{id:"development-environment",children:"Development Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# environments/dev/terraform.tfvars\nproject_id   = "your-dev-project-id"\ncluster_name = "dev-gke-cluster"\n\nenable_private_nodes    = false\nenable_private_endpoint = false\n\nnode_pools = [\n  {\n    name               = "dev-pool"\n    machine_type       = "e2-medium"\n    disk_size_gb       = 30\n    disk_type          = "pd-standard"\n    image_type         = "COS_CONTAINERD"\n    auto_repair        = true\n    auto_upgrade       = true\n    preemptible        = true\n    min_count          = 1\n    max_count          = 5\n    initial_node_count = 2\n    node_labels = {\n      environment = "development"\n    }\n    node_taints = []\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h4,{id:"production-environment",children:"Production Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# environments/prod/terraform.tfvars\nproject_id   = "your-prod-project-id"\ncluster_name = "prod-gke-cluster"\n\nenable_private_nodes          = true\nenable_private_endpoint       = true\nenable_binary_authorization   = true\ndatabase_encryption_key       = "projects/your-project/locations/us-central1/keyRings/gke-ring/cryptoKeys/gke-key"\n\nnode_pools = [\n  {\n    name               = "production-pool"\n    machine_type       = "e2-standard-8"\n    disk_size_gb       = 100\n    disk_type          = "pd-ssd"\n    image_type         = "COS_CONTAINERD"\n    auto_repair        = true\n    auto_upgrade       = true\n    preemptible        = false\n    min_count          = 3\n    max_count          = 50\n    initial_node_count = 6\n    node_labels = {\n      environment = "production"\n      tier        = "primary"\n    }\n    node_taints = []\n  }\n]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"terraform-best-practices",children:"Terraform Best Practices"}),"\n",(0,t.jsx)(n.h4,{id:"1-state-management",children:"1. State Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create bucket for remote state\ngsutil mb gs://your-terraform-state-bucket\n\n# Enable versioning\ngsutil versioning set on gs://your-terraform-state-bucket\n\n# Configure state locking with Cloud Storage\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-workspace-management",children:"2. Workspace Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create workspaces for different environments\nterraform workspace new dev\nterraform workspace new staging\nterraform workspace new prod\n\n# Switch between workspaces\nterraform workspace select prod\nterraform workspace list\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-security-considerations",children:"3. Security Considerations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Encrypt terraform state\n# Use Google Secret Manager for sensitive variables\n# Implement least privilege IAM\n# Enable audit logging\n# Use private clusters for production\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-automation-with-cicd",children:"4. Automation with CI/CD"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# .github/workflows/terraform.yml\nname: Terraform GKE Deployment\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.6.2\n    \n    - name: Setup Google Cloud Auth\n      uses: google-github-actions/auth@v1\n      with:\n        credentials_json: ${{ secrets.GCP_SA_KEY }}\n    \n    - name: Terraform Init\n      run: terraform init\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file="environments/prod/terraform.tfvars"\n      \n    - name: Terraform Apply\n      if: github.ref == \'refs/heads/main\'\n      run: terraform apply -auto-approve -var-file="environments/prod/terraform.tfvars"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Destroy infrastructure\nterraform destroy -var-file=\"terraform.tfvars\"\n\n# Confirm with 'yes' when prompted\n\n# Clean up local files\nrm -rf .terraform\nrm terraform.tfstate*\nrm terraform-gke-key.json\n"})}),"\n",(0,t.jsx)(n.p,{children:"This Terraform setup provides a production-ready, scalable, and secure GKE cluster configuration with proper networking, security, and monitoring capabilities."}),"\n",(0,t.jsx)(n.h2,{id:"cluster-creation-options",children:"Cluster Creation Options"}),"\n",(0,t.jsx)(n.h3,{id:"comparison-standard-vs-autopilot",children:"Comparison: Standard vs Autopilot"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Standard GKE"}),(0,t.jsx)(n.th,{children:"Autopilot GKE"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Node Management"})}),(0,t.jsx)(n.td,{children:"Manual"}),(0,t.jsx)(n.td,{children:"Fully managed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Scaling"})}),(0,t.jsx)(n.td,{children:"Manual/Auto"}),(0,t.jsx)(n.td,{children:"Automatic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Security"})}),(0,t.jsx)(n.td,{children:"User configured"}),(0,t.jsx)(n.td,{children:"Pre-hardened"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Cost Model"})}),(0,t.jsx)(n.td,{children:"Pay for nodes"}),(0,t.jsx)(n.td,{children:"Pay for pods"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Customization"})}),(0,t.jsx)(n.td,{children:"Full control"}),(0,t.jsx)(n.td,{children:"Limited"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Maintenance"})}),(0,t.jsx)(n.td,{children:"User managed"}),(0,t.jsx)(n.td,{children:"Google managed"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-choose-standard-gke",children:"When to Choose Standard GKE"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need custom node configurations"}),"\n",(0,t.jsx)(n.li,{children:"Require specific machine types"}),"\n",(0,t.jsx)(n.li,{children:"Need privileged containers"}),"\n",(0,t.jsx)(n.li,{children:"Require custom networking"}),"\n",(0,t.jsx)(n.li,{children:"Need GPU/TPU workloads"}),"\n",(0,t.jsx)(n.li,{children:"Require Windows nodes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-choose-autopilot-gke",children:"When to Choose Autopilot GKE"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Want minimal operational overhead"}),"\n",(0,t.jsx)(n.li,{children:"Cost optimization is priority"}),"\n",(0,t.jsx)(n.li,{children:"Standard security requirements"}),"\n",(0,t.jsx)(n.li,{children:"Stateless applications"}),"\n",(0,t.jsx)(n.li,{children:"Development/testing environments"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"standard-gke-cluster-setup",children:"Standard GKE Cluster Setup"}),"\n",(0,t.jsx)(n.h3,{id:"basic-standard-cluster",children:"Basic Standard Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create a basic standard GKE cluster\ngcloud container clusters create my-gke-cluster \\\n    --zone=us-central1-a \\\n    --num-nodes=3 \\\n    --machine-type=e2-medium \\\n    --disk-size=20GB \\\n    --disk-type=pd-standard \\\n    --enable-autoscaling \\\n    --min-nodes=1 \\\n    --max-nodes=10 \\\n    --enable-autorepair \\\n    --enable-autoupgrade\n"})}),"\n",(0,t.jsx)(n.h3,{id:"production-ready-standard-cluster",children:"Production-Ready Standard Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create production-ready standard cluster\ngcloud container clusters create production-cluster \\\n    --zone=us-central1-a \\\n    --node-locations=us-central1-a,us-central1-b,us-central1-c \\\n    --num-nodes=2 \\\n    --machine-type=e2-standard-4 \\\n    --disk-size=50GB \\\n    --disk-type=pd-ssd \\\n    --image-type=COS_CONTAINERD \\\n    --enable-network-policy \\\n    --enable-ip-alias \\\n    --create-subnetwork="" \\\n    --cluster-secondary-range-name=pods \\\n    --services-secondary-range-name=services \\\n    --enable-autoscaling \\\n    --min-nodes=1 \\\n    --max-nodes=20 \\\n    --enable-autorepair \\\n    --enable-autoupgrade \\\n    --maintenance-window-start=2023-01-01T09:00:00Z \\\n    --maintenance-window-end=2023-01-01T17:00:00Z \\\n    --maintenance-window-recurrence="FREQ=WEEKLY;BYDAY=SA" \\\n    --enable-shielded-nodes \\\n    --enable-cloud-logging \\\n    --enable-cloud-monitoring \\\n    --logging=SYSTEM,WORKLOAD \\\n    --monitoring=SYSTEM \\\n    --workload-pool=PROJECT_ID.svc.id.goog \\\n    --addons=HorizontalPodAutoscaling,HttpLoadBalancing,NodeLocalDNS\n'})}),"\n",(0,t.jsx)(n.h3,{id:"advanced-standard-cluster-configuration",children:"Advanced Standard Cluster Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create advanced cluster with custom networking\ngcloud container clusters create advanced-cluster \\\n    --zone=us-central1-a \\\n    --node-locations=us-central1-a,us-central1-b,us-central1-c \\\n    --num-nodes=3 \\\n    --machine-type=e2-standard-4 \\\n    --disk-size=100GB \\\n    --disk-type=pd-ssd \\\n    --image-type=COS_CONTAINERD \\\n    --network=my-vpc-network \\\n    --subnetwork=my-gke-subnet \\\n    --cluster-secondary-range-name=gke-pods \\\n    --services-secondary-range-name=gke-services \\\n    --enable-ip-alias \\\n    --enable-network-policy \\\n    --enable-private-nodes \\\n    --master-ipv4-cidr=172.16.0.0/28 \\\n    --enable-autoscaling \\\n    --min-nodes=1 \\\n    --max-nodes=50 \\\n    --enable-autorepair \\\n    --enable-autoupgrade \\\n    --enable-shielded-nodes \\\n    --shielded-secure-boot \\\n    --shielded-integrity-monitoring \\\n    --workload-pool=PROJECT_ID.svc.id.goog \\\n    --enable-cloud-logging \\\n    --enable-cloud-monitoring \\\n    --logging=SYSTEM,WORKLOAD,API_SERVER \\\n    --monitoring=SYSTEM,WORKLOAD \\\n    --release-channel=stable \\\n    --addons=HorizontalPodAutoscaling,HttpLoadBalancing,NodeLocalDNS,GcpFilestoreCsiDriver\n"})}),"\n",(0,t.jsx)(n.h2,{id:"autopilot-gke-cluster-setup",children:"Autopilot GKE Cluster Setup"}),"\n",(0,t.jsx)(n.h3,{id:"basic-autopilot-cluster",children:"Basic Autopilot Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create basic Autopilot cluster\ngcloud container clusters create-auto my-autopilot-cluster \\\n    --region=us-central1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"production-autopilot-cluster",children:"Production Autopilot Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create production Autopilot cluster\ngcloud container clusters create-auto production-autopilot \\\n    --region=us-central1 \\\n    --network=my-vpc-network \\\n    --subnetwork=my-autopilot-subnet \\\n    --cluster-secondary-range-name=autopilot-pods \\\n    --services-secondary-range-name=autopilot-services \\\n    --enable-private-nodes \\\n    --master-ipv4-cidr=172.16.0.0/28 \\\n    --workload-pool=PROJECT_ID.svc.id.goog \\\n    --logging=SYSTEM,WORKLOAD \\\n    --monitoring=SYSTEM\n"})}),"\n",(0,t.jsx)(n.h2,{id:"node-pool-configuration",children:"Node Pool Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"create-additional-node-pools",children:"Create Additional Node Pools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create CPU-optimized node pool\ngcloud container node-pools create cpu-optimized-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a \\\n    --machine-type=c2-standard-8 \\\n    --num-nodes=2 \\\n    --enable-autoscaling \\\n    --min-nodes=0 \\\n    --max-nodes=10 \\\n    --disk-size=50GB \\\n    --disk-type=pd-ssd \\\n    --node-taints=workload-type=cpu-intensive:NoSchedule \\\n    --node-labels=workload-type=cpu-intensive\n\n# Create memory-optimized node pool\ngcloud container node-pools create memory-optimized-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a \\\n    --machine-type=n2-highmem-4 \\\n    --num-nodes=1 \\\n    --enable-autoscaling \\\n    --min-nodes=0 \\\n    --max-nodes=5 \\\n    --disk-size=100GB \\\n    --disk-type=pd-ssd \\\n    --node-taints=workload-type=memory-intensive:NoSchedule \\\n    --node-labels=workload-type=memory-intensive\n\n# Create GPU node pool\ngcloud container node-pools create gpu-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a \\\n    --machine-type=n1-standard-4 \\\n    --accelerator=type=nvidia-tesla-t4,count=1 \\\n    --num-nodes=0 \\\n    --enable-autoscaling \\\n    --min-nodes=0 \\\n    --max-nodes=3 \\\n    --disk-size=100GB \\\n    --disk-type=pd-ssd \\\n    --node-taints=nvidia.com/gpu=present:NoSchedule \\\n    --node-labels=accelerator=nvidia-tesla-t4\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-pool-management",children:"Node Pool Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List node pools\ngcloud container node-pools list --cluster=production-cluster --zone=us-central1-a\n\n# Resize node pool\ngcloud container clusters resize production-cluster \\\n    --node-pool=default-pool \\\n    --num-nodes=5 \\\n    --zone=us-central1-a\n\n# Update node pool\ngcloud container node-pools update default-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a \\\n    --enable-autoupgrade\n\n# Delete node pool\ngcloud container node-pools delete old-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"workload-identity-setup",children:"Workload Identity Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Enable Workload Identity on existing cluster\ngcloud container clusters update production-cluster \\\n    --workload-pool=PROJECT_ID.svc.id.goog \\\n    --zone=us-central1-a\n\n# Update node pool for Workload Identity\ngcloud container node-pools update default-pool \\\n    --cluster=production-cluster \\\n    --workload-metadata=GKE_METADATA \\\n    --zone=us-central1-a\n\n# Create Kubernetes service account\nkubectl create serviceaccount my-ksa\n\n# Create Google service account\ngcloud iam service-accounts create my-gsa\n\n# Bind accounts\ngcloud iam service-accounts add-iam-policy-binding \\\n    my-gsa@PROJECT_ID.iam.gserviceaccount.com \\\n    --role roles/iam.workloadIdentityUser \\\n    --member "serviceAccount:PROJECT_ID.svc.id.goog[default/my-ksa]"\n\n# Annotate Kubernetes service account\nkubectl annotate serviceaccount my-ksa \\\n    iam.gke.io/gcp-service-account=my-gsa@PROJECT_ID.iam.gserviceaccount.com\n'})}),"\n",(0,t.jsx)(n.h3,{id:"network-security",children:"Network Security"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create VPC network for GKE\ngcloud compute networks create gke-vpc --subnet-mode=custom\n\n# Create subnet for GKE cluster\ngcloud compute networks subnets create gke-subnet \\\n    --network=gke-vpc \\\n    --range=10.1.0.0/16 \\\n    --secondary-range=gke-pods=10.2.0.0/16 \\\n    --secondary-range=gke-services=10.3.0.0/16 \\\n    --region=us-central1\n\n# Create firewall rules\ngcloud compute firewall-rules create allow-gke-internal \\\n    --network=gke-vpc \\\n    --allow=tcp,udp,icmp \\\n    --source-ranges=10.1.0.0/16,10.2.0.0/16,10.3.0.0/16\n\n# Enable Private Google Access\ngcloud compute networks subnets update gke-subnet \\\n    --region=us-central1 \\\n    --enable-private-ip-google-access\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pod-security-standards",children:"Pod Security Standards"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# pod-security-policy.yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted-psp\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  seLinux:\n    rule: 'RunAsAny'\n  fsGroup:\n    rule: 'RunAsAny'\n  readOnlyRootFilesystem: true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"networking-configuration",children:"Networking Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"vpc-native-networking",children:"VPC-Native Networking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create cluster with VPC-native networking\ngcloud container clusters create vpc-native-cluster \\\n    --zone=us-central1-a \\\n    --enable-ip-alias \\\n    --network=gke-vpc \\\n    --subnetwork=gke-subnet \\\n    --cluster-secondary-range-name=gke-pods \\\n    --services-secondary-range-name=gke-services \\\n    --enable-network-policy\n"})}),"\n",(0,t.jsx)(n.h3,{id:"private-cluster-configuration",children:"Private Cluster Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create private cluster\ngcloud container clusters create private-cluster \\\n    --zone=us-central1-a \\\n    --enable-private-nodes \\\n    --master-ipv4-cidr=172.16.0.0/28 \\\n    --enable-ip-alias \\\n    --network=gke-vpc \\\n    --subnetwork=gke-subnet \\\n    --cluster-secondary-range-name=gke-pods \\\n    --services-secondary-range-name=gke-services \\\n    --enable-master-authorized-networks \\\n    --master-authorized-networks=203.0.113.0/24\n"})}),"\n",(0,t.jsx)(n.h3,{id:"network-policies",children:"Network Policies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# network-policy-deny-all.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n---\n# network-policy-allow-frontend.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-frontend\n  namespace: production\nspec:\n  podSelector:\n    matchLabels:\n      app: frontend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: loadbalancer\n    ports:\n    - protocol: TCP\n      port: 80\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-logging",children:"Monitoring and Logging"}),"\n",(0,t.jsx)(n.h3,{id:"enable-monitoring-and-logging",children:"Enable Monitoring and Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable monitoring and logging on existing cluster\ngcloud container clusters update production-cluster \\\n    --enable-cloud-logging \\\n    --enable-cloud-monitoring \\\n    --logging=SYSTEM,WORKLOAD,API_SERVER \\\n    --monitoring=SYSTEM,WORKLOAD \\\n    --zone=us-central1-a\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configure-custom-monitoring",children:"Configure Custom Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# monitoring-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: cluster-monitoring-config\n  namespace: kube-system\ndata:\n  config.yaml: |\n    prometheusConfig:\n      retention: "15d"\n      resources:\n        limits:\n          memory: "4Gi"\n        requests:\n          memory: "2Gi"\n    grafanaConfig:\n      enabled: true\n      adminPassword: "secure-password"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"log-aggregation-setup",children:"Log Aggregation Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create log sink for custom analysis\ngcloud logging sinks create gke-cluster-logs \\\n    bigquery.googleapis.com/projects/PROJECT_ID/datasets/gke_logs \\\n    --log-filter=\'resource.type="k8s_cluster"\'\n\n# Create log-based metrics\ngcloud logging metrics create pod_restart_count \\\n    --description="Count of pod restarts" \\\n    --log-filter=\'resource.type="k8s_container" AND protoPayload.methodName="io.k8s.core.v1.Event"\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"storage-configuration",children:"Storage Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"persistent-volume-classes",children:"Persistent Volume Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# storage-classes.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast-ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zones: us-central1-a,us-central1-b,us-central1-c\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: slow-hdd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-standard\n  zones: us-central1-a,us-central1-b,us-central1-c\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filestore-csi-driver",children:"Filestore CSI Driver"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable Filestore CSI driver\ngcloud container clusters update production-cluster \\\n    --update-addons=GcpFilestoreCsiDriver=ENABLED \\\n    --zone=us-central1-a\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# filestore-pv.yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: filestore-pv\nspec:\n  capacity:\n    storage: 1Ti\n  accessModes:\n  - ReadWriteMany\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: ""\n  csi:\n    driver: filestore.csi.storage.gke.io\n    volumeHandle: "projects/PROJECT_ID/locations/us-central1/instances/my-filestore/shares/my-share"\n    volumeAttributes:\n      ip: "10.0.0.2"\n      volume: "my-share"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"cluster-management",children:"Cluster Management"}),"\n",(0,t.jsx)(n.h3,{id:"connect-to-cluster",children:"Connect to Cluster"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Get cluster credentials\ngcloud container clusters get-credentials production-cluster \\\n    --zone=us-central1-a \\\n    --project=PROJECT_ID\n\n# Verify connection\nkubectl cluster-info\nkubectl get nodes\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cluster-upgrade",children:"Cluster Upgrade"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check available versions\ngcloud container get-server-config --zone=us-central1-a\n\n# Upgrade master\ngcloud container clusters upgrade production-cluster \\\n    --master \\\n    --cluster-version=1.28.3-gke.1203001 \\\n    --zone=us-central1-a\n\n# Upgrade node pools\ngcloud container clusters upgrade production-cluster \\\n    --node-pool=default-pool \\\n    --cluster-version=1.28.3-gke.1203001 \\\n    --zone=us-central1-a\n"})}),"\n",(0,t.jsx)(n.h3,{id:"backup-and-disaster-recovery",children:"Backup and Disaster Recovery"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Enable backup for applications\ngcloud container backup-restore backup-plans create my-backup-plan \\\n    --project=PROJECT_ID \\\n    --location=us-central1 \\\n    --cluster=projects/PROJECT_ID/locations/us-central1-a/clusters/production-cluster \\\n    --backup-schedule-cron-schedule="0 2 * * *" \\\n    --backup-retain-days=30\n'})}),"\n",(0,t.jsx)(n.h3,{id:"resource-quotas",children:"Resource Quotas"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# resource-quota.yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: production-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: "100"\n    requests.memory: 200Gi\n    limits.cpu: "200"\n    limits.memory: 400Gi\n    persistentvolumeclaims: "10"\n    pods: "50"\n    services: "10"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-security-best-practices",children:"1. Security Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Use least privilege access\ngcloud projects add-iam-policy-binding PROJECT_ID \\\n    --member="user:developer@company.com" \\\n    --role="roles/container.developer"\n\n# Enable audit logging\ngcloud logging sinks create audit-logs \\\n    storage.googleapis.com/audit-logs-bucket \\\n    --log-filter=\'protoPayload.serviceName="container.googleapis.com"\'\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# resource-limits.yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: resource-limits\n  namespace: production\nspec:\n  limits:\n  - default:\n      cpu: "500m"\n      memory: "512Mi"\n    defaultRequest:\n      cpu: "100m"\n      memory: "128Mi"\n    type: Container\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-cost-optimization",children:"3. Cost Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Use preemptible nodes for non-critical workloads\ngcloud container node-pools create preemptible-pool \\\n    --cluster=production-cluster \\\n    --zone=us-central1-a \\\n    --machine-type=e2-medium \\\n    --preemptible \\\n    --num-nodes=3 \\\n    --enable-autoscaling \\\n    --min-nodes=0 \\\n    --max-nodes=10\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-high-availability",children:"4. High Availability"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create multi-zone cluster\ngcloud container clusters create ha-cluster \\\n    --zone=us-central1-a \\\n    --node-locations=us-central1-a,us-central1-b,us-central1-c \\\n    --num-nodes=1 \\\n    --enable-autorepair \\\n    --enable-autoupgrade\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"1-node-not-ready",children:"1. Node Not Ready"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check node status\nkubectl get nodes -o wide\n\n# Describe node for events\nkubectl describe node NODE_NAME\n\n# Check node logs\ngcloud compute ssh NODE_NAME --zone=us-central1-a\nsudo journalctl -u kubelet\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-pod-scheduling-issues",children:"2. Pod Scheduling Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check pod status\nkubectl describe pod POD_NAME\n\n# Check resource availability\nkubectl top nodes\nkubectl describe nodes\n\n# Check taints and tolerations\nkubectl get nodes -o custom-columns=NAME:.metadata.name,TAINTS:.spec.taints\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-network-connectivity-issues",children:"3. Network Connectivity Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Test cluster DNS\nkubectl run test-dns --image=busybox --rm -it -- nslookup kubernetes.default\n\n# Check network policies\nkubectl get networkpolicies -A\n\n# Test pod-to-pod connectivity\nkubectl run test-pod --image=busybox --rm -it -- wget -qO- http://service-name.namespace.svc.cluster.local\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-authentication-issues",children:"4. Authentication Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check current context\nkubectl config current-context\n\n# List contexts\nkubectl config get-contexts\n\n# Switch context\nkubectl config use-context CONTEXT_NAME\n\n# Check cluster authentication\ngcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitoring-commands",children:"Monitoring Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Cluster health\nkubectl get componentstatuses\n\n# Resource usage\nkubectl top nodes\nkubectl top pods -A\n\n# Events\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Logs\nkubectl logs -f deployment/my-app\ngcloud logging read "resource.type=k8s_cluster" --limit=50\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"This comprehensive guide covers the essential aspects of setting up and managing GKE clusters. From basic cluster creation to advanced security and networking configurations, following these practices will help you build robust, scalable, and secure Kubernetes environments on Google Cloud Platform."}),"\n",(0,t.jsx)(n.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy Applications"}),": Use the cluster to deploy your containerized applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Up CI/CD"}),": Integrate with Google Cloud Build or other CI/CD systems"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement GitOps"}),": Consider using tools like Flux or ArgoCD for GitOps workflows"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Networking"}),": Explore service mesh solutions like Istio"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cost Optimization"}),": Implement cluster autoscaling and resource optimization"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs",children:"GKE Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/",children:"Kubernetes Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cloud.google.com/architecture",children:"Google Cloud Architecture Center"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs/best-practices",children:"GKE Best Practices"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5741:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var o=r(9729);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);