"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7052],{2058:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"devops/gitops-microservices-gcp-guide","title":"GitOps Microservices Deployment Guide: Node.js on GCP GKE with Kustomize and ArgoCD","description":"This comprehensive guide demonstrates how to implement GitOps workflows for deploying Node.js microservices to Google Cloud Platform (GCP) Google Kubernetes Engine (GKE) using Infrastructure as Code principles with Kustomize for configuration management and ArgoCD for continuous deployment.","source":"@site/docs/devops/gitops-microservices-gcp-guide.md","sourceDirName":"devops","slug":"/devops/gitops-microservices-gcp-guide","permalink":"/fullstack-dev/docs/devops/gitops-microservices-gcp-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/devops/gitops-microservices-gcp-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Automated Deployment Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/automated-deployment"},"next":{"title":"Database Migration Management Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-execution/database-migrations"}}');var s=r(5813),o=r(5741);const t={},a="GitOps Microservices Deployment Guide: Node.js on GCP GKE with Kustomize and ArgoCD",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"GitOps Flow Architecture",id:"gitops-flow-architecture",level:3},{value:"Repository Strategy",id:"repository-strategy",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Tools",id:"required-tools",level:3},{value:"GCP Setup",id:"gcp-setup",level:3},{value:"Infrastructure Setup",id:"infrastructure-setup",level:2},{value:"Terraform Configuration for GKE",id:"terraform-configuration-for-gke",level:3},{value:"GKE Cluster Module",id:"gke-cluster-module",level:4},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:4},{value:"GitOps Repository Structure",id:"gitops-repository-structure",level:2},{value:"Kustomize Configuration",id:"kustomize-configuration",level:2},{value:"Base Configuration",id:"base-configuration",level:3},{value:"Base Deployment Template",id:"base-deployment-template",level:4},{value:"Base Kustomization",id:"base-kustomization",level:4},{value:"Environment Overlays",id:"environment-overlays",level:3},{value:"Production Overlay",id:"production-overlay",level:4},{value:"Production Patches",id:"production-patches",level:4},{value:"Horizontal Pod Autoscaler",id:"horizontal-pod-autoscaler",level:4},{value:"ArgoCD Setup and Configuration",id:"argocd-setup-and-configuration",level:2},{value:"ArgoCD Installation",id:"argocd-installation",level:3},{value:"Application Projects",id:"application-projects",level:3},{value:"Application Definitions",id:"application-definitions",level:3},{value:"ApplicationSet for Multiple Environments",id:"applicationset-for-multiple-environments",level:3},{value:"CI/CD Pipeline Implementation",id:"cicd-pipeline-implementation",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Service-Specific Dockerfile",id:"service-specific-dockerfile",level:3},{value:"Security and Best Practices",id:"security-and-best-practices",level:2},{value:"Security Policies",id:"security-policies",level:3},{value:"Network Policies",id:"network-policies",level:4},{value:"Pod Security Standards",id:"pod-security-standards",level:4},{value:"Secret Management",id:"secret-management",level:3},{value:"External Secrets Operator",id:"external-secrets-operator",level:4},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Prometheus ServiceMonitor",id:"prometheus-servicemonitor",level:3},{value:"Grafana Dashboard",id:"grafana-dashboard",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"ArgoCD Application Not Syncing",id:"argocd-application-not-syncing",level:4},{value:"Kustomize Build Errors",id:"kustomize-build-errors",level:4},{value:"Image Pull Errors",id:"image-pull-errors",level:4},{value:"Debugging Commands",id:"debugging-commands",level:3},{value:"Health Checks and Validation",id:"health-checks-and-validation",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gitops-microservices-deployment-guide-nodejs-on-gcp-gke-with-kustomize-and-argocd",children:"GitOps Microservices Deployment Guide: Node.js on GCP GKE with Kustomize and ArgoCD"})}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive guide demonstrates how to implement GitOps workflows for deploying Node.js microservices to Google Cloud Platform (GCP) Google Kubernetes Engine (GKE) using Infrastructure as Code principles with Kustomize for configuration management and ArgoCD for continuous deployment."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#architecture-overview",children:"Architecture Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#prerequisites",children:"Prerequisites"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#infrastructure-setup",children:"Infrastructure Setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#gitops-repository-structure",children:"GitOps Repository Structure"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#kustomize-configuration",children:"Kustomize Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#argocd-setup-and-configuration",children:"ArgoCD Setup and Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#cicd-pipeline-implementation",children:"CI/CD Pipeline Implementation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#security-and-best-practices",children:"Security and Best Practices"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#monitoring-and-observability",children:"Monitoring and Observability"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.h3,{id:"gitops-flow-architecture",children:"GitOps Flow Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Developer] --\x3e B[Source Code Repository]\n    B --\x3e C[CI Pipeline - GitHub Actions]\n    C --\x3e D[Build & Test]\n    D --\x3e E[Container Build]\n    E --\x3e F[Security Scanning]\n    F --\x3e G[Push to Registry]\n    G --\x3e H[Update GitOps Repository]\n    H --\x3e I[ArgoCD Sync]\n    I --\x3e J[GKE Cluster Deployment]\n    \n    K[Infrastructure Repository] --\x3e L[Terraform]\n    L --\x3e M[GCP Resources]\n    M --\x3e N[GKE Cluster]\n    M --\x3e O[Cloud SQL]\n    M --\x3e P[Cloud Storage]\n    \n    Q[GitOps Repository] --\x3e R[Kustomize Base]\n    Q --\x3e S[Environment Overlays]\n    S --\x3e T[Development]\n    S --\x3e U[Staging]\n    S --\x3e V[Production]\n    \n    W[ArgoCD] --\x3e X[Application Sync]\n    X --\x3e Y[Health Monitoring]\n    Y --\x3e Z[Automated Rollback]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"repository-strategy",children:"Repository Strategy"}),"\n",(0,s.jsx)(n.p,{children:"Our GitOps implementation follows a multi-repository pattern:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Application Repositories"}),": Source code for each microservice"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Infrastructure Repository"}),": Terraform configurations for GCP resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitOps Repository"}),": Kubernetes manifests and Kustomize configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Libraries Repository"}),": Common configurations and utilities"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.h3,{id:"required-tools",children:"Required Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Install required CLI tools\n# Google Cloud SDK\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\ngcloud init\n\n# kubectl\ngcloud components install kubectl\n\n# kustomize\ncurl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash\n\n# ArgoCD CLI\ncurl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\n\n# Terraform\nwget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip\nunzip terraform_1.5.0_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n'})}),"\n",(0,s.jsx)(n.h3,{id:"gcp-setup",children:"GCP Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Set up GCP project\nexport PROJECT_ID="your-microservices-project"\nexport REGION="us-central1"\nexport CLUSTER_NAME="microservices-cluster"\n\ngcloud config set project $PROJECT_ID\ngcloud services enable container.googleapis.com\ngcloud services enable cloudsql.googleapis.com\ngcloud services enable secretmanager.googleapis.com\n'})}),"\n",(0,s.jsx)(n.h2,{id:"infrastructure-setup",children:"Infrastructure Setup"}),"\n",(0,s.jsx)(n.h3,{id:"terraform-configuration-for-gke",children:"Terraform Configuration for GKE"}),"\n",(0,s.jsx)(n.p,{children:"Create the infrastructure repository with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"infrastructure/\n\u251c\u2500\u2500 terraform/\n\u2502   \u251c\u2500\u2500 environments/\n\u2502   \u2502   \u251c\u2500\u2500 dev/\n\u2502   \u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2514\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 modules/\n\u2502   \u2502   \u251c\u2500\u2500 gke/\n\u2502   \u2502   \u251c\u2500\u2500 cloudsql/\n\u2502   \u2502   \u2514\u2500\u2500 networking/\n\u2502   \u2514\u2500\u2500 shared/\n\u2514\u2500\u2500 scripts/\n"})}),"\n",(0,s.jsx)(n.h4,{id:"gke-cluster-module",children:"GKE Cluster Module"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'# terraform/modules/gke/main.tf\nresource "google_container_cluster" "primary" {\n  name     = var.cluster_name\n  location = var.region\n  \n  # Remove default node pool\n  remove_default_node_pool = true\n  initial_node_count       = 1\n  \n  # Network configuration\n  network    = var.vpc_name\n  subnetwork = var.subnet_name\n  \n  # Enable workload identity\n  workload_identity_config {\n    workload_pool = "${var.project_id}.svc.id.goog"\n  }\n  \n  # Enable network policy\n  network_policy {\n    enabled = true\n  }\n  \n  # Private cluster configuration\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = "172.16.0.0/28"\n  }\n  \n  # Master authorized networks\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block   = "10.0.0.0/8"\n      display_name = "internal"\n    }\n  }\n  \n  # Enable logging and monitoring\n  logging_service    = "logging.googleapis.com/kubernetes"\n  monitoring_service = "monitoring.googleapis.com/kubernetes"\n  \n  # Addons\n  addons_config {\n    horizontal_pod_autoscaling {\n      disabled = false\n    }\n    network_policy_config {\n      disabled = false\n    }\n    istio_config {\n      disabled = false\n      auth     = "AUTH_MUTUAL_TLS"\n    }\n  }\n}\n\nresource "google_container_node_pool" "primary_nodes" {\n  name       = "${var.cluster_name}-node-pool"\n  location   = var.region\n  cluster    = google_container_cluster.primary.name\n  node_count = var.node_count\n  \n  node_config {\n    preemptible  = var.preemptible\n    machine_type = var.machine_type\n    disk_size_gb = var.disk_size_gb\n    disk_type    = "pd-ssd"\n    \n    # Google service account\n    service_account = google_service_account.gke_nodes.email\n    oauth_scopes = [\n      "https://www.googleapis.com/auth/logging.write",\n      "https://www.googleapis.com/auth/monitoring",\n      "https://www.googleapis.com/auth/devstorage.read_only"\n    ]\n    \n    # Workload Identity\n    workload_metadata_config {\n      mode = "GKE_METADATA"\n    }\n    \n    labels = var.node_labels\n    tags   = var.node_tags\n  }\n  \n  autoscaling {\n    min_node_count = var.min_node_count\n    max_node_count = var.max_node_count\n  }\n  \n  management {\n    auto_repair  = true\n    auto_upgrade = true\n  }\n}\n\nresource "google_service_account" "gke_nodes" {\n  account_id   = "${var.cluster_name}-nodes"\n  display_name = "GKE Nodes Service Account"\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'# terraform/environments/production/main.tf\nmodule "gke_cluster" {\n  source = "../../modules/gke"\n  \n  project_id     = var.project_id\n  cluster_name   = "microservices-prod"\n  region         = "us-central1"\n  vpc_name       = "microservices-vpc"\n  subnet_name    = "microservices-subnet"\n  \n  machine_type     = "e2-standard-4"\n  node_count       = 3\n  min_node_count   = 3\n  max_node_count   = 10\n  disk_size_gb     = 100\n  preemptible      = false\n  \n  node_labels = {\n    environment = "production"\n    team        = "platform"\n  }\n  \n  node_tags = ["microservices", "production"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"gitops-repository-structure",children:"GitOps Repository Structure"}),"\n",(0,s.jsx)(n.p,{children:"Create a dedicated GitOps repository with the following structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"gitops-microservices/\n\u251c\u2500\u2500 applications/\n\u2502   \u251c\u2500\u2500 api-gateway/\n\u2502   \u251c\u2500\u2500 user-service/\n\u2502   \u251c\u2500\u2500 order-service/\n\u2502   \u251c\u2500\u2500 payment-service/\n\u2502   \u2514\u2500\u2500 notification-service/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 argocd/\n\u2502   \u251c\u2500\u2500 ingress-nginx/\n\u2502   \u251c\u2500\u2500 cert-manager/\n\u2502   \u251c\u2500\u2500 prometheus/\n\u2502   \u2514\u2500\u2500 grafana/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 base/\n\u2502   \u251c\u2500\u2500 development/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 production/\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 bootstrap.sh\n    \u2514\u2500\u2500 sync-all.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"kustomize-configuration",children:"Kustomize Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"base-configuration",children:"Base Configuration"}),"\n",(0,s.jsx)(n.h4,{id:"base-deployment-template",children:"Base Deployment Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# applications/user-service/base/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  labels:\n    app: user-service\n    version: v1\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n        version: v1\n    spec:\n      serviceAccountName: user-service\n      containers:\n      - name: user-service\n        image: gcr.io/PROJECT_ID/user-service:latest\n        ports:\n        - containerPort: 3000\n          name: http\n        env:\n        - name: NODE_ENV\n          value: production\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: user-service-secrets\n              key: database-url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: user-service-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        securityContext:\n          allowPrivilegeEscalation: false\n          runAsNonRoot: true\n          runAsUser: 1000\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\n  labels:\n    app: user-service\nspec:\n  ports:\n  - port: 80\n    targetPort: 3000\n    protocol: TCP\n    name: http\n  selector:\n    app: user-service\n  type: ClusterIP\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: user-service\n  annotations:\n    iam.gke.io/gcp-service-account: user-service@PROJECT_ID.iam.gserviceaccount.com\n'})}),"\n",(0,s.jsx)(n.h4,{id:"base-kustomization",children:"Base Kustomization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nmetadata:\n  name: user-service-base\n\nresources:\n  - deployment.yaml\n  - service.yaml\n  - serviceaccount.yaml\n  - networkpolicy.yaml\n\ncommonLabels:\n  app: user-service\n  component: backend\n  part-of: microservices\n\nimages:\n  - name: gcr.io/PROJECT_ID/user-service\n    newTag: latest\n\nconfigMapGenerator:\n  - name: user-service-config\n    literals:\n      - PORT=3000\n      - LOG_LEVEL=info\n      - METRICS_ENABLED=true\n\nsecretGenerator:\n  - name: user-service-secrets\n    literals:\n      - database-url=placeholder\n      - jwt-secret=placeholder\n    type: Opaque\n"})}),"\n",(0,s.jsx)(n.h3,{id:"environment-overlays",children:"Environment Overlays"}),"\n",(0,s.jsx)(n.h4,{id:"production-overlay",children:"Production Overlay"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/overlays/production/kustomization.yaml\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\n\nnamespace: microservices-prod\n\nresources:\n  - ../../base\n  - hpa.yaml\n  - pdb.yaml\n  - monitoring.yaml\n\npatchesStrategicMerge:\n  - deployment-patch.yaml\n  - service-patch.yaml\n\nreplicas:\n  - name: user-service\n    count: 3\n\nimages:\n  - name: gcr.io/PROJECT_ID/user-service\n    newTag: v1.2.3\n\nconfigMapGenerator:\n  - name: user-service-config\n    behavior: merge\n    literals:\n      - LOG_LEVEL=warn\n      - METRICS_ENABLED=true\n      - CACHE_TTL=3600\n\nsecretGenerator:\n  - name: user-service-secrets\n    behavior: replace\n    files:\n      - database-url=secrets/database-url\n      - jwt-secret=secrets/jwt-secret\n"})}),"\n",(0,s.jsx)(n.h4,{id:"production-patches",children:"Production Patches"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# applications/user-service/overlays/production/deployment-patch.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  template:\n    spec:\n      containers:\n      - name: user-service\n        resources:\n          requests:\n            memory: "512Mi"\n            cpu: "500m"\n          limits:\n            memory: "1Gi"\n            cpu: "1000m"\n        env:\n        - name: NODE_ENV\n          value: production\n        - name: LOG_LEVEL\n          value: warn\n'})}),"\n",(0,s.jsx)(n.h4,{id:"horizontal-pod-autoscaler",children:"Horizontal Pod Autoscaler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/overlays/production/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: user-service-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: user-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n      - type: Pods\n        value: 4\n        periodSeconds: 15\n      selectPolicy: Max\n"})}),"\n",(0,s.jsx)(n.h2,{id:"argocd-setup-and-configuration",children:"ArgoCD Setup and Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"argocd-installation",children:"ArgoCD Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/install.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: argocd\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-install\n  namespace: argocd\ndata:\n  install.yaml: |\n    apiVersion: argoproj.io/v1alpha1\n    kind: ArgoCD\n    metadata:\n      name: argocd\n      namespace: argocd\n    spec:\n      server:\n        route:\n          enabled: false\n        ingress:\n          enabled: true\n          annotations:\n            kubernetes.io/ingress.class: nginx\n            cert-manager.io/cluster-issuer: letsencrypt-prod\n          hosts:\n          - argocd.yourdomain.com\n          tls:\n          - secretName: argocd-server-tls\n            hosts:\n            - argocd.yourdomain.com\n        config:\n          repositories: |\n            - type: git\n              url: https://github.com/your-org/gitops-microservices\n              passwordSecret:\n                name: gitops-repo-secret\n                key: password\n              usernameSecret:\n                name: gitops-repo-secret\n                key: username\n      dex:\n        openShiftOAuth: false\n      rbac:\n        defaultPolicy: 'role:readonly'\n        policy: |\n          p, role:admin, applications, *, */*, allow\n          p, role:admin, clusters, *, *, allow\n          p, role:admin, repositories, *, *, allow\n          p, role:developer, applications, get, */*, allow\n          p, role:developer, applications, sync, */*, allow\n          g, argocd-admins, role:admin\n          g, developers, role:developer\n"})}),"\n",(0,s.jsx)(n.h3,{id:"application-projects",children:"Application Projects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/projects/microservices-project.yaml\napiVersion: argoproj.io/v1alpha1\nkind: AppProject\nmetadata:\n  name: microservices\n  namespace: argocd\nspec:\n  description: Microservices applications project\n  \n  sourceRepos:\n  - 'https://github.com/your-org/gitops-microservices'\n  \n  destinations:\n  - namespace: 'microservices-*'\n    server: https://kubernetes.default.svc\n  - namespace: 'argocd'\n    server: https://kubernetes.default.svc\n  \n  clusterResourceWhitelist:\n  - group: ''\n    kind: Namespace\n  - group: rbac.authorization.k8s.io\n    kind: ClusterRole\n  - group: rbac.authorization.k8s.io\n    kind: ClusterRoleBinding\n  \n  namespaceResourceWhitelist:\n  - group: ''\n    kind: ConfigMap\n  - group: ''\n    kind: Secret\n  - group: ''\n    kind: Service\n  - group: ''\n    kind: ServiceAccount\n  - group: apps\n    kind: Deployment\n  - group: apps\n    kind: ReplicaSet\n  - group: networking.k8s.io\n    kind: Ingress\n  - group: networking.k8s.io\n    kind: NetworkPolicy\n  - group: autoscaling\n    kind: HorizontalPodAutoscaler\n  - group: policy\n    kind: PodDisruptionBudget\n  \n  roles:\n  - name: developer\n    description: Developer access to microservices\n    policies:\n    - p, proj:microservices:developer, applications, get, microservices/*, allow\n    - p, proj:microservices:developer, applications, sync, microservices/*, allow\n    - p, proj:microservices:developer, applications, action/*, microservices/*, allow\n    groups:\n    - developers\n  \n  - name: admin\n    description: Admin access to microservices\n    policies:\n    - p, proj:microservices:admin, applications, *, microservices/*, allow\n    - p, proj:microservices:admin, repositories, *, *, allow\n    groups:\n    - platform-admins\n"})}),"\n",(0,s.jsx)(n.h3,{id:"application-definitions",children:"Application Definitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/applications/user-service.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: user-service-prod\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: microservices\n  \n  source:\n    repoURL: https://github.com/your-org/gitops-microservices\n    targetRevision: HEAD\n    path: applications/user-service/overlays/production\n  \n  destination:\n    server: https://kubernetes.default.svc\n    namespace: microservices-prod\n  \n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n      allowEmpty: false\n    syncOptions:\n    - CreateNamespace=true\n    - PrunePropagationPolicy=foreground\n    - PruneLast=true\n    - RespectIgnoreDifferences=true\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n  \n  revisionHistoryLimit: 10\n  \n  ignoreDifferences:\n  - group: apps\n    kind: Deployment\n    jsonPointers:\n    - /spec/replicas\n  \n  info:\n  - name: 'Service Documentation'\n    value: 'https://docs.company.com/user-service'\n  - name: 'Runbook'\n    value: 'https://runbooks.company.com/user-service'\n"})}),"\n",(0,s.jsx)(n.h3,{id:"applicationset-for-multiple-environments",children:"ApplicationSet for Multiple Environments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/argocd/applicationsets/microservices.yaml\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: microservices\n  namespace: argocd\nspec:\n  generators:\n  - matrix:\n      generators:\n      - git:\n          repoURL: https://github.com/your-org/gitops-microservices\n          revision: HEAD\n          directories:\n          - path: applications/*/overlays/*\n      - list:\n          elements:\n          - service: user-service\n            port: 3000\n          - service: order-service\n            port: 3001\n          - service: payment-service\n            port: 3002\n          - service: notification-service\n            port: 3003\n  \n  template:\n    metadata:\n      name: '{{path.basename}}-{{path[2]}}'\n      namespace: argocd\n      finalizers:\n      - resources-finalizer.argocd.argoproj.io\n    spec:\n      project: microservices\n      source:\n        repoURL: https://github.com/your-org/gitops-microservices\n        targetRevision: HEAD\n        path: '{{path}}'\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: 'microservices-{{path[2]}}'\n      syncPolicy:\n        automated:\n          prune: true\n          selfHeal: true\n        syncOptions:\n        - CreateNamespace=true\n        - PrunePropagationPolicy=foreground\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cicd-pipeline-implementation",children:"CI/CD Pipeline Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/microservice-deploy.yml\nname: Microservice CI/CD\n\non:\n  push:\n    branches: [main, develop]\n    paths:\n    - 'services/user-service/**'\n  pull_request:\n    branches: [main]\n    paths:\n    - 'services/user-service/**'\n\nenv:\n  SERVICE_NAME: user-service\n  GCP_PROJECT: your-project-id\n  GKE_CLUSTER: microservices-cluster\n  GKE_ZONE: us-central1\n  REGISTRY: gcr.io\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n        cache-dependency-path: services/${{ env.SERVICE_NAME }}/package-lock.json\n    \n    - name: Install dependencies\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm ci\n    \n    - name: Run tests\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm run test:coverage\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: services/${{ env.SERVICE_NAME }}/coverage/lcov.info\n        flags: ${{ env.SERVICE_NAME }}\n    \n    - name: Run security audit\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        npm audit --audit-level high\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\n    outputs:\n      image-tag: ${{ steps.build.outputs.image-tag }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Google Cloud CLI\n      uses: google-github-actions/setup-gcloud@v1\n      with:\n        service_account_key: ${{ secrets.GCP_SA_KEY }}\n        project_id: ${{ env.GCP_PROJECT }}\n    \n    - name: Configure Docker for GCR\n      run: gcloud auth configure-docker\n    \n    - name: Build and push Docker image\n      id: build\n      run: |\n        cd services/${{ env.SERVICE_NAME }}\n        \n        # Generate image tag\n        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then\n          IMAGE_TAG=\"v$(date +'%Y%m%d')-${GITHUB_SHA::8}\"\n        else\n          IMAGE_TAG=\"dev-${GITHUB_SHA::8}\"\n        fi\n        \n        IMAGE_NAME=\"${REGISTRY}/${GCP_PROJECT}/${SERVICE_NAME}:${IMAGE_TAG}\"\n        \n        # Build image\n        docker build -t $IMAGE_NAME .\n        docker push $IMAGE_NAME\n        \n        echo \"image-tag=${IMAGE_TAG}\" >> $GITHUB_OUTPUT\n        echo \"image-name=${IMAGE_NAME}\" >> $GITHUB_OUTPUT\n    \n    - name: Security scan with Trivy\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: ${{ env.REGISTRY }}/${{ env.GCP_PROJECT }}/${{ env.SERVICE_NAME }}:${{ steps.build.outputs.image-tag }}\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n    \n    - name: Upload Trivy scan results\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif_file: 'trivy-results.sarif'\n\n  update-gitops:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'\n    steps:\n    - name: Checkout GitOps repository\n      uses: actions/checkout@v4\n      with:\n        repository: your-org/gitops-microservices\n        token: ${{ secrets.GITOPS_TOKEN }}\n        path: gitops\n    \n    - name: Update image tag\n      run: |\n        cd gitops\n        \n        # Determine environment\n        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then\n          ENVIRONMENT=\"production\"\n        else\n          ENVIRONMENT=\"development\"\n        fi\n        \n        # Update kustomization.yaml\n        OVERLAY_PATH=\"applications/${SERVICE_NAME}/overlays/${ENVIRONMENT}\"\n        \n        cd $OVERLAY_PATH\n        \n        # Update image tag using kustomize\n        kustomize edit set image ${REGISTRY}/${GCP_PROJECT}/${SERVICE_NAME}:${{ needs.build.outputs.image-tag }}\n    \n    - name: Commit and push changes\n      run: |\n        cd gitops\n        git config user.name \"github-actions[bot]\"\n        git config user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n        \n        git add .\n        git commit -m \"Update ${SERVICE_NAME} to ${{ needs.build.outputs.image-tag }}\"\n        git push\n    \n    - name: Create deployment PR for production\n      if: github.ref == 'refs/heads/develop'\n      uses: peter-evans/create-pull-request@v5\n      with:\n        token: ${{ secrets.GITOPS_TOKEN }}\n        path: gitops\n        branch: promote-${{ env.SERVICE_NAME }}-${{ needs.build.outputs.image-tag }}\n        title: \"Promote ${{ env.SERVICE_NAME }} to production\"\n        body: |\n          ## Promotion Request\n          \n          Service: ${{ env.SERVICE_NAME }}\n          Version: ${{ needs.build.outputs.image-tag }}\n          Commit: ${{ github.sha }}\n          \n          ### Changes\n          - Update production image tag\n          - Tested in development environment\n          \n          ### Checklist\n          - [ ] Development tests passed\n          - [ ] Security scan completed\n          - [ ] Performance validation done\n          - [ ] Runbook updated\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-specific-dockerfile",children:"Service-Specific Dockerfile"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# services/user-service/Dockerfile\nFROM node:18-alpine AS base\n\n# Install security updates and required tools\nRUN apk update && apk upgrade && apk add --no-cache dumb-init\n\n# Create app directory and user\nRUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001\nWORKDIR /app\nRUN chown nodejs:nodejs /app\n\n# Install dependencies\nFROM base AS deps\nCOPY package*.json ./\nRUN npm ci --only=production && npm cache clean --force\n\n# Build application\nFROM base AS build\nCOPY package*.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\n# Production image\nFROM base AS runtime\nUSER nodejs\n\n# Copy dependencies and built application\nCOPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules\nCOPY --from=build --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=build --chown=nodejs:nodejs /app/package*.json ./\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node ./dist/health-check.js\n\n# Expose port\nEXPOSE 3000\n\n# Run application\nENTRYPOINT ["dumb-init", "--"]\nCMD ["node", "dist/main.js"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-and-best-practices",children:"Security and Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"security-policies",children:"Security Policies"}),"\n",(0,s.jsx)(n.h4,{id:"network-policies",children:"Network Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/networkpolicy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: user-service-netpol\nspec:\n  podSelector:\n    matchLabels:\n      app: user-service\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: istio-system\n    - podSelector:\n        matchLabels:\n          app: api-gateway\n    ports:\n    - protocol: TCP\n      port: 3000\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: kube-system\n    ports:\n    - protocol: TCP\n      port: 53\n    - protocol: UDP\n      port: 53\n  - to:\n    - podSelector:\n        matchLabels:\n          app: postgres\n    ports:\n    - protocol: TCP\n      port: 5432\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 443\n"})}),"\n",(0,s.jsx)(n.h4,{id:"pod-security-standards",children:"Pod Security Standards"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# applications/user-service/base/pod-security-policy.yaml\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: user-service-psp\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  requiredDropCapabilities:\n    - ALL\n  volumes:\n    - 'configMap'\n    - 'emptyDir'\n    - 'projected'\n    - 'secret'\n    - 'downwardAPI'\n    - 'persistentVolumeClaim'\n  hostNetwork: false\n  hostIPC: false\n  hostPID: false\n  runAsUser:\n    rule: 'MustRunAsNonRoot'\n  supplementalGroups:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  fsGroup:\n    rule: 'MustRunAs'\n    ranges:\n      - min: 1\n        max: 65535\n  readOnlyRootFilesystem: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"secret-management",children:"Secret Management"}),"\n",(0,s.jsx)(n.h4,{id:"external-secrets-operator",children:"External Secrets Operator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/external-secrets/secret-store.yaml\napiVersion: external-secrets.io/v1beta1\nkind: SecretStore\nmetadata:\n  name: gcpsm-secret-store\n  namespace: microservices-prod\nspec:\n  provider:\n    gcpsm:\n      projectId: your-project-id\n      auth:\n        workloadIdentity:\n          clusterLocation: us-central1\n          clusterName: microservices-cluster\n          serviceAccountRef:\n            name: external-secrets-sa\n---\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: user-service-secrets\n  namespace: microservices-prod\nspec:\n  refreshInterval: 15s\n  secretStoreRef:\n    name: gcpsm-secret-store\n    kind: SecretStore\n  target:\n    name: user-service-secrets\n    creationPolicy: Owner\n  data:\n  - secretKey: database-url\n    remoteRef:\n      key: user-service-database-url\n  - secretKey: jwt-secret\n    remoteRef:\n      key: user-service-jwt-secret\n"})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,s.jsx)(n.h3,{id:"prometheus-servicemonitor",children:"Prometheus ServiceMonitor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# applications/user-service/base/monitoring.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: user-service\n  labels:\n    app: user-service\nspec:\n  selector:\n    matchLabels:\n      app: user-service\n  endpoints:\n  - port: http\n    path: /metrics\n    interval: 30s\n    scrapeTimeout: 10s\n---\napiVersion: monitoring.coreos.com/v1\nkind: PrometheusRule\nmetadata:\n  name: user-service-alerts\n  labels:\n    app: user-service\nspec:\n  groups:\n  - name: user-service.rules\n    rules:\n    - alert: UserServiceHighErrorRate\n      expr: |\n        (\n          rate(http_requests_total{app="user-service",code=~"5.."}[5m]) /\n          rate(http_requests_total{app="user-service"}[5m])\n        ) > 0.1\n      for: 5m\n      labels:\n        severity: warning\n        service: user-service\n      annotations:\n        summary: "High error rate for user service"\n        description: "Error rate is {{ $value | humanizePercentage }} for user service"\n    \n    - alert: UserServiceHighLatency\n      expr: |\n        histogram_quantile(0.95,\n          rate(http_request_duration_seconds_bucket{app="user-service"}[5m])\n        ) > 0.5\n      for: 5m\n      labels:\n        severity: warning\n        service: user-service\n      annotations:\n        summary: "High latency for user service"\n        description: "95th percentile latency is {{ $value }}s for user service"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"grafana-dashboard",children:"Grafana Dashboard"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Microservices Overview",\n    "panels": [\n      {\n        "title": "Request Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "sum(rate(http_requests_total{app=~\\".*-service\\"}[5m])) by (app)",\n            "legendFormat": "{{ app }}"\n          }\n        ]\n      },\n      {\n        "title": "Error Rate",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "sum(rate(http_requests_total{app=~\\".*-service\\",code=~\\"5..\\"}[5m])) by (app) / sum(rate(http_requests_total{app=~\\".*-service\\"}[5m])) by (app)",\n            "legendFormat": "{{ app }}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.h4,{id:"argocd-application-not-syncing",children:"ArgoCD Application Not Syncing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check application status\nargocd app get user-service-prod\n\n# Force sync\nargocd app sync user-service-prod\n\n# Check for differences\nargocd app diff user-service-prod\n\n# View application logs\nkubectl logs -n argocd deployment/argocd-application-controller\n"})}),"\n",(0,s.jsx)(n.h4,{id:"kustomize-build-errors",children:"Kustomize Build Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Validate kustomization\nkustomize build applications/user-service/overlays/production\n\n# Check for syntax errors\nkustomize build applications/user-service/overlays/production --enable-alpha-plugins\n\n# Debug with verbose output\nkustomize build applications/user-service/overlays/production -v 10\n"})}),"\n",(0,s.jsx)(n.h4,{id:"image-pull-errors",children:"Image Pull Errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check image exists\ngcloud container images list --repository=gcr.io/PROJECT_ID\n\n# Verify service account permissions\nkubectl describe pod POD_NAME\n\n# Check imagePullSecrets\nkubectl get secret -n NAMESPACE\n"})}),"\n",(0,s.jsx)(n.h3,{id:"debugging-commands",children:"Debugging Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# ArgoCD CLI commands\nargocd app list\nargocd app get APP_NAME\nargocd app sync APP_NAME --dry-run\nargocd app history APP_NAME\nargocd app rollback APP_NAME REVISION\n\n# Kubernetes debugging\nkubectl get applications -n argocd\nkubectl describe application APP_NAME -n argocd\nkubectl logs -f deployment/DEPLOYMENT_NAME -n NAMESPACE\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Kustomize debugging\nkustomize build PATH --enable-alpha-plugins\nkustomize edit set image IMAGE_NAME:TAG\nkustomize cfg tree PATH\n"})}),"\n",(0,s.jsx)(n.h3,{id:"health-checks-and-validation",children:"Health Checks and Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Check cluster health\nkubectl get nodes\nkubectl get pods --all-namespaces\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Validate deployments\nkubectl rollout status deployment/DEPLOYMENT_NAME -n NAMESPACE\nkubectl get hpa -n NAMESPACE\nkubectl describe service SERVICE_NAME -n NAMESPACE\n\n# Network troubleshooting\nkubectl exec -it POD_NAME -- nslookup SERVICE_NAME\nkubectl exec -it POD_NAME -- curl http://SERVICE_NAME/health\n"})}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive guide provides a complete GitOps implementation for Node.js microservices on GCP GKE using Kustomize and ArgoCD. The setup ensures security, scalability, and maintainability while following infrastructure as code principles and GitOps best practices."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},5741:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(9729);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);