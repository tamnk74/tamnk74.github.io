"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[8056],{5741:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(9729);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},7730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"architecture-practices/architecture-definition/code-quality-tools","title":"Code Quality Tools","description":"This guide provides comprehensive setup and usage instructions for code quality tools in NestJS microservices and Next.js microfrontend projects.","source":"@site/docs/architecture-practices/architecture-definition/code-quality-tools.md","sourceDirName":"architecture-practices/architecture-definition","slug":"/architecture-practices/architecture-definition/code-quality-tools","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/code-quality-tools","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-definition/code-quality-tools.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Development Use Cases Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-use-cases-guide"},"next":{"title":"Architecture Foundation","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/architecture-foundation"}}');var r=t(5813),s=t(5741);const o={},a="Code Quality Tools",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Core Quality Tools",id:"core-quality-tools",level:2},{value:"ESLint Configuration",id:"eslint-configuration",level:3},{value:"Project-wide ESLint Setup",id:"project-wide-eslint-setup",level:4},{value:"NestJS-specific ESLint Configuration",id:"nestjs-specific-eslint-configuration",level:4},{value:"Next.js ESLint Configuration",id:"nextjs-eslint-configuration",level:4},{value:"Prettier Configuration",id:"prettier-configuration",level:3},{value:"Global Prettier Configuration",id:"global-prettier-configuration",level:4},{value:"TypeScript Configuration",id:"typescript-configuration",level:3},{value:"Root TypeScript Configuration",id:"root-typescript-configuration",level:4},{value:"SonarQube Configuration",id:"sonarqube-configuration",level:3},{value:"SonarQube Project Configuration",id:"sonarqube-project-configuration",level:4},{value:"SonarQube Docker Configuration",id:"sonarqube-docker-configuration",level:4},{value:"Git Hooks Integration",id:"git-hooks-integration",level:2},{value:"Husky Configuration",id:"husky-configuration",level:3},{value:"Pre-commit Hook",id:"pre-commit-hook",level:4},{value:"Lint-staged Configuration",id:"lint-staged-configuration",level:4},{value:"Pre-push Hook",id:"pre-push-hook",level:4},{value:"IDE Integration",id:"ide-integration",level:2},{value:"VS Code Configuration",id:"vs-code-configuration",level:3},{value:"SonarLint Integration",id:"sonarlint-integration",level:3},{value:"Quality Gates and Automation",id:"quality-gates-and-automation",level:2},{value:"GitHub Actions Quality Workflow",id:"github-actions-quality-workflow",level:3},{value:"Quality Gate Configuration",id:"quality-gate-configuration",level:3},{value:"Monitoring and Reporting",id:"monitoring-and-reporting",level:2},{value:"Quality Metrics Dashboard",id:"quality-metrics-dashboard",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Quality Standards",id:"code-quality-standards",level:3},{value:"Tool Configuration",id:"tool-configuration",level:3},{value:"Team Collaboration",id:"team-collaboration",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"code-quality-tools",children:"Code Quality Tools"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides comprehensive setup and usage instructions for code quality tools in NestJS microservices and Next.js microfrontend projects."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Code quality tools are essential for maintaining consistent, secure, and maintainable code across a microservices architecture. This guide covers automated code style verification, quality analysis, and integration with development workflows."}),"\n",(0,r.jsx)(n.h2,{id:"core-quality-tools",children:"Core Quality Tools"}),"\n",(0,r.jsx)(n.h3,{id:"eslint-configuration",children:"ESLint Configuration"}),"\n",(0,r.jsx)(n.p,{children:"ESLint provides automated code style verification and catches potential bugs and anti-patterns."}),"\n",(0,r.jsx)(n.h4,{id:"project-wide-eslint-setup",children:"Project-wide ESLint Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .eslintrc.json (root level)\n{\n  "root": true,\n  "extends": [\n    "eslint:recommended",\n    "@typescript-eslint/recommended",\n    "@typescript-eslint/recommended-requiring-type-checking"\n  ],\n  "parser": "@typescript-eslint/parser",\n  "parserOptions": {\n    "project": "./tsconfig.json",\n    "tsconfigRootDir": "."\n  },\n  "plugins": ["@typescript-eslint", "import", "security"],\n  "rules": {\n    "@typescript-eslint/no-unused-vars": "error",\n    "@typescript-eslint/no-explicit-any": "warn",\n    "@typescript-eslint/explicit-function-return-type": "error",\n    "@typescript-eslint/no-unsafe-assignment": "error",\n    "@typescript-eslint/no-unsafe-member-access": "error",\n    "import/order": [\n      "error",\n      {\n        "groups": [\n          "builtin",\n          "external",\n          "internal",\n          ["parent", "sibling"],\n          "index"\n        ],\n        "newlines-between": "always",\n        "alphabetize": { "order": "asc" }\n      }\n    ],\n    "security/detect-object-injection": "warn",\n    "security/detect-non-literal-regexp": "warn"\n  },\n  "overrides": [\n    {\n      "files": ["*.spec.ts", "*.test.ts"],\n      "rules": {\n        "@typescript-eslint/no-explicit-any": "off",\n        "@typescript-eslint/no-unsafe-assignment": "off"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"nestjs-specific-eslint-configuration",children:"NestJS-specific ESLint Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// services/user-service/.eslintrc.json\n{\n  "extends": ["../../.eslintrc.json"],\n  "parserOptions": {\n    "project": "./tsconfig.json"\n  },\n  "rules": {\n    "@typescript-eslint/interface-name-prefix": "off",\n    "@typescript-eslint/explicit-function-return-type": "off",\n    "@typescript-eslint/explicit-module-boundary-types": "off",\n    "@typescript-eslint/no-explicit-any": "off"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"nextjs-eslint-configuration",children:"Next.js ESLint Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// apps/web-app/.eslintrc.json\n{\n  "extends": [\n    "../../.eslintrc.json",\n    "next/core-web-vitals",\n    "plugin:react/recommended",\n    "plugin:react-hooks/recommended"\n  ],\n  "plugins": ["react", "react-hooks", "jsx-a11y"],\n  "rules": {\n    "react/react-in-jsx-scope": "off",\n    "react/prop-types": "off",\n    "react-hooks/rules-of-hooks": "error",\n    "react-hooks/exhaustive-deps": "warn",\n    "jsx-a11y/alt-text": "error",\n    "jsx-a11y/anchor-is-valid": "error"\n  },\n  "settings": {\n    "react": {\n      "version": "detect"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"prettier-configuration",children:"Prettier Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Prettier ensures consistent code formatting across the entire codebase."}),"\n",(0,r.jsx)(n.h4,{id:"global-prettier-configuration",children:"Global Prettier Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .prettierrc\n{\n  "semi": true,\n  "trailingComma": "es5",\n  "singleQuote": true,\n  "printWidth": 100,\n  "tabWidth": 2,\n  "useTabs": false,\n  "bracketSpacing": true,\n  "bracketSameLine": false,\n  "arrowParens": "avoid",\n  "endOfLine": "lf",\n  "overrides": [\n    {\n      "files": "*.md",\n      "options": {\n        "printWidth": 80,\n        "proseWrap": "always"\n      }\n    },\n    {\n      "files": "*.json",\n      "options": {\n        "printWidth": 80\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# .prettierignore\nnode_modules\ndist\nbuild\ncoverage\n.next\n*.log\npackage-lock.json\npnpm-lock.yaml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"typescript-configuration",children:"TypeScript Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Strict TypeScript configuration for better type safety."}),"\n",(0,r.jsx)(n.h4,{id:"root-typescript-configuration",children:"Root TypeScript Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// tsconfig.json (root)\n{\n  "compilerOptions": {\n    "target": "ES2022",\n    "lib": ["ES2022"],\n    "module": "commonjs",\n    "moduleResolution": "node",\n    "declaration": true,\n    "removeComments": true,\n    "emitDecoratorMetadata": true,\n    "experimentalDecorators": true,\n    "allowSyntheticDefaultImports": true,\n    "sourceMap": true,\n    "outDir": "./dist",\n    "baseUrl": "./",\n    "incremental": true,\n    "skipLibCheck": true,\n    "strictNullChecks": true,\n    "noImplicitAny": true,\n    "strictBindCallApply": true,\n    "forceConsistentCasingInFileNames": true,\n    "noFallthroughCasesInSwitch": true,\n    "strict": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "exactOptionalPropertyTypes": true,\n    "noImplicitReturns": true,\n    "noImplicitOverride": true,\n    "paths": {\n      "@shared/*": ["./shared/src/*"],\n      "@user-service/*": ["./services/user-service/src/*"],\n      "@order-service/*": ["./services/order-service/src/*"]\n    }\n  },\n  "include": ["**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules", "dist", "build"]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sonarqube-configuration",children:"SonarQube Configuration"}),"\n",(0,r.jsx)(n.p,{children:"SonarQube provides comprehensive code quality analysis including security vulnerabilities, code smells, and technical debt."}),"\n",(0,r.jsx)(n.h4,{id:"sonarqube-project-configuration",children:"SonarQube Project Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# sonar-project.properties\nsonar.projectKey=microservices-architecture\nsonar.projectName=Microservices Architecture\nsonar.projectVersion=1.0.0\n\n# Source code settings\nsonar.sources=apps,services,shared\nsonar.tests=apps,services,shared\nsonar.test.inclusions=**/*.spec.ts,**/*.test.ts,**/*.test.tsx\nsonar.exclusions=node_modules/**,dist/**,build/**,coverage/**,.next/**\n\n# TypeScript settings\nsonar.typescript.lcov.reportPaths=coverage/lcov.info\nsonar.javascript.lcov.reportPaths=coverage/lcov.info\n\n# Language settings\nsonar.language=ts\nsonar.sourceEncoding=UTF-8\n\n# Quality gate settings\nsonar.qualitygate.wait=true\n\n# Coverage settings\nsonar.coverage.exclusions=**/*.spec.ts,**/*.test.ts,**/*.test.tsx,**/main.ts\n"})}),"\n",(0,r.jsx)(n.h4,{id:"sonarqube-docker-configuration",children:"SonarQube Docker Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# docker-compose.sonar.yml\nversion: '3.8'\nservices:\n  sonarqube:\n    image: sonarqube:community\n    container_name: sonarqube\n    ports:\n      - \"9000:9000\"\n    environment:\n      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true\n      - SONAR_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonarqube\n      - SONAR_JDBC_USERNAME=sonarqube\n      - SONAR_JDBC_PASSWORD=sonarqube_password\n    volumes:\n      - sonarqube_data:/opt/sonarqube/data\n      - sonarqube_logs:/opt/sonarqube/logs\n      - sonarqube_extensions:/opt/sonarqube/extensions\n    depends_on:\n      - sonar-db\n\n  sonar-db:\n    image: postgres:14\n    container_name: sonar-db\n    environment:\n      - POSTGRES_USER=sonarqube\n      - POSTGRES_PASSWORD=sonarqube_password\n      - POSTGRES_DB=sonarqube\n    volumes:\n      - sonar_postgresql:/var/lib/postgresql\n      - sonar_postgresql_data:/var/lib/postgresql/data\n\nvolumes:\n  sonarqube_data:\n  sonarqube_logs:\n  sonarqube_extensions:\n  sonar_postgresql:\n  sonar_postgresql_data:\n"})}),"\n",(0,r.jsx)(n.h2,{id:"git-hooks-integration",children:"Git Hooks Integration"}),"\n",(0,r.jsx)(n.h3,{id:"husky-configuration",children:"Husky Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Husky enables Git hooks to run quality checks automatically."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// package.json (scripts section)\n{\n  "scripts": {\n    "prepare": "husky install",\n    "lint": "eslint . --ext .ts,.tsx,.js,.jsx --fix",\n    "lint:check": "eslint . --ext .ts,.tsx,.js,.jsx",\n    "format": "prettier --write .",\n    "format:check": "prettier --check .",\n    "type-check": "tsc --noEmit",\n    "quality:check": "npm run lint:check && npm run format:check && npm run type-check"\n  },\n  "devDependencies": {\n    "husky": "^8.0.3",\n    "lint-staged": "^15.2.0"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"pre-commit-hook",children:"Pre-commit Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env sh\n# .husky/pre-commit\n. "$(dirname -- "$0")/_/husky.sh"\n\nnpx lint-staged\n'})}),"\n",(0,r.jsx)(n.h4,{id:"lint-staged-configuration",children:"Lint-staged Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n  "lint-staged": {\n    "*.{ts,tsx,js,jsx}": [\n      "eslint --fix",\n      "prettier --write"\n    ],\n    "*.{json,md,yml,yaml}": [\n      "prettier --write"\n    ],\n    "*.{ts,tsx}": [\n      "bash -c \'npm run type-check\'"\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"pre-push-hook",children:"Pre-push Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env sh\n# .husky/pre-push\n. "$(dirname -- "$0")/_/husky.sh"\n\n# Run tests before pushing\nnpm run test:ci\n\n# Run quality checks\nnpm run quality:check\n\n# Run security audit\nnpm audit --audit-level high\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ide-integration",children:"IDE Integration"}),"\n",(0,r.jsx)(n.h3,{id:"vs-code-configuration",children:"VS Code Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Comprehensive VS Code settings for consistent development experience."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .vscode/settings.json\n{\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true,\n    "source.organizeImports": true\n  },\n  "editor.formatOnSave": true,\n  "editor.defaultFormatter": "esbenp.prettier-vscode",\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "typescript.updateImportsOnFileMove.enabled": "always",\n  "editor.rulers": [100],\n  "files.exclude": {\n    "**/node_modules": true,\n    "**/dist": true,\n    "**/build": true,\n    "**/.next": true\n  },\n  "search.exclude": {\n    "**/node_modules": true,\n    "**/dist": true,\n    "**/build": true,\n    "**/.next": true,\n    "**/coverage": true\n  },\n  "emmet.includeLanguages": {\n    "typescript": "html",\n    "javascript": "html"\n  },\n  "typescript.suggest.autoImports": true,\n  "javascript.suggest.autoImports": true\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .vscode/extensions.json\n{\n  "recommendations": [\n    "esbenp.prettier-vscode",\n    "dbaeumer.vscode-eslint",\n    "ms-vscode.vscode-typescript-next",\n    "bradlc.vscode-tailwindcss",\n    "ms-vscode.vscode-json",\n    "redhat.vscode-yaml",\n    "ms-vscode.vscode-jest",\n    "sonarsource.sonarlint-vscode"\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sonarlint-integration",children:"SonarLint Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// .vscode/settings.json (additional settings)\n{\n  "sonarlint.rules": {\n    "typescript:S1481": "off",\n    "typescript:S1854": "off"\n  },\n  "sonarlint.connectedMode.project": {\n    "connectionId": "sonarqube-local",\n    "projectKey": "microservices-architecture"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"quality-gates-and-automation",children:"Quality Gates and Automation"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-quality-workflow",children:"GitHub Actions Quality Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/quality.yml\nname: Code Quality\n\non:\n  pull_request:\n    branches: [main, develop]\n  push:\n    branches: [main, develop]\n\njobs:\n  quality:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Type checking\n        run: npm run type-check\n\n      - name: Lint checking\n        run: npm run lint:check\n\n      - name: Format checking\n        run: npm run format:check\n\n      - name: Security audit\n        run: npm audit --audit-level high\n\n      - name: Run tests with coverage\n        run: npm run test:coverage\n\n      - name: SonarQube Scan\n        uses: sonarqube-quality-gate-action@master\n        env:\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          flags: unittests\n          name: codecov-umbrella\n"})}),"\n",(0,r.jsx)(n.h3,{id:"quality-gate-configuration",children:"Quality Gate Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// scripts/quality-gate.ts\nimport { execSync } from 'child_process';\nimport { readFileSync } from 'fs';\n\ninterface QualityMetrics {\n  coverage: number;\n  duplicatedLines: number;\n  maintainabilityRating: string;\n  reliabilityRating: string;\n  securityRating: string;\n}\n\nclass QualityGate {\n  private readonly thresholds = {\n    coverage: 80,\n    duplicatedLines: 3,\n    maintainabilityRating: 'A',\n    reliabilityRating: 'A',\n    securityRating: 'A',\n  };\n\n  async checkQuality(): Promise<void> {\n    console.log('\ud83d\udd0d Running quality gate checks...');\n\n    // Check test coverage\n    await this.checkCoverage();\n    \n    // Check linting\n    await this.checkLinting();\n    \n    // Check formatting\n    await this.checkFormatting();\n    \n    // Check type safety\n    await this.checkTypes();\n    \n    // Check security vulnerabilities\n    await this.checkSecurity();\n\n    console.log('\u2705 All quality gate checks passed!');\n  }\n\n  private async checkCoverage(): Promise<void> {\n    try {\n      execSync('npm run test:coverage', { stdio: 'inherit' });\n      \n      const coverageData = JSON.parse(\n        readFileSync('coverage/coverage-summary.json', 'utf8')\n      );\n      \n      const totalCoverage = coverageData.total.lines.pct;\n      \n      if (totalCoverage < this.thresholds.coverage) {\n        throw new Error(\n          `Coverage ${totalCoverage}% is below threshold ${this.thresholds.coverage}%`\n        );\n      }\n      \n      console.log(`\u2705 Coverage: ${totalCoverage}%`);\n    } catch (error) {\n      console.error('\u274c Coverage check failed:', error.message);\n      process.exit(1);\n    }\n  }\n\n  private async checkLinting(): Promise<void> {\n    try {\n      execSync('npm run lint:check', { stdio: 'inherit' });\n      console.log('\u2705 Linting passed');\n    } catch (error) {\n      console.error('\u274c Linting failed');\n      process.exit(1);\n    }\n  }\n\n  private async checkFormatting(): Promise<void> {\n    try {\n      execSync('npm run format:check', { stdio: 'inherit' });\n      console.log('\u2705 Formatting passed');\n    } catch (error) {\n      console.error('\u274c Formatting failed');\n      process.exit(1);\n    }\n  }\n\n  private async checkTypes(): Promise<void> {\n    try {\n      execSync('npm run type-check', { stdio: 'inherit' });\n      console.log('\u2705 Type checking passed');\n    } catch (error) {\n      console.error('\u274c Type checking failed');\n      process.exit(1);\n    }\n  }\n\n  private async checkSecurity(): Promise<void> {\n    try {\n      execSync('npm audit --audit-level high', { stdio: 'inherit' });\n      console.log('\u2705 Security audit passed');\n    } catch (error) {\n      console.error('\u274c Security audit failed');\n      process.exit(1);\n    }\n  }\n}\n\n// Run quality gate\nconst qualityGate = new QualityGate();\nqualityGate.checkQuality().catch(console.error);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-reporting",children:"Monitoring and Reporting"}),"\n",(0,r.jsx)(n.h3,{id:"quality-metrics-dashboard",children:"Quality Metrics Dashboard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/monitoring/quality-metrics.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { HttpService } from '@nestjs/axios';\n\n@Injectable()\nexport class QualityMetricsService {\n  constructor(private readonly httpService: HttpService) {}\n\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async collectQualityMetrics(): Promise<void> {\n    const metrics = await this.getSonarQubeMetrics();\n    const coverage = await this.getCoverageMetrics();\n    \n    await this.sendMetricsToMonitoring({\n      ...metrics,\n      ...coverage,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  private async getSonarQubeMetrics(): Promise<any> {\n    const response = await this.httpService\n      .get(`${process.env.SONAR_HOST_URL}/api/measures/component`, {\n        params: {\n          component: process.env.SONAR_PROJECT_KEY,\n          metricKeys: 'coverage,duplicated_lines_density,sqale_rating,reliability_rating,security_rating',\n        },\n        headers: {\n          Authorization: `Bearer ${process.env.SONAR_TOKEN}`,\n        },\n      })\n      .toPromise();\n\n    return response.data;\n  }\n\n  private async getCoverageMetrics(): Promise<any> {\n    // Read coverage data from file system\n    // Implementation depends on your coverage tool\n    return {};\n  }\n\n  private async sendMetricsToMonitoring(metrics: any): Promise<void> {\n    // Send to your monitoring system (Prometheus, DataDog, etc.)\n    console.log('Quality metrics collected:', metrics);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"code-quality-standards",children:"Code Quality Standards"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintain High Coverage"}),": Keep test coverage above 80%"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fix Issues Promptly"}),": Address lint errors and warnings immediately"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Type Safety"}),": Leverage TypeScript's strict mode"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular Audits"}),": Run security audits regularly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent Formatting"}),": Use automated formatting tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"tool-configuration",children:"Tool Configuration"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shared Configuration"}),": Use consistent tool configurations across projects"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IDE Integration"}),": Configure IDEs for optimal development experience"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automated Enforcement"}),": Use Git hooks and CI/CD for quality gates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular Updates"}),": Keep tools and configurations up to date"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"team-collaboration",children:"Team Collaboration"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quality Reviews"}),": Include code quality in PR reviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Knowledge Sharing"}),": Share quality best practices across teams"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Continuous Improvement"}),": Regularly review and improve quality processes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Training"}),": Ensure team members understand quality tools"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards",children:"Coding Standards"})})," - Code conventions and practices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-execution/cicd-pipeline",children:"CI/CD Pipeline"})})," - Automated quality gates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})})," - Tool installation and configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"This guide should be updated as new quality tools are adopted and existing tools are upgraded."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);