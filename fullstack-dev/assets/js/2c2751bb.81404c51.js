"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[6777],{3509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"security-practices/security-implementation/pii-protection","title":"Personal Identifiable Information (PII) Protection Implementation","description":"Overview","source":"@site/docs/security-practices/security-implementation/pii-protection.md","sourceDirName":"security-practices/security-implementation","slug":"/security-practices/security-implementation/pii-protection","permalink":"/fullstack-dev/docs/security-practices/security-implementation/pii-protection","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/security-practices/security-implementation/pii-protection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication and Authorization Implementation","permalink":"/fullstack-dev/docs/security-practices/security-implementation/authentication-authorization"},"next":{"title":"Sensitive System Data Protection Implementation","permalink":"/fullstack-dev/docs/security-practices/security-implementation/sensitive-data-protection"}}');var r=t(5813),s=t(7814);const a={},o="Personal Identifiable Information (PII) Protection Implementation",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Access Control Implementation",id:"access-control-implementation",level:2},{value:"1. Role-Based Access Control (RBAC)",id:"1-role-based-access-control-rbac",level:3},{value:"2. Controller Implementation",id:"2-controller-implementation",level:3},{value:"Data Masking for Non-Production",id:"data-masking-for-non-production",level:2},{value:"1. Database Migration with Data Masking",id:"1-database-migration-with-data-masking",level:3},{value:"2. Service for Data Masking",id:"2-service-for-data-masking",level:3},{value:"PII Detection and Classification",id:"pii-detection-and-classification",level:2},{value:"1. PII Detection Utility",id:"1-pii-detection-utility",level:3},{value:"2. PII Scanning Interceptor",id:"2-pii-scanning-interceptor",level:3},{value:"Encryption Implementation",id:"encryption-implementation",level:2},{value:"1. Field-Level Encryption Service",id:"1-field-level-encryption-service",level:3},{value:"2. Database Column Encryption",id:"2-database-column-encryption",level:3},{value:"Audit Logging",id:"audit-logging",level:2},{value:"1. PII Access Audit Service",id:"1-pii-access-audit-service",level:3},{value:"2. PII Access Log Entity",id:"2-pii-access-log-entity",level:3},{value:"Data Retention Policies",id:"data-retention-policies",level:2},{value:"1. Data Retention Service",id:"1-data-retention-service",level:3},{value:"GCP Integration",id:"gcp-integration",level:2},{value:"1. Secret Manager for Encryption Keys",id:"1-secret-manager-for-encryption-keys",level:3},{value:"2. Cloud KMS Integration",id:"2-cloud-kms-integration",level:3},{value:"Testing",id:"testing",level:2},{value:"1. PII Protection Tests",id:"1-pii-protection-tests",level:3},{value:"Deployment Checklist",id:"deployment-checklist",level:2},{value:"Monitoring and Alerts",id:"monitoring-and-alerts",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"personal-identifiable-information-pii-protection-implementation",children:"Personal Identifiable Information (PII) Protection Implementation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This document provides a comprehensive implementation guide for protecting Personal Identifiable Information (PII) in NestJS/Next.js applications deployed on GCP Kubernetes, ensuring compliance with GDPR, CCPA, and other privacy regulations."}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#access-control-implementation",children:"Access Control Implementation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-masking-for-non-production",children:"Data Masking for Non-Production"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#pii-detection-and-classification",children:"PII Detection and Classification"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#encryption-implementation",children:"Encryption Implementation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#audit-logging",children:"Audit Logging"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#data-retention-policies",children:"Data Retention Policies"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"access-control-implementation",children:"Access Control Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"1-role-based-access-control-rbac",children:"1. Role-Based Access Control (RBAC)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/auth/guards/pii-access.guard.ts\nimport { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlExecutionContext } from '@nestjs/graphql';\n\nexport enum PIIAccessLevel {\n  NONE = 'none',\n  READ = 'read',\n  WRITE = 'write',\n  ADMIN = 'admin'\n}\n\n@Injectable()\nexport class PIIAccessGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredLevel = this.reflector.get<PIIAccessLevel>('piiAccess', context.getHandler());\n    if (!requiredLevel) return true;\n\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n\n    if (!user) {\n      throw new ForbiddenException('Authentication required for PII access');\n    }\n\n    // Check if user has required PII access level\n    const userPIILevel = this.getUserPIIAccessLevel(user);\n    \n    if (!this.hasRequiredAccess(userPIILevel, requiredLevel)) {\n      throw new ForbiddenException(`Insufficient PII access level. Required: ${requiredLevel}`);\n    }\n\n    // Log PII access attempt\n    this.auditPIIAccess(user, requiredLevel, context);\n\n    return true;\n  }\n\n  private getUserPIIAccessLevel(user: any): PIIAccessLevel {\n    // Check user roles and permissions\n    if (user.roles.includes('pii-admin')) return PIIAccessLevel.ADMIN;\n    if (user.roles.includes('pii-write')) return PIIAccessLevel.WRITE;\n    if (user.roles.includes('pii-read')) return PIIAccessLevel.READ;\n    return PIIAccessLevel.NONE;\n  }\n\n  private hasRequiredAccess(userLevel: PIIAccessLevel, requiredLevel: PIIAccessLevel): boolean {\n    const levels = [PIIAccessLevel.NONE, PIIAccessLevel.READ, PIIAccessLevel.WRITE, PIIAccessLevel.ADMIN];\n    return levels.indexOf(userLevel) >= levels.indexOf(requiredLevel);\n  }\n\n  private auditPIIAccess(user: any, accessLevel: PIIAccessLevel, context: ExecutionContext) {\n    // Implementation in audit logging section\n  }\n}\n\n// Decorator for PII access control\nexport const RequirePIIAccess = (level: PIIAccessLevel) => \n  SetMetadata('piiAccess', level);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-controller-implementation",children:"2. Controller Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/users/users.controller.ts\nimport { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { PIIAccessGuard, RequirePIIAccess, PIIAccessLevel } from '../auth/guards/pii-access.guard';\n\n@Controller('users')\n@UseGuards(PIIAccessGuard)\nexport class UsersController {\n  \n  @Get(':id')\n  @RequirePIIAccess(PIIAccessLevel.READ)\n  async getUser(@Param('id') id: string) {\n    // This endpoint requires PII read access\n    return this.usersService.findOne(id);\n  }\n\n  @Get(':id/pii')\n  @RequirePIIAccess(PIIAccessLevel.ADMIN)\n  async getUserPII(@Param('id') id: string) {\n    // This endpoint requires PII admin access\n    return this.usersService.findPII(id);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"data-masking-for-non-production",children:"Data Masking for Non-Production"}),"\n",(0,r.jsx)(n.h3,{id:"1-database-migration-with-data-masking",children:"1. Database Migration with Data Masking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/database/migrations/mask-pii-data.migration.ts\nimport { MigrationInterface, QueryRunner } from 'typeorm';\nimport { faker } from '@faker-js/faker';\n\nexport class MaskPIIData1699000000000 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    if (process.env.NODE_ENV === 'production') {\n      console.log('Skipping PII masking in production');\n      return;\n    }\n\n    // Mask email addresses\n    await queryRunner.query(`\n      UPDATE users \n      SET email = CONCAT('user', id, '@example.com')\n      WHERE email IS NOT NULL;\n    `);\n\n    // Mask phone numbers\n    await queryRunner.query(`\n      UPDATE users \n      SET phone = CONCAT('+1555', LPAD(id, 7, '0'))\n      WHERE phone IS NOT NULL;\n    `);\n\n    // Mask names\n    await queryRunner.query(`\n      UPDATE users \n      SET \n        first_name = CONCAT('FirstName', id),\n        last_name = CONCAT('LastName', id)\n      WHERE first_name IS NOT NULL OR last_name IS NOT NULL;\n    `);\n\n    // Mask addresses\n    await queryRunner.query(`\n      UPDATE addresses \n      SET \n        street = CONCAT(id, ' Main Street'),\n        city = 'TestCity',\n        postal_code = '12345'\n      WHERE street IS NOT NULL;\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    // This migration cannot be reversed as original data is lost\n    throw new Error('Cannot reverse PII masking migration');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-service-for-data-masking",children:"2. Service for Data Masking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/services/data-masking.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { faker } from '@faker-js/faker';\n\n@Injectable()\nexport class DataMaskingService {\n  \n  maskEmail(email: string): string {\n    if (!email) return email;\n    const [, domain] = email.split('@');\n    return `user${faker.number.int()}@${domain || 'example.com'}`;\n  }\n\n  maskPhone(phone: string): string {\n    if (!phone) return phone;\n    return faker.phone.number('+1-555-###-####');\n  }\n\n  maskName(name: string): string {\n    if (!name) return name;\n    return faker.person.firstName();\n  }\n\n  maskAddress(address: any): any {\n    if (!address) return address;\n    return {\n      ...address,\n      street: faker.location.streetAddress(),\n      city: faker.location.city(),\n      postalCode: faker.location.zipCode(),\n    };\n  }\n\n  maskCreditCard(cardNumber: string): string {\n    if (!cardNumber) return cardNumber;\n    return '**** **** **** ' + cardNumber.slice(-4);\n  }\n\n  maskSSN(ssn: string): string {\n    if (!ssn) return ssn;\n    return '***-**-' + ssn.slice(-4);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pii-detection-and-classification",children:"PII Detection and Classification"}),"\n",(0,r.jsx)(n.h3,{id:"1-pii-detection-utility",children:"1. PII Detection Utility"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/utils/pii-detector.ts\nexport interface PIIField {\n  field: string;\n  type: PIIType;\n  confidence: number;\n  value?: string;\n}\n\nexport enum PIIType {\n  EMAIL = 'email',\n  PHONE = 'phone',\n  SSN = 'ssn',\n  CREDIT_CARD = 'credit_card',\n  NAME = 'name',\n  ADDRESS = 'address',\n  DOB = 'date_of_birth',\n  PASSPORT = 'passport',\n  DRIVER_LICENSE = 'driver_license'\n}\n\nexport class PIIDetector {\n  private static patterns = {\n    [PIIType.EMAIL]: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n    [PIIType.PHONE]: /(\\+?1?[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})/g,\n    [PIIType.SSN]: /\\b\\d{3}-?\\d{2}-?\\d{4}\\b/g,\n    [PIIType.CREDIT_CARD]: /\\b(?:\\d{4}[-\\s]?){3}\\d{4}\\b/g,\n  };\n\n  static detectPII(data: any, path: string = ''): PIIField[] {\n    const results: PIIField[] = [];\n\n    if (typeof data === 'string') {\n      Object.entries(this.patterns).forEach(([type, pattern]) => {\n        const matches = data.match(pattern);\n        if (matches) {\n          matches.forEach(match => {\n            results.push({\n              field: path,\n              type: type as PIIType,\n              confidence: this.calculateConfidence(match, type as PIIType),\n              value: match\n            });\n          });\n        }\n      });\n    } else if (typeof data === 'object' && data !== null) {\n      Object.entries(data).forEach(([key, value]) => {\n        const newPath = path ? `${path}.${key}` : key;\n        results.push(...this.detectPII(value, newPath));\n        \n        // Check field names for PII indicators\n        if (this.isPIIFieldName(key)) {\n          results.push({\n            field: newPath,\n            type: this.inferTypeFromFieldName(key),\n            confidence: 0.8,\n            value: typeof value === 'string' ? value : JSON.stringify(value)\n          });\n        }\n      });\n    }\n\n    return results;\n  }\n\n  private static isPIIFieldName(fieldName: string): boolean {\n    const piiFieldNames = [\n      'email', 'phone', 'ssn', 'social_security',\n      'first_name', 'last_name', 'full_name',\n      'address', 'street', 'city', 'zip',\n      'birthday', 'birth_date', 'dob',\n      'passport', 'license'\n    ];\n    \n    return piiFieldNames.some(pii => \n      fieldName.toLowerCase().includes(pii)\n    );\n  }\n\n  private static inferTypeFromFieldName(fieldName: string): PIIType {\n    const fieldLower = fieldName.toLowerCase();\n    if (fieldLower.includes('email')) return PIIType.EMAIL;\n    if (fieldLower.includes('phone')) return PIIType.PHONE;\n    if (fieldLower.includes('ssn') || fieldLower.includes('social')) return PIIType.SSN;\n    if (fieldLower.includes('name')) return PIIType.NAME;\n    if (fieldLower.includes('address') || fieldLower.includes('street')) return PIIType.ADDRESS;\n    if (fieldLower.includes('birth') || fieldLower.includes('dob')) return PIIType.DOB;\n    return PIIType.NAME; // Default\n  }\n\n  private static calculateConfidence(value: string, type: PIIType): number {\n    // Implement confidence calculation logic\n    return 0.9; // Simplified\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-pii-scanning-interceptor",children:"2. PII Scanning Interceptor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/interceptors/pii-scanning.interceptor.ts\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler, Logger } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { PIIDetector, PIIField } from '../utils/pii-detector';\n\n@Injectable()\nexport class PIIScanningInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(PIIScanningInterceptor.name);\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n    \n    // Scan request body for PII\n    if (request.body) {\n      const detectedPII = PIIDetector.detectPII(request.body);\n      if (detectedPII.length > 0) {\n        this.logPIIDetection('request', detectedPII, request);\n      }\n    }\n\n    return next.handle().pipe(\n      tap(response => {\n        // Scan response for PII\n        if (response) {\n          const detectedPII = PIIDetector.detectPII(response);\n          if (detectedPII.length > 0) {\n            this.logPIIDetection('response', detectedPII, request);\n          }\n        }\n      })\n    );\n  }\n\n  private logPIIDetection(type: 'request' | 'response', piiFields: PIIField[], request: any) {\n    this.logger.warn(`PII detected in ${type}`, {\n      endpoint: request.url,\n      method: request.method,\n      userId: request.user?.id,\n      piiFields: piiFields.map(field => ({\n        field: field.field,\n        type: field.type,\n        confidence: field.confidence\n      }))\n    });\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"encryption-implementation",children:"Encryption Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"1-field-level-encryption-service",children:"1. Field-Level Encryption Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/services/encryption.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { createCipher, createDecipher, randomBytes, scrypt } from 'crypto';\nimport { promisify } from 'util';\n\n@Injectable()\nexport class EncryptionService {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32;\n\n  async encrypt(text: string, key?: string): Promise<string> {\n    if (!text) return text;\n\n    const derivedKey = key ? await this.deriveKey(key) : await this.getDefaultKey();\n    const iv = randomBytes(16);\n    const cipher = createCipher(this.algorithm, derivedKey);\n    \n    let encrypted = cipher.update(text, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    return iv.toString('hex') + ':' + encrypted;\n  }\n\n  async decrypt(encryptedText: string, key?: string): Promise<string> {\n    if (!encryptedText) return encryptedText;\n\n    const [ivHex, encrypted] = encryptedText.split(':');\n    if (!ivHex || !encrypted) return encryptedText;\n\n    const derivedKey = key ? await this.deriveKey(key) : await this.getDefaultKey();\n    const iv = Buffer.from(ivHex, 'hex');\n    const decipher = createDecipher(this.algorithm, derivedKey);\n    \n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  }\n\n  private async deriveKey(password: string): Promise<Buffer> {\n    const salt = Buffer.from(process.env.ENCRYPTION_SALT || 'default-salt', 'utf8');\n    const scryptAsync = promisify(scrypt);\n    return scryptAsync(password, salt, this.keyLength) as Promise<Buffer>;\n  }\n\n  private async getDefaultKey(): Promise<Buffer> {\n    return this.deriveKey(process.env.ENCRYPTION_KEY || 'default-key');\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-database-column-encryption",children:"2. Database Column Encryption"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/transformers/encryption.transformer.ts\nimport { ValueTransformer } from 'typeorm';\nimport { EncryptionService } from '../services/encryption.service';\n\nexport class EncryptionTransformer implements ValueTransformer {\n  constructor(private encryptionService: EncryptionService) {}\n\n  to(value: string): Promise<string> {\n    return this.encryptionService.encrypt(value);\n  }\n\n  from(value: string): Promise<string> {\n    return this.encryptionService.decrypt(value);\n  }\n}\n\n// Usage in entity\n@Entity('users')\nexport class User {\n  @Column({\n    transformer: new EncryptionTransformer(new EncryptionService())\n  })\n  email: string;\n\n  @Column({\n    transformer: new EncryptionTransformer(new EncryptionService())\n  })\n  phone: string;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"audit-logging",children:"Audit Logging"}),"\n",(0,r.jsx)(n.h3,{id:"1-pii-access-audit-service",children:"1. PII Access Audit Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/audit/services/pii-audit.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PIIAccessLog } from '../entities/pii-access-log.entity';\n\n@Injectable()\nexport class PIIAuditService {\n  constructor(\n    @InjectRepository(PIIAccessLog)\n    private piiAccessLogRepository: Repository<PIIAccessLog>\n  ) {}\n\n  async logPIIAccess(data: {\n    userId: string;\n    action: string;\n    resource: string;\n    piiFields: string[];\n    ipAddress: string;\n    userAgent: string;\n    success: boolean;\n    reason?: string;\n  }): Promise<void> {\n    const log = this.piiAccessLogRepository.create({\n      ...data,\n      timestamp: new Date(),\n    });\n\n    await this.piiAccessLogRepository.save(log);\n  }\n\n  async getPIIAccessLogs(filters: {\n    userId?: string;\n    startDate?: Date;\n    endDate?: Date;\n    action?: string;\n  }): Promise<PIIAccessLog[]> {\n    const query = this.piiAccessLogRepository.createQueryBuilder('log');\n\n    if (filters.userId) {\n      query.andWhere('log.userId = :userId', { userId: filters.userId });\n    }\n\n    if (filters.startDate) {\n      query.andWhere('log.timestamp >= :startDate', { startDate: filters.startDate });\n    }\n\n    if (filters.endDate) {\n      query.andWhere('log.timestamp <= :endDate', { endDate: filters.endDate });\n    }\n\n    if (filters.action) {\n      query.andWhere('log.action = :action', { action: filters.action });\n    }\n\n    return query.orderBy('log.timestamp', 'DESC').getMany();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-pii-access-log-entity",children:"2. PII Access Log Entity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/audit/entities/pii-access-log.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from 'typeorm';\n\n@Entity('pii_access_logs')\nexport class PIIAccessLog {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  userId: string;\n\n  @Column()\n  action: string; // READ, WRITE, DELETE, EXPORT\n\n  @Column()\n  resource: string; // Table/endpoint accessed\n\n  @Column('simple-array')\n  piiFields: string[]; // List of PII fields accessed\n\n  @Column()\n  ipAddress: string;\n\n  @Column()\n  userAgent: string;\n\n  @Column()\n  success: boolean;\n\n  @Column({ nullable: true })\n  reason: string; // Reason for access or failure\n\n  @CreateDateColumn()\n  timestamp: Date;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"data-retention-policies",children:"Data Retention Policies"}),"\n",(0,r.jsx)(n.h3,{id:"1-data-retention-service",children:"1. Data Retention Service"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/services/data-retention.service.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThan } from 'typeorm';\n\n@Injectable()\nexport class DataRetentionService {\n  private readonly logger = new Logger(DataRetentionService.name);\n\n  constructor(\n    @InjectRepository(PIIAccessLog)\n    private piiAccessLogRepository: Repository<PIIAccessLog>,\n    // Add other repositories as needed\n  ) {}\n\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async executeRetentionPolicy(): Promise<void> {\n    this.logger.log('Starting data retention policy execution');\n\n    try {\n      // Delete PII access logs older than 2 years\n      await this.deletePIIAccessLogs(2);\n      \n      // Delete inactive user data older than 5 years\n      await this.deleteInactiveUserData(5);\n      \n      // Archive old order data\n      await this.archiveOldOrders(7);\n\n      this.logger.log('Data retention policy executed successfully');\n    } catch (error) {\n      this.logger.error('Error executing data retention policy', error);\n    }\n  }\n\n  private async deletePIIAccessLogs(yearsOld: number): Promise<void> {\n    const cutoffDate = new Date();\n    cutoffDate.setFullYear(cutoffDate.getFullYear() - yearsOld);\n\n    const result = await this.piiAccessLogRepository.delete({\n      timestamp: LessThan(cutoffDate)\n    });\n\n    this.logger.log(`Deleted ${result.affected} PII access logs older than ${yearsOld} years`);\n  }\n\n  private async deleteInactiveUserData(yearsOld: number): Promise<void> {\n    // Implementation for deleting inactive user data\n    this.logger.log(`Checking for inactive user data older than ${yearsOld} years`);\n  }\n\n  private async archiveOldOrders(yearsOld: number): Promise<void> {\n    // Implementation for archiving old orders\n    this.logger.log(`Archiving orders older than ${yearsOld} years`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"gcp-integration",children:"GCP Integration"}),"\n",(0,r.jsx)(n.h3,{id:"1-secret-manager-for-encryption-keys",children:"1. Secret Manager for Encryption Keys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/config/secret-manager.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { SecretManagerServiceClient } from '@google-cloud/secret-manager';\n\n@Injectable()\nexport class SecretManagerService {\n  private client = new SecretManagerServiceClient();\n\n  async getEncryptionKey(): Promise<string> {\n    const [version] = await this.client.accessSecretVersion({\n      name: `projects/${process.env.GCP_PROJECT_ID}/secrets/pii-encryption-key/versions/latest`,\n    });\n\n    return version.payload?.data?.toString() || '';\n  }\n\n  async rotateEncryptionKey(): Promise<void> {\n    // Implementation for key rotation\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-cloud-kms-integration",children:"2. Cloud KMS Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// src/common/services/kms-encryption.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { KeyManagementServiceClient } from '@google-cloud/kms';\n\n@Injectable()\nexport class KMSEncryptionService {\n  private client = new KeyManagementServiceClient();\n  private keyName = `projects/${process.env.GCP_PROJECT_ID}/locations/global/keyRings/pii-ring/cryptoKeys/pii-key`;\n\n  async encrypt(data: string): Promise<string> {\n    const [result] = await this.client.encrypt({\n      name: this.keyName,\n      plaintext: Buffer.from(data),\n    });\n\n    return Buffer.from(result.ciphertext!).toString('base64');\n  }\n\n  async decrypt(encryptedData: string): Promise<string> {\n    const [result] = await this.client.decrypt({\n      name: this.keyName,\n      ciphertext: Buffer.from(encryptedData, 'base64'),\n    });\n\n    return result.plaintext!.toString();\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.h3,{id:"1-pii-protection-tests",children:"1. PII Protection Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// test/pii-protection.e2e-spec.ts\nimport { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../src/app.module';\n\ndescribe('PII Protection (e2e)', () => {\n  let app: INestApplication;\n\n  beforeAll(async () => {\n    const moduleFixture = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  it('should deny access to PII without proper authorization', async () => {\n    return request(app.getHttpServer())\n      .get('/users/1/pii')\n      .expect(403);\n  });\n\n  it('should allow access to PII with proper authorization', async () => {\n    const token = 'valid-admin-token'; // Mock token\n    \n    return request(app.getHttpServer())\n      .get('/users/1/pii')\n      .set('Authorization', `Bearer ${token}`)\n      .expect(200);\n  });\n\n  it('should mask PII in non-production responses', async () => {\n    process.env.NODE_ENV = 'development';\n    \n    const response = await request(app.getHttpServer())\n      .get('/users/1')\n      .expect(200);\n\n    expect(response.body.email).toMatch(/user\\d+@example\\.com/);\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"deployment-checklist",children:"Deployment Checklist"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Environment variables configured for encryption keys"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","GCP Secret Manager secrets created"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Cloud KMS keys provisioned"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Database migrations for encryption applied"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","PII access roles defined in IAM"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Audit logging tables created"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Data retention policies configured"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Monitoring alerts set up for PII access"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Staff training on PII handling completed"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Privacy impact assessment completed"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-alerts",children:"Monitoring and Alerts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# monitoring/pii-alerts.yaml\nalerting:\n  rules:\n    - name: pii-protection\n      rules:\n        - alert: UnauthorizedPIIAccess\n          expr: increase(pii_access_denied_total[5m]) > 5\n          for: 0m\n          labels:\n            severity: critical\n          annotations:\n            summary: "Multiple unauthorized PII access attempts detected"\n            \n        - alert: PIIDataLeak\n          expr: increase(pii_detected_in_logs_total[1m]) > 0\n          for: 0m\n          labels:\n            severity: critical\n          annotations:\n            summary: "PII data detected in application logs"\n'})}),"\n",(0,r.jsx)(n.p,{children:"This implementation provides comprehensive PII protection including access controls, data masking, encryption, audit logging, and compliance with privacy regulations. Remember to regularly review and update these implementations as regulations evolve."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(9729);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);