"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7874],{7814:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(9729);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},8844:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"architecture-practices/architecture-definition/coding-standards","title":"Coding Standards & Conventions for NestJS & Next.js","description":"Overview","source":"@site/docs/architecture-practices/architecture-definition/coding-standards.md","sourceDirName":"architecture-practices/architecture-definition","slug":"/architecture-practices/architecture-definition/coding-standards","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/coding-standards","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/architecture-practices/architecture-definition/coding-standards.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Development Environment Setup for NestJS & Next.js","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup"},"next":{"title":"Development Use Cases Guide","permalink":"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-use-cases-guide"}}');var r=t(5813),o=t(7814);const i={},a="Coding Standards & Conventions for NestJS & Next.js",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Maturity Level: 1 (Foundation)",id:"maturity-level-1-foundation",level:2},{value:"NestJS Microservices Coding Standards",id:"nestjs-microservices-coding-standards",level:2},{value:"Project Structure Convention",id:"project-structure-convention",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Files and Directories",id:"files-and-directories",level:4},{value:"Classes and Variables",id:"classes-and-variables",level:4},{value:"Code Structure Standards",id:"code-structure-standards",level:3},{value:"Controller Implementation",id:"controller-implementation",level:4},{value:"Service Implementation",id:"service-implementation",level:4},{value:"DTO Implementation",id:"dto-implementation",level:4},{value:"Unit Testing Standards",id:"unit-testing-standards",level:3},{value:"Service Unit Tests",id:"service-unit-tests",level:4},{value:"Controller Unit Tests",id:"controller-unit-tests",level:4},{value:"Next.js Microfrontend Coding Standards",id:"nextjs-microfrontend-coding-standards",level:2},{value:"Project Structure Convention",id:"project-structure-convention-1",level:3},{value:"Component Implementation Standards",id:"component-implementation-standards",level:3},{value:"React Component Structure",id:"react-component-structure",level:4},{value:"Custom Hook Implementation",id:"custom-hook-implementation",level:4},{value:"Testing Standards for Next.js",id:"testing-standards-for-nextjs",level:3},{value:"Component Testing with React Testing Library",id:"component-testing-with-react-testing-library",level:4},{value:"Code Quality Tools Configuration",id:"code-quality-tools-configuration",level:2},{value:"ESLint Configuration",id:"eslint-configuration",level:3},{value:".eslintrc.js (NestJS)",id:"eslintrcjs-nestjs",level:4},{value:".eslintrc.json (Next.js)",id:"eslintrcjson-nextjs",level:4},{value:"Prettier Configuration",id:"prettier-configuration",level:3},{value:".prettierrc",id:"prettierrc",level:4},{value:"Documentation Standards",id:"documentation-standards",level:2},{value:"API Documentation with Swagger",id:"api-documentation-with-swagger",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function u(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"coding-standards--conventions-for-nestjs--nextjs",children:"Coding Standards & Conventions for NestJS & Next.js"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Comprehensive coding standards and conventions for NestJS microservices and Next.js microfrontend architecture, including unit testing practices and code examples."}),"\n",(0,r.jsx)(n.h2,{id:"maturity-level-1-foundation",children:"Maturity Level: 1 (Foundation)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Area:"})," Architecture Definition",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Practice:"})," Architecture & Coding Guidance",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Phase:"})," SETUP"]}),"\n",(0,r.jsx)(n.h2,{id:"nestjs-microservices-coding-standards",children:"NestJS Microservices Coding Standards"}),"\n",(0,r.jsx)(n.h3,{id:"project-structure-convention",children:"Project Structure Convention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"apps/user-service/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.ts                 # Application entry point\n\u2502   \u251c\u2500\u2500 app.module.ts          # Root module\n\u2502   \u251c\u2500\u2500 common/                # Shared utilities\n\u2502   \u2502   \u251c\u2500\u2500 decorators/        # Custom decorators\n\u2502   \u2502   \u251c\u2500\u2500 filters/           # Exception filters\n\u2502   \u2502   \u251c\u2500\u2500 guards/            # Authentication guards\n\u2502   \u2502   \u251c\u2500\u2500 interceptors/      # Request/response interceptors\n\u2502   \u2502   \u251c\u2500\u2500 pipes/             # Validation pipes\n\u2502   \u2502   \u2514\u2500\u2500 middleware/        # Custom middleware\n\u2502   \u251c\u2500\u2500 config/                # Configuration files\n\u2502   \u2502   \u251c\u2500\u2500 database.config.ts\n\u2502   \u2502   \u251c\u2500\u2500 redis.config.ts\n\u2502   \u2502   \u2514\u2500\u2500 app.config.ts\n\u2502   \u251c\u2500\u2500 modules/               # Feature modules\n\u2502   \u2502   \u251c\u2500\u2500 auth/              # Authentication module\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth.controller.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth.service.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth.module.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 dto/           # Data Transfer Objects\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 login.dto.ts\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 register.dto.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 entities/      # Database entities\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 user.entity.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 guards/        # Module-specific guards\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 strategies/    # Passport strategies\n\u2502   \u2502   \u2514\u2500\u2500 users/             # Users module\n\u2502   \u251c\u2500\u2500 database/              # Database related\n\u2502   \u2502   \u251c\u2500\u2500 migrations/        # TypeORM migrations\n\u2502   \u2502   \u251c\u2500\u2500 seeds/             # Database seeds\n\u2502   \u2502   \u2514\u2500\u2500 factories/         # Entity factories\n\u2502   \u2514\u2500\u2500 tests/                 # Test utilities\n\u2502       \u251c\u2500\u2500 mocks/             # Mock implementations\n\u2502       \u251c\u2500\u2500 fixtures/          # Test data\n\u2502       \u2514\u2500\u2500 helpers/           # Test helpers\n\u251c\u2500\u2500 test/                      # E2E tests\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 jest.config.js\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,r.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,r.jsx)(n.h4,{id:"files-and-directories",children:"Files and Directories"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Controllers\nuser.controller.ts\nauth.controller.ts\nproduct.controller.ts\n\n# Services\nuser.service.ts\nauth.service.ts\nemail.service.ts\n\n# Modules\nuser.module.ts\nauth.module.ts\ndatabase.module.ts\n\n# DTOs\ncreate-user.dto.ts\nupdate-user.dto.ts\nlogin-request.dto.ts\n\n# Entities\nuser.entity.ts\nproduct.entity.ts\norder.entity.ts\n\n# Interfaces\nuser.interface.ts\napi-response.interface.ts\n\n# Enums\nuser-role.enum.ts\norder-status.enum.ts\n\n# Constants\ndatabase.constants.ts\napi.constants.ts\n"})}),"\n",(0,r.jsx)(n.h4,{id:"classes-and-variables",children:"Classes and Variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Classes - PascalCase\nclass UserController {}\nclass AuthService {}\nclass CreateUserDto {}\n\n// Variables and functions - camelCase\nconst userRepository = getRepository(User);\nconst isValidEmail = (email: string) => {};\nconst getUserById = async (id: string) => {};\n\n// Constants - SCREAMING_SNAKE_CASE\nconst MAX_LOGIN_ATTEMPTS = 5;\nconst JWT_EXPIRATION_TIME = '24h';\nconst DATABASE_CONNECTION_NAME = 'default';\n\n// Interfaces - PascalCase with 'I' prefix\ninterface IUserService {}\ninterface IApiResponse<T> {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"code-structure-standards",children:"Code Structure Standards"}),"\n",(0,r.jsx)(n.h4,{id:"controller-implementation",children:"Controller Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// user.controller.ts\nimport { \n  Controller, \n  Get, \n  Post, \n  Put, \n  Delete, \n  Body, \n  Param, \n  Query,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  HttpStatus,\n  HttpCode\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { UserRole } from '../auth/enums/user-role.enum';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserListQueryDto } from './dto/user-list-query.dto';\nimport { User } from './entities/user.entity';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  @Roles(UserRole.ADMIN)\n  @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully', type: User })\n  @ApiResponse({ status: 400, description: 'Invalid input data' })\n  @ApiResponse({ status: 403, description: 'Insufficient permissions' })\n  async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  @Roles(UserRole.ADMIN, UserRole.MANAGER)\n  @ApiOperation({ summary: 'Get list of users' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully', type: [User] })\n  async getUsers(@Query() query: UserListQueryDto): Promise<User[]> {\n    return this.userService.findAll(query);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get user by ID' })\n  @ApiResponse({ status: 200, description: 'User found', type: User })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async getUserById(@Param('id') id: string): Promise<User> {\n    return this.userService.findById(id);\n  }\n\n  @Put(':id')\n  @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))\n  @ApiOperation({ summary: 'Update user' })\n  @ApiResponse({ status: 200, description: 'User updated successfully', type: User })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateUser(\n    @Param('id') id: string,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise<User> {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @Roles(UserRole.ADMIN)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete user' })\n  @ApiResponse({ status: 204, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async deleteUser(@Param('id') id: string): Promise<void> {\n    await this.userService.delete(id);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"service-implementation",children:"Service Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// user.service.ts\nimport { Injectable, NotFoundException, ConflictException, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserListQueryDto } from './dto/user-list-query.dto';\nimport { HashService } from '../common/services/hash.service';\nimport { EmailService } from '../email/email.service';\n\n@Injectable()\nexport class UserService {\n  private readonly logger = new Logger(UserService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n    private readonly hashService: HashService,\n    private readonly emailService: EmailService,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    this.logger.log(`Creating user with email: ${createUserDto.email}`);\n\n    // Check if user already exists\n    const existingUser = await this.userRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ConflictException('User with this email already exists');\n    }\n\n    // Hash password\n    const hashedPassword = await this.hashService.hash(createUserDto.password);\n\n    // Create user entity\n    const user = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    // Save user\n    const savedUser = await this.userRepository.save(user);\n\n    // Send welcome email\n    await this.emailService.sendWelcomeEmail(savedUser.email, savedUser.firstName);\n\n    this.logger.log(`User created successfully with ID: ${savedUser.id}`);\n    return savedUser;\n  }\n\n  async findAll(query: UserListQueryDto): Promise<User[]> {\n    const { page = 1, limit = 10, search, role } = query;\n    \n    const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n    if (search) {\n      queryBuilder.andWhere(\n        '(user.firstName ILIKE :search OR user.lastName ILIKE :search OR user.email ILIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    if (role) {\n      queryBuilder.andWhere('user.role = :role', { role });\n    }\n\n    const users = await queryBuilder\n      .skip((page - 1) * limit)\n      .take(limit)\n      .orderBy('user.createdAt', 'DESC')\n      .getMany();\n\n    return users;\n  }\n\n  async findById(id: string): Promise<User> {\n    const user = await this.userRepository.findOne({ where: { id } });\n    \n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    return user;\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {\n    const user = await this.findById(id);\n\n    // Hash password if provided\n    if (updateUserDto.password) {\n      updateUserDto.password = await this.hashService.hash(updateUserDto.password);\n    }\n\n    Object.assign(user, updateUserDto);\n    return this.userRepository.save(user);\n  }\n\n  async delete(id: string): Promise<void> {\n    const user = await this.findById(id);\n    await this.userRepository.remove(user);\n    this.logger.log(`User with ID ${id} deleted successfully`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"dto-implementation",children:"DTO Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// create-user.dto.ts\nimport { \n  IsEmail, \n  IsString, \n  IsEnum, \n  IsOptional, \n  MinLength, \n  MaxLength,\n  Matches,\n  IsPhoneNumber\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRole } from '../enums/user-role.enum';\n\nexport class CreateUserDto {\n  @ApiProperty({ \n    description: 'User first name',\n    example: 'John',\n    minLength: 2,\n    maxLength: 50\n  })\n  @IsString()\n  @MinLength(2)\n  @MaxLength(50)\n  firstName: string;\n\n  @ApiProperty({ \n    description: 'User last name',\n    example: 'Doe',\n    minLength: 2,\n    maxLength: 50\n  })\n  @IsString()\n  @MinLength(2)\n  @MaxLength(50)\n  lastName: string;\n\n  @ApiProperty({ \n    description: 'User email address',\n    example: 'john.doe@example.com'\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({ \n    description: 'User password',\n    example: 'StrongP@ssw0rd',\n    minLength: 8\n  })\n  @IsString()\n  @MinLength(8)\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n    { message: 'Password must contain uppercase, lowercase, number and special character' }\n  )\n  password: string;\n\n  @ApiProperty({ \n    description: 'User phone number',\n    example: '+1234567890',\n    required: false\n  })\n  @IsOptional()\n  @IsPhoneNumber()\n  phoneNumber?: string;\n\n  @ApiProperty({ \n    description: 'User role',\n    enum: UserRole,\n    default: UserRole.USER\n  })\n  @IsOptional()\n  @IsEnum(UserRole)\n  role?: UserRole = UserRole.USER;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unit-testing-standards",children:"Unit Testing Standards"}),"\n",(0,r.jsx)(n.h4,{id:"service-unit-tests",children:"Service Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// user.service.spec.ts\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { User } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { HashService } from '../common/services/hash.service';\nimport { EmailService } from '../email/email.service';\nimport { UserRole } from './enums/user-role.enum';\n\ndescribe('UserService', () => {\n  let service: UserService;\n  let userRepository: Repository<User>;\n  let hashService: HashService;\n  let emailService: EmailService;\n\n  const mockUser: User = {\n    id: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    password: 'hashedPassword',\n    role: UserRole.USER,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  const mockUserRepository = {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n    createQueryBuilder: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  const mockHashService = {\n    hash: jest.fn(),\n  };\n\n  const mockEmailService = {\n    sendWelcomeEmail: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UserService,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockUserRepository,\n        },\n        {\n          provide: HashService,\n          useValue: mockHashService,\n        },\n        {\n          provide: EmailService,\n          useValue: mockEmailService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<UserService>(UserService);\n    userRepository = module.get<Repository<User>>(getRepositoryToken(User));\n    hashService = module.get<HashService>(HashService);\n    emailService = module.get<EmailService>(EmailService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('create', () => {\n    const createUserDto: CreateUserDto = {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@example.com',\n      password: 'password123',\n      role: UserRole.USER,\n    };\n\n    it('should create a user successfully', async () => {\n      // Arrange\n      mockUserRepository.findOne.mockResolvedValue(null);\n      mockHashService.hash.mockResolvedValue('hashedPassword');\n      mockUserRepository.create.mockReturnValue(mockUser);\n      mockUserRepository.save.mockResolvedValue(mockUser);\n      mockEmailService.sendWelcomeEmail.mockResolvedValue(true);\n\n      // Act\n      const result = await service.create(createUserDto);\n\n      // Assert\n      expect(result).toEqual(mockUser);\n      expect(mockUserRepository.findOne).toHaveBeenCalledWith({\n        where: { email: createUserDto.email },\n      });\n      expect(mockHashService.hash).toHaveBeenCalledWith(createUserDto.password);\n      expect(mockUserRepository.create).toHaveBeenCalledWith({\n        ...createUserDto,\n        password: 'hashedPassword',\n      });\n      expect(mockUserRepository.save).toHaveBeenCalledWith(mockUser);\n      expect(mockEmailService.sendWelcomeEmail).toHaveBeenCalledWith(\n        mockUser.email,\n        mockUser.firstName,\n      );\n    });\n\n    it('should throw ConflictException if user already exists', async () => {\n      // Arrange\n      mockUserRepository.findOne.mockResolvedValue(mockUser);\n\n      // Act & Assert\n      await expect(service.create(createUserDto)).rejects.toThrow(ConflictException);\n      expect(mockHashService.hash).not.toHaveBeenCalled();\n      expect(mockUserRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findById', () => {\n    it('should return user if found', async () => {\n      // Arrange\n      mockUserRepository.findOne.mockResolvedValue(mockUser);\n\n      // Act\n      const result = await service.findById('1');\n\n      // Assert\n      expect(result).toEqual(mockUser);\n      expect(mockUserRepository.findOne).toHaveBeenCalledWith({ where: { id: '1' } });\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      // Arrange\n      mockUserRepository.findOne.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(service.findById('1')).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"controller-unit-tests",children:"Controller Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// user.controller.spec.ts\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserRole } from './enums/user-role.enum';\n\ndescribe('UserController', () => {\n  let controller: UserController;\n  let userService: UserService;\n\n  const mockUser: User = {\n    id: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    password: 'hashedPassword',\n    role: UserRole.USER,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  const mockUserService = {\n    create: jest.fn(),\n    findAll: jest.fn(),\n    findById: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [UserController],\n      providers: [\n        {\n          provide: UserService,\n          useValue: mockUserService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<UserController>(UserController);\n    userService = module.get<UserService>(UserService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('createUser', () => {\n    const createUserDto: CreateUserDto = {\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@example.com',\n      password: 'password123',\n      role: UserRole.USER,\n    };\n\n    it('should create a user', async () => {\n      // Arrange\n      mockUserService.create.mockResolvedValue(mockUser);\n\n      // Act\n      const result = await controller.createUser(createUserDto);\n\n      // Assert\n      expect(result).toEqual(mockUser);\n      expect(mockUserService.create).toHaveBeenCalledWith(createUserDto);\n    });\n  });\n\n  describe('getUserById', () => {\n    it('should return a user', async () => {\n      // Arrange\n      mockUserService.findById.mockResolvedValue(mockUser);\n\n      // Act\n      const result = await controller.getUserById('1');\n\n      // Assert\n      expect(result).toEqual(mockUser);\n      expect(mockUserService.findById).toHaveBeenCalledWith('1');\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"nextjs-microfrontend-coding-standards",children:"Next.js Microfrontend Coding Standards"}),"\n",(0,r.jsx)(n.h3,{id:"project-structure-convention-1",children:"Project Structure Convention"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"apps/admin-frontend/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/                   # App Router (Next.js 13+)\n\u2502   \u2502   \u251c\u2500\u2500 globals.css        # Global styles\n\u2502   \u2502   \u251c\u2500\u2500 layout.tsx         # Root layout\n\u2502   \u2502   \u251c\u2500\u2500 page.tsx           # Home page\n\u2502   \u2502   \u251c\u2500\u2500 loading.tsx        # Loading UI\n\u2502   \u2502   \u251c\u2500\u2500 error.tsx          # Error UI\n\u2502   \u2502   \u251c\u2500\u2500 not-found.tsx      # 404 page\n\u2502   \u2502   \u251c\u2500\u2500 dashboard/         # Dashboard routes\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 loading.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 users/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 [id]/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 edit/\n\u2502   \u2502   \u2502       \u2502       \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 create/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 page.tsx\n\u2502   \u2502   \u2514\u2500\u2500 api/               # API routes\n\u2502   \u2502       \u251c\u2500\u2500 auth/\n\u2502   \u2502       \u2514\u2500\u2500 users/\n\u2502   \u251c\u2500\u2500 components/            # Reusable components\n\u2502   \u2502   \u251c\u2500\u2500 ui/                # Basic UI components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 button.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 input.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 modal.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2502   \u251c\u2500\u2500 forms/             # Form components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 user-form.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 login-form.tsx\n\u2502   \u2502   \u251c\u2500\u2500 layout/            # Layout components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 header.tsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 sidebar.tsx\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 footer.tsx\n\u2502   \u2502   \u2514\u2500\u2500 features/          # Feature-specific components\n\u2502   \u2502       \u251c\u2500\u2500 auth/\n\u2502   \u2502       \u251c\u2500\u2500 users/\n\u2502   \u2502       \u2514\u2500\u2500 dashboard/\n\u2502   \u251c\u2500\u2500 hooks/                 # Custom React hooks\n\u2502   \u2502   \u251c\u2500\u2500 use-auth.ts\n\u2502   \u2502   \u251c\u2500\u2500 use-api.ts\n\u2502   \u2502   \u2514\u2500\u2500 use-local-storage.ts\n\u2502   \u251c\u2500\u2500 lib/                   # Utility libraries\n\u2502   \u2502   \u251c\u2500\u2500 api.ts             # API client\n\u2502   \u2502   \u251c\u2500\u2500 auth.ts            # Authentication\n\u2502   \u2502   \u251c\u2500\u2500 utils.ts           # General utilities\n\u2502   \u2502   \u251c\u2500\u2500 validations.ts     # Form validations\n\u2502   \u2502   \u2514\u2500\u2500 constants.ts       # Application constants\n\u2502   \u251c\u2500\u2500 store/                 # State management\n\u2502   \u2502   \u251c\u2500\u2500 auth-store.ts      # Authentication store\n\u2502   \u2502   \u251c\u2500\u2500 user-store.ts      # User management store\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 styles/                # Styling\n\u2502   \u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u2502   \u251c\u2500\u2500 components.css\n\u2502   \u2502   \u2514\u2500\u2500 tailwind.css\n\u2502   \u251c\u2500\u2500 types/                 # TypeScript type definitions\n\u2502   \u2502   \u251c\u2500\u2500 auth.types.ts\n\u2502   \u2502   \u251c\u2500\u2500 user.types.ts\n\u2502   \u2502   \u251c\u2500\u2500 api.types.ts\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 __tests__/             # Test files\n\u2502       \u251c\u2500\u2500 components/\n\u2502       \u251c\u2500\u2500 hooks/\n\u2502       \u251c\u2500\u2500 lib/\n\u2502       \u2514\u2500\u2500 pages/\n\u251c\u2500\u2500 public/                    # Static assets\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 icons/\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 next.config.js\n\u251c\u2500\u2500 tailwind.config.js\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 jest.config.js\n\u251c\u2500\u2500 jest.setup.js\n\u2514\u2500\u2500 package.json\n"})}),"\n",(0,r.jsx)(n.h3,{id:"component-implementation-standards",children:"Component Implementation Standards"}),"\n",(0,r.jsx)(n.h4,{id:"react-component-structure",children:"React Component Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// components/features/users/user-list.tsx\n\'use client\';\n\nimport React, { useState, useEffect, useCallback } from \'react\';\nimport { User, UserListQuery } from \'@/types/user.types\';\nimport { useUsers } from \'@/hooks/use-users\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { UserCard } from \'./user-card\';\nimport { LoadingSpinner } from \'@/components/ui/loading-spinner\';\nimport { ErrorMessage } from \'@/components/ui/error-message\';\n\ninterface UserListProps {\n  /**\n   * Initial search query\n   */\n  initialQuery?: string;\n  /**\n   * Number of users per page\n   * @default 10\n   */\n  pageSize?: number;\n  /**\n   * Callback when user is selected\n   */\n  onUserSelect?: (user: User) => void;\n  /**\n   * Whether to show create button\n   * @default true\n   */\n  showCreateButton?: boolean;\n}\n\nexport const UserList: React.FC<UserListProps> = ({\n  initialQuery = \'\',\n  pageSize = 10,\n  onUserSelect,\n  showCreateButton = true,\n}) => {\n  // State\n  const [query, setQuery] = useState<UserListQuery>({\n    search: initialQuery,\n    page: 1,\n    limit: pageSize,\n  });\n\n  // Custom hooks\n  const { \n    users, \n    loading, \n    error, \n    totalCount, \n    fetchUsers, \n    deleteUser \n  } = useUsers();\n\n  // Effects\n  useEffect(() => {\n    fetchUsers(query);\n  }, [query, fetchUsers]);\n\n  // Handlers\n  const handleSearch = useCallback((searchTerm: string) => {\n    setQuery(prev => ({\n      ...prev,\n      search: searchTerm,\n      page: 1, // Reset to first page\n    }));\n  }, []);\n\n  const handlePageChange = useCallback((page: number) => {\n    setQuery(prev => ({\n      ...prev,\n      page,\n    }));\n  }, []);\n\n  const handleUserDelete = useCallback(async (userId: string) => {\n    if (window.confirm(\'Are you sure you want to delete this user?\')) {\n      try {\n        await deleteUser(userId);\n        // Refresh the list\n        await fetchUsers(query);\n      } catch (error) {\n        console.error(\'Failed to delete user:\', error);\n      }\n    }\n  }, [deleteUser, fetchUsers, query]);\n\n  // Loading state\n  if (loading && users.length === 0) {\n    return <LoadingSpinner message="Loading users..." />;\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <ErrorMessage\n        title="Failed to load users"\n        message={error.message}\n        onRetry={() => fetchUsers(query)}\n      />\n    );\n  }\n\n  return (\n    <div className="user-list">\n      {/* Header */}\n      <div className="user-list__header mb-6">\n        <div className="flex justify-between items-center">\n          <h2 className="text-2xl font-bold text-gray-900">\n            Users ({totalCount})\n          </h2>\n          {showCreateButton && (\n            <Button\n              variant="primary"\n              onClick={() => router.push(\'/dashboard/users/create\')}\n            >\n              Create User\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Search */}\n      <div className="user-list__search mb-4">\n        <Input\n          type="search"\n          placeholder="Search users..."\n          value={query.search || \'\'}\n          onChange={(e) => handleSearch(e.target.value)}\n          className="max-w-md"\n        />\n      </div>\n\n      {/* User Grid */}\n      <div className="user-list__grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">\n        {users.map((user) => (\n          <UserCard\n            key={user.id}\n            user={user}\n            onSelect={onUserSelect}\n            onDelete={handleUserDelete}\n            className="hover:shadow-lg transition-shadow"\n          />\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {users.length === 0 && !loading && (\n        <div className="text-center py-12">\n          <p className="text-gray-500 text-lg">No users found</p>\n          {query.search && (\n            <Button\n              variant="secondary"\n              onClick={() => handleSearch(\'\')}\n              className="mt-4"\n            >\n              Clear Search\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Pagination */}\n      {totalCount > pageSize && (\n        <Pagination\n          currentPage={query.page || 1}\n          totalPages={Math.ceil(totalCount / pageSize)}\n          onPageChange={handlePageChange}\n          className="mt-8"\n        />\n      )}\n    </div>\n  );\n};\n\n// Default export with display name for debugging\nUserList.displayName = \'UserList\';\nexport default UserList;\n'})}),"\n",(0,r.jsx)(n.h4,{id:"custom-hook-implementation",children:"Custom Hook Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// hooks/use-users.ts\nimport { useState, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { User, UserListQuery, CreateUserData, UpdateUserData } from '@/types/user.types';\nimport { userApi } from '@/lib/api/user-api';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface UseUsersReturn {\n  // Data\n  users: User[];\n  user: User | null;\n  loading: boolean;\n  error: Error | null;\n  totalCount: number;\n  \n  // Actions\n  fetchUsers: (query?: UserListQuery) => Promise<void>;\n  fetchUser: (id: string) => Promise<void>;\n  createUser: (data: CreateUserData) => Promise<User>;\n  updateUser: (id: string, data: UpdateUserData) => Promise<User>;\n  deleteUser: (id: string) => Promise<void>;\n  \n  // State\n  isCreating: boolean;\n  isUpdating: boolean;\n  isDeleting: boolean;\n}\n\nexport const useUsers = (): UseUsersReturn => {\n  const [currentQuery, setCurrentQuery] = useState<UserListQuery>({});\n  const queryClient = useQueryClient();\n  const { showToast } = useToast();\n\n  // Queries\n  const {\n    data: usersData,\n    isLoading: usersLoading,\n    error: usersError,\n    refetch: refetchUsers,\n  } = useQuery({\n    queryKey: ['users', currentQuery],\n    queryFn: () => userApi.getUsers(currentQuery),\n    enabled: Object.keys(currentQuery).length > 0,\n  });\n\n  const {\n    data: currentUser,\n    isLoading: userLoading,\n    error: userError,\n  } = useQuery({\n    queryKey: ['user', currentQuery.id],\n    queryFn: () => userApi.getUser(currentQuery.id!),\n    enabled: !!currentQuery.id,\n  });\n\n  // Mutations\n  const createUserMutation = useMutation({\n    mutationFn: userApi.createUser,\n    onSuccess: (newUser) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      showToast({\n        title: 'Success',\n        message: 'User created successfully',\n        type: 'success',\n      });\n    },\n    onError: (error) => {\n      showToast({\n        title: 'Error',\n        message: 'Failed to create user',\n        type: 'error',\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateUserData }) =>\n      userApi.updateUser(id, data),\n    onSuccess: (updatedUser) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      queryClient.setQueryData(['user', updatedUser.id], updatedUser);\n      showToast({\n        title: 'Success',\n        message: 'User updated successfully',\n        type: 'success',\n      });\n    },\n    onError: (error) => {\n      showToast({\n        title: 'Error',\n        message: 'Failed to update user',\n        type: 'error',\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: userApi.deleteUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      showToast({\n        title: 'Success',\n        message: 'User deleted successfully',\n        type: 'success',\n      });\n    },\n    onError: (error) => {\n      showToast({\n        title: 'Error',\n        message: 'Failed to delete user',\n        type: 'error',\n      });\n    },\n  });\n\n  // Actions\n  const fetchUsers = useCallback(async (query: UserListQuery = {}) => {\n    setCurrentQuery(query);\n    await refetchUsers();\n  }, [refetchUsers]);\n\n  const fetchUser = useCallback(async (id: string) => {\n    setCurrentQuery({ id });\n  }, []);\n\n  const createUser = useCallback(async (data: CreateUserData): Promise<User> => {\n    return createUserMutation.mutateAsync(data);\n  }, [createUserMutation]);\n\n  const updateUser = useCallback(async (id: string, data: UpdateUserData): Promise<User> => {\n    return updateUserMutation.mutateAsync({ id, data });\n  }, [updateUserMutation]);\n\n  const deleteUser = useCallback(async (id: string): Promise<void> => {\n    await deleteUserMutation.mutateAsync(id);\n  }, [deleteUserMutation]);\n\n  return {\n    // Data\n    users: usersData?.users || [],\n    user: currentUser || null,\n    loading: usersLoading || userLoading,\n    error: usersError || userError,\n    totalCount: usersData?.totalCount || 0,\n    \n    // Actions\n    fetchUsers,\n    fetchUser,\n    createUser,\n    updateUser,\n    deleteUser,\n    \n    // State\n    isCreating: createUserMutation.isPending,\n    isUpdating: updateUserMutation.isPending,\n    isDeleting: deleteUserMutation.isPending,\n  };\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"testing-standards-for-nextjs",children:"Testing Standards for Next.js"}),"\n",(0,r.jsx)(n.h4,{id:"component-testing-with-react-testing-library",children:"Component Testing with React Testing Library"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// __tests__/components/user-list.test.tsx\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { UserList } from '@/components/features/users/user-list';\nimport { useUsers } from '@/hooks/use-users';\nimport { User } from '@/types/user.types';\n\n// Mock the custom hook\njest.mock('@/hooks/use-users');\n\n// Mock Next.js router\nconst mockPush = jest.fn();\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n  }),\n}));\n\nconst mockUsers: User[] = [\n  {\n    id: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    email: 'john.doe@example.com',\n    role: 'USER',\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: '2',\n    firstName: 'Jane',\n    lastName: 'Smith',\n    email: 'jane.smith@example.com',\n    role: 'ADMIN',\n    createdAt: '2023-01-02T00:00:00Z',\n    updatedAt: '2023-01-02T00:00:00Z',\n  },\n];\n\nconst mockUseUsers = useUsers as jest.MockedFunction<typeof useUsers>;\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('UserList', () => {\n  const defaultMockReturn = {\n    users: mockUsers,\n    user: null,\n    loading: false,\n    error: null,\n    totalCount: 2,\n    fetchUsers: jest.fn(),\n    fetchUser: jest.fn(),\n    createUser: jest.fn(),\n    updateUser: jest.fn(),\n    deleteUser: jest.fn(),\n    isCreating: false,\n    isUpdating: false,\n    isDeleting: false,\n  };\n\n  beforeEach(() => {\n    mockUseUsers.mockReturnValue(defaultMockReturn);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders users list correctly', () => {\n    render(<UserList />, { wrapper: createWrapper() });\n\n    expect(screen.getByText('Users (2)')).toBeInTheDocument();\n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('Jane Smith')).toBeInTheDocument();\n  });\n\n  it('shows loading state', () => {\n    mockUseUsers.mockReturnValue({\n      ...defaultMockReturn,\n      loading: true,\n      users: [],\n    });\n\n    render(<UserList />, { wrapper: createWrapper() });\n\n    expect(screen.getByText('Loading users...')).toBeInTheDocument();\n  });\n\n  it('shows error state', () => {\n    const error = new Error('Failed to fetch users');\n    mockUseUsers.mockReturnValue({\n      ...defaultMockReturn,\n      error,\n      users: [],\n    });\n\n    render(<UserList />, { wrapper: createWrapper() });\n\n    expect(screen.getByText('Failed to load users')).toBeInTheDocument();\n    expect(screen.getByText('Failed to fetch users')).toBeInTheDocument();\n  });\n\n  it('handles search input', async () => {\n    const user = userEvent.setup();\n    const mockFetchUsers = jest.fn();\n    mockUseUsers.mockReturnValue({\n      ...defaultMockReturn,\n      fetchUsers: mockFetchUsers,\n    });\n\n    render(<UserList />, { wrapper: createWrapper() });\n\n    const searchInput = screen.getByPlaceholderText('Search users...');\n    await user.type(searchInput, 'John');\n\n    await waitFor(() => {\n      expect(mockFetchUsers).toHaveBeenCalledWith({\n        search: 'John',\n        page: 1,\n        limit: 10,\n      });\n    });\n  });\n\n  it('handles user deletion', async () => {\n    const user = userEvent.setup();\n    const mockDeleteUser = jest.fn();\n    mockUseUsers.mockReturnValue({\n      ...defaultMockReturn,\n      deleteUser: mockDeleteUser,\n    });\n\n    // Mock window.confirm\n    window.confirm = jest.fn().mockReturnValue(true);\n\n    render(<UserList />, { wrapper: createWrapper() });\n\n    const deleteButton = screen.getAllByText('Delete')[0];\n    await user.click(deleteButton);\n\n    expect(window.confirm).toHaveBeenCalledWith(\n      'Are you sure you want to delete this user?'\n    );\n    expect(mockDeleteUser).toHaveBeenCalledWith('1');\n  });\n\n  it('shows empty state when no users', () => {\n    mockUseUsers.mockReturnValue({\n      ...defaultMockReturn,\n      users: [],\n      totalCount: 0,\n    });\n\n    render(<UserList />, { wrapper: createWrapper() });\n\n    expect(screen.getByText('No users found')).toBeInTheDocument();\n  });\n\n  it('shows create button by default', () => {\n    render(<UserList />, { wrapper: createWrapper() });\n\n    expect(screen.getByText('Create User')).toBeInTheDocument();\n  });\n\n  it('hides create button when showCreateButton is false', () => {\n    render(<UserList showCreateButton={false} />, { wrapper: createWrapper() });\n\n    expect(screen.queryByText('Create User')).not.toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"code-quality-tools-configuration",children:"Code Quality Tools Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"eslint-configuration",children:"ESLint Configuration"}),"\n",(0,r.jsx)(n.h4,{id:"eslintrcjs-nestjs",children:".eslintrc.js (NestJS)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: 'tsconfig.json',\n    sourceType: 'module',\n  },\n  plugins: ['@typescript-eslint/eslint-plugin'],\n  extends: [\n    '@nestjs/eslint-config-nestjs',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:prettier/recommended',\n  ],\n  root: true,\n  env: {\n    node: true,\n    jest: true,\n  },\n  ignorePatterns: ['.eslintrc.js'],\n  rules: {\n    '@typescript-eslint/interface-name-prefix': 'off',\n    '@typescript-eslint/explicit-function-return-type': 'error',\n    '@typescript-eslint/explicit-module-boundary-types': 'error',\n    '@typescript-eslint/no-explicit-any': 'error',\n    '@typescript-eslint/no-unused-vars': 'error',\n    'prefer-const': 'error',\n    'no-var': 'error',\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"eslintrcjson-nextjs",children:".eslintrc.json (Next.js)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "extends": [\n    "next/core-web-vitals",\n    "@typescript-eslint/recommended",\n    "prettier"\n  ],\n  "plugins": ["@typescript-eslint"],\n  "rules": {\n    "@typescript-eslint/no-unused-vars": "error",\n    "@typescript-eslint/explicit-function-return-type": "warn",\n    "@typescript-eslint/no-explicit-any": "error",\n    "react/prop-types": "off",\n    "react/react-in-jsx-scope": "off",\n    "prefer-const": "error",\n    "no-var": "error"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"prettier-configuration",children:"Prettier Configuration"}),"\n",(0,r.jsx)(n.h4,{id:"prettierrc",children:".prettierrc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "semi": true,\n  "trailingComma": "es5",\n  "singleQuote": true,\n  "printWidth": 100,\n  "tabWidth": 2,\n  "useTabs": false\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"documentation-standards",children:"Documentation Standards"}),"\n",(0,r.jsx)(n.h3,{id:"api-documentation-with-swagger",children:"API Documentation with Swagger"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// user.controller.ts - Complete Swagger documentation\n@ApiTags('users')\n@ApiBearerAuth()\n@Controller('users')\nexport class UserController {\n  @Post()\n  @ApiOperation({\n    summary: 'Create a new user',\n    description: 'Creates a new user with the provided information. Requires admin privileges.',\n  })\n  @ApiBody({\n    type: CreateUserDto,\n    description: 'User creation data',\n    examples: {\n      admin: {\n        summary: 'Admin user example',\n        value: {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@company.com',\n          role: 'ADMIN',\n          password: 'SecureP@ssw0rd',\n        },\n      },\n      user: {\n        summary: 'Regular user example',\n        value: {\n          firstName: 'Jane',\n          lastName: 'Smith',\n          email: 'jane.smith@company.com',\n          role: 'USER',\n          password: 'MyP@ssw0rd123',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: User,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid input data',\n    schema: {\n      example: {\n        statusCode: 400,\n        message: ['email must be a valid email'],\n        error: 'Bad Request',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'User already exists',\n    schema: {\n      example: {\n        statusCode: 409,\n        message: 'User with this email already exists',\n        error: 'Conflict',\n      },\n    },\n  })\n  async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {\n    return this.userService.create(createUserDto);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/scm-policy",children:"SCM Policy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-environment-setup",children:"Development Environment Setup"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next Steps:"})," After establishing coding standards, proceed to ",(0,r.jsx)(n.a,{href:"/fullstack-dev/docs/architecture-practices/architecture-definition/dev-use-cases-guide",children:"Development Use Cases Guide"})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);