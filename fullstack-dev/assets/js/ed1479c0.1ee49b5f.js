"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[302],{4281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"features/notifications/realtime-notifications-guide","title":"Real-time Notification Application with Node.js, Next.js, FCM & GKE","description":"This comprehensive guide walks you through building a production-ready real-time notification system using modern technologies and deploying it to Google Kubernetes Engine (GKE).","source":"@site/docs/features/notifications/realtime-notifications-guide.md","sourceDirName":"features/notifications","slug":"/features/notifications/realtime-notifications-guide","permalink":"/fullstack-dev/docs/features/notifications/realtime-notifications-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/features/notifications/realtime-notifications-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Geo-targeting Implementation Guide","permalink":"/fullstack-dev/docs/features/cookie-consent/geo-targeting-implementation"},"next":{"title":"GitOps Microservices Deployment Guide: Node.js on GCP GKE with Kustomize and ArgoCD","permalink":"/fullstack-dev/docs/devops/gitops-microservices-gcp-guide"}}');var s=t(5813),o=t(7814);const a={},r="Real-time Notification Application with Node.js, Next.js, FCM & GKE",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Part 1: Backend Development (Node.js + Express + Socket.IO)",id:"part-1-backend-development-nodejs--express--socketio",level:2},{value:"1.1 Project Setup",id:"11-project-setup",level:3},{value:"1.2 Backend Server Implementation",id:"12-backend-server-implementation",level:3},{value:"1.3 Firebase FCM Service",id:"13-firebase-fcm-service",level:3},{value:"1.4 Redis Service for Scaling",id:"14-redis-service-for-scaling",level:3},{value:"1.5 Socket.IO Handlers",id:"15-socketio-handlers",level:3},{value:"1.6 API Routes",id:"16-api-routes",level:3},{value:"1.7 Environment Configuration",id:"17-environment-configuration",level:3},{value:"Part 2: Frontend Development (Next.js)",id:"part-2-frontend-development-nextjs",level:2},{value:"2.1 Frontend Setup",id:"21-frontend-setup",level:3},{value:"2.2 Firebase Configuration",id:"22-firebase-configuration",level:3},{value:"2.3 Socket.IO Hook",id:"23-socketio-hook",level:3},{value:"2.4 Main App Component",id:"24-main-app-component",level:3},{value:"2.5 Service Worker for FCM",id:"25-service-worker-for-fcm",level:3},{value:"Part 3: Containerization",id:"part-3-containerization",level:2},{value:"3.1 Backend Dockerfile",id:"31-backend-dockerfile",level:3},{value:"3.2 Frontend Dockerfile",id:"32-frontend-dockerfile",level:3},{value:"Part 4: Kubernetes Deployment (GKE)",id:"part-4-kubernetes-deployment-gke",level:2},{value:"4.1 Redis Deployment",id:"41-redis-deployment",level:3},{value:"4.2 Backend Deployment",id:"42-backend-deployment",level:3},{value:"4.3 Frontend Deployment",id:"43-frontend-deployment",level:3},{value:"4.4 Secrets Configuration",id:"44-secrets-configuration",level:3},{value:"Part 5: Deployment Scripts",id:"part-5-deployment-scripts",level:2},{value:"5.1 Build and Deploy Script",id:"51-build-and-deploy-script",level:3},{value:"5.2 Local Development Script",id:"52-local-development-script",level:3},{value:"Part 6: Monitoring and Scaling",id:"part-6-monitoring-and-scaling",level:2},{value:"6.1 Horizontal Pod Autoscaler",id:"61-horizontal-pod-autoscaler",level:3},{value:"6.2 Monitoring Setup",id:"62-monitoring-setup",level:3},{value:"Part 7: Testing and Validation",id:"part-7-testing-and-validation",level:2},{value:"7.1 Load Testing Script",id:"71-load-testing-script",level:3},{value:"7.2 Health Check Script",id:"72-health-check-script",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Features Implemented:",id:"key-features-implemented",level:3},{value:"Next Steps:",id:"next-steps",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"real-time-notification-application-with-nodejs-nextjs-fcm--gke",children:"Real-time Notification Application with Node.js, Next.js, FCM & GKE"})}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive guide walks you through building a production-ready real-time notification system using modern technologies and deploying it to Google Kubernetes Engine (GKE)."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"We'll build a complete notification system that includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend"}),": Node.js/Express API server with Socket.IO for real-time connections"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Frontend"}),": Next.js application with push notifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Push Notifications"}),": Firebase Cloud Messaging (FCM) integration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time Communication"}),": WebSocket connections via Socket.IO"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment"}),": Container orchestration on Google Kubernetes Engine"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Next.js App   \u2502    \u2502   Node.js API   \u2502    \u2502   Firebase FCM  \u2502\n\u2502   (Frontend)    \u2502\u25c4\u2500\u2500\u25ba\u2502   (Backend)     \u2502\u25c4\u2500\u2500\u25ba\u2502   (Push Notify) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502\n         \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502   Socket.IO     \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                        \u2502   (WebSocket)   \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502   Google GKE    \u2502\n                        \u2502   (Kubernetes)  \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Node.js 18+ and npm/yarn"}),"\n",(0,s.jsx)(n.li,{children:"Docker Desktop"}),"\n",(0,s.jsx)(n.li,{children:"Google Cloud Platform account"}),"\n",(0,s.jsx)(n.li,{children:"Firebase project setup"}),"\n",(0,s.jsx)(n.li,{children:"Basic knowledge of React, Node.js, and Kubernetes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"part-1-backend-development-nodejs--express--socketio",children:"Part 1: Backend Development (Node.js + Express + Socket.IO)"}),"\n",(0,s.jsx)(n.h3,{id:"11-project-setup",children:"1.1 Project Setup"}),"\n",(0,s.jsx)(n.p,{children:"Create the backend project structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir realtime-notifications\ncd realtime-notifications\nmkdir backend frontend k8s\ncd backend\n"})}),"\n",(0,s.jsx)(n.p,{children:"Initialize the Node.js project:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm init -y\nnpm install express socket.io cors dotenv\nnpm install firebase-admin\nnpm install redis ioredis\nnpm install @google-cloud/logging\nnpm install --save-dev nodemon typescript @types/node @types/express\n"})}),"\n",(0,s.jsx)(n.h3,{id:"12-backend-server-implementation",children:"1.2 Backend Server Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/index.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import express from 'express';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport { initializeFirebase } from './services/firebase';\nimport { initializeRedis } from './services/redis';\nimport { notificationRoutes } from './routes/notifications';\nimport { setupSocketHandlers } from './socket/handlers';\n\ndotenv.config();\n\nconst app = express();\nconst httpServer = createServer(app);\nconst io = new Server(httpServer, {\n  cors: {\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Initialize services\ninitializeFirebase();\nconst redisClient = initializeRedis();\n\n// Routes\napp.use('/api/notifications', notificationRoutes);\n\n// Socket.IO handlers\nsetupSocketHandlers(io, redisClient);\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'healthy', timestamp: new Date().toISOString() });\n});\n\nconst PORT = process.env.PORT || 5000;\nhttpServer.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"13-firebase-fcm-service",children:"1.3 Firebase FCM Service"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/services/firebase.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import admin from 'firebase-admin';\n\nexport const initializeFirebase = () => {\n  if (!admin.apps.length) {\n    admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n      }),\n    });\n  }\n};\n\nexport interface NotificationPayload {\n  title: string;\n  body: string;\n  data?: Record<string, string>;\n  token?: string;\n  tokens?: string[];\n  topic?: string;\n}\n\nexport const sendPushNotification = async (payload: NotificationPayload) => {\n  try {\n    const message: admin.messaging.Message = {\n      notification: {\n        title: payload.title,\n        body: payload.body,\n      },\n      data: payload.data || {},\n    };\n\n    let result;\n    \n    if (payload.token) {\n      message.token = payload.token;\n      result = await admin.messaging().send(message);\n    } else if (payload.tokens && payload.tokens.length > 0) {\n      const multicastMessage: admin.messaging.MulticastMessage = {\n        ...message,\n        tokens: payload.tokens,\n      };\n      result = await admin.messaging().sendMulticast(multicastMessage);\n    } else if (payload.topic) {\n      message.topic = payload.topic;\n      result = await admin.messaging().send(message);\n    }\n\n    console.log('Successfully sent message:', result);\n    return result;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"14-redis-service-for-scaling",children:"1.4 Redis Service for Scaling"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/services/redis.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import Redis from 'ioredis';\n\nexport const initializeRedis = () => {\n  const redis = new Redis({\n    host: process.env.REDIS_HOST || 'localhost',\n    port: parseInt(process.env.REDIS_PORT || '6379'),\n    retryDelayOnFailover: 100,\n    lazyConnect: true,\n  });\n\n  redis.on('connect', () => {\n    console.log('Connected to Redis');\n  });\n\n  redis.on('error', (err) => {\n    console.error('Redis connection error:', err);\n  });\n\n  return redis;\n};\n\nexport const storeUserSession = async (redis: Redis, userId: string, socketId: string) => {\n  await redis.setex(`user:${userId}`, 3600, socketId);\n};\n\nexport const getUserSession = async (redis: Redis, userId: string): Promise<string | null> => {\n  return await redis.get(`user:${userId}`);\n};\n\nexport const removeUserSession = async (redis: Redis, userId: string) => {\n  await redis.del(`user:${userId}`);\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"15-socketio-handlers",children:"1.5 Socket.IO Handlers"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/socket/handlers.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Server, Socket } from 'socket.io';\nimport Redis from 'ioredis';\nimport { storeUserSession, removeUserSession } from '../services/redis';\nimport { sendPushNotification } from '../services/firebase';\n\ninterface AuthenticatedSocket extends Socket {\n  userId?: string;\n}\n\nexport const setupSocketHandlers = (io: Server, redis: Redis) => {\n  io.on('connection', (socket: AuthenticatedSocket) => {\n    console.log('User connected:', socket.id);\n\n    // Handle user authentication\n    socket.on('authenticate', async (data: { userId: string; fcmToken?: string }) => {\n      socket.userId = data.userId;\n      await storeUserSession(redis, data.userId, socket.id);\n      \n      // Store FCM token for push notifications\n      if (data.fcmToken) {\n        await redis.setex(`fcm:${data.userId}`, 86400, data.fcmToken);\n      }\n      \n      socket.join(`user:${data.userId}`);\n      socket.emit('authenticated', { userId: data.userId });\n      console.log(`User ${data.userId} authenticated`);\n    });\n\n    // Handle sending notifications\n    socket.on('sendNotification', async (data: {\n      recipientId: string;\n      title: string;\n      body: string;\n      type: 'realtime' | 'push' | 'both';\n      data?: Record<string, any>;\n    }) => {\n      const { recipientId, title, body, type, data: notificationData } = data;\n\n      try {\n        // Send real-time notification via Socket.IO\n        if (type === 'realtime' || type === 'both') {\n          io.to(`user:${recipientId}`).emit('notification', {\n            id: Date.now().toString(),\n            title,\n            body,\n            data: notificationData,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        // Send push notification via FCM\n        if (type === 'push' || type === 'both') {\n          const fcmToken = await redis.get(`fcm:${recipientId}`);\n          if (fcmToken) {\n            await sendPushNotification({\n              title,\n              body,\n              token: fcmToken,\n              data: notificationData ? JSON.stringify(notificationData) : undefined,\n            });\n          }\n        }\n\n        socket.emit('notificationSent', { success: true });\n      } catch (error) {\n        console.error('Error sending notification:', error);\n        socket.emit('notificationSent', { success: false, error: error.message });\n      }\n    });\n\n    // Handle disconnect\n    socket.on('disconnect', async () => {\n      if (socket.userId) {\n        await removeUserSession(redis, socket.userId);\n        console.log(`User ${socket.userId} disconnected`);\n      }\n    });\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"16-api-routes",children:"1.6 API Routes"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/routes/notifications.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Router } from 'express';\nimport { sendPushNotification } from '../services/firebase';\n\nconst router = Router();\n\nrouter.post('/send', async (req, res) => {\n  try {\n    const { title, body, token, tokens, topic, data } = req.body;\n\n    if (!title || !body) {\n      return res.status(400).json({ error: 'Title and body are required' });\n    }\n\n    if (!token && !tokens && !topic) {\n      return res.status(400).json({ error: 'At least one of token, tokens, or topic is required' });\n    }\n\n    const result = await sendPushNotification({\n      title,\n      body,\n      token,\n      tokens,\n      topic,\n      data,\n    });\n\n    res.json({ success: true, result });\n  } catch (error) {\n    console.error('Error sending notification:', error);\n    res.status(500).json({ error: 'Failed to send notification' });\n  }\n});\n\nrouter.post('/subscribe-topic', async (req, res) => {\n  try {\n    const { tokens, topic } = req.body;\n\n    if (!tokens || !topic) {\n      return res.status(400).json({ error: 'Tokens and topic are required' });\n    }\n\n    const result = await admin.messaging().subscribeToTopic(tokens, topic);\n    res.json({ success: true, result });\n  } catch (error) {\n    console.error('Error subscribing to topic:', error);\n    res.status(500).json({ error: 'Failed to subscribe to topic' });\n  }\n});\n\nexport { router as notificationRoutes };\n"})}),"\n",(0,s.jsx)(n.h3,{id:"17-environment-configuration",children:"1.7 Environment Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:'PORT=5000\nFRONTEND_URL=http://localhost:3000\nREDIS_HOST=localhost\nREDIS_PORT=6379\n\n# Firebase Configuration\nFIREBASE_PROJECT_ID=your-project-id\nFIREBASE_CLIENT_EMAIL=your-client-email\nFIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n"\n\n# Google Cloud (for GKE deployment)\nGOOGLE_CLOUD_PROJECT=your-gcp-project\n'})}),"\n",(0,s.jsx)(n.h2,{id:"part-2-frontend-development-nextjs",children:"Part 2: Frontend Development (Next.js)"}),"\n",(0,s.jsx)(n.h3,{id:"21-frontend-setup",children:"2.1 Frontend Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../frontend\nnpx create-next-app@latest . --typescript --tailwind --eslint --app\nnpm install socket.io-client firebase\n"})}),"\n",(0,s.jsx)(n.h3,{id:"22-firebase-configuration",children:"2.2 Firebase Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/lib/firebase.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { initializeApp } from 'firebase/app';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\nconst firebaseConfig = {\n  // Your Firebase config\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const messaging = typeof window !== 'undefined' ? getMessaging(app) : null;\n\nexport const getFCMToken = async (): Promise<string | null> => {\n  if (!messaging) return null;\n  \n  try {\n    const token = await getToken(messaging, {\n      vapidKey: process.env.NEXT_PUBLIC_FIREBASE_VAPID_KEY,\n    });\n    return token;\n  } catch (error) {\n    console.error('Error getting FCM token:', error);\n    return null;\n  }\n};\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    if (!messaging) return;\n    \n    onMessage(messaging, (payload) => {\n      resolve(payload);\n    });\n  });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"23-socketio-hook",children:"2.3 Socket.IO Hook"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/hooks/useSocket.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { useEffect, useRef, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface Notification {\n  id: string;\n  title: string;\n  body: string;\n  data?: any;\n  timestamp: string;\n}\n\nexport const useSocket = (serverUrl: string, userId?: string) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const socketRef = useRef<Socket | null>(null);\n\n  useEffect(() => {\n    if (!userId) return;\n\n    const socketInstance = io(serverUrl);\n    socketRef.current = socketInstance;\n    setSocket(socketInstance);\n\n    socketInstance.on('connect', () => {\n      setConnected(true);\n      console.log('Connected to server');\n    });\n\n    socketInstance.on('disconnect', () => {\n      setConnected(false);\n      console.log('Disconnected from server');\n    });\n\n    socketInstance.on('authenticated', (data) => {\n      console.log('Authenticated:', data);\n    });\n\n    socketInstance.on('notification', (notification: Notification) => {\n      setNotifications((prev) => [notification, ...prev]);\n      \n      // Show browser notification if permission granted\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification(notification.title, {\n          body: notification.body,\n          icon: '/icon-192x192.png',\n        });\n      }\n    });\n\n    return () => {\n      socketInstance.disconnect();\n      socketRef.current = null;\n    };\n  }, [serverUrl, userId]);\n\n  const authenticate = async (fcmToken?: string) => {\n    if (socket && userId) {\n      socket.emit('authenticate', { userId, fcmToken });\n    }\n  };\n\n  const sendNotification = (data: {\n    recipientId: string;\n    title: string;\n    body: string;\n    type: 'realtime' | 'push' | 'both';\n    data?: any;\n  }) => {\n    if (socket) {\n      socket.emit('sendNotification', data);\n    }\n  };\n\n  return {\n    socket,\n    connected,\n    notifications,\n    authenticate,\n    sendNotification,\n    clearNotifications: () => setNotifications([]),\n  };\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"24-main-app-component",children:"2.4 Main App Component"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"src/app/page.tsx"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'\'use client\';\n\nimport { useEffect, useState } from \'react\';\nimport { useSocket } from \'@/hooks/useSocket\';\nimport { getFCMToken } from \'@/lib/firebase\';\n\nexport default function Home() {\n  const [userId, setUserId] = useState(\'\');\n  const [fcmToken, setFcmToken] = useState<string | null>(null);\n  const [recipientId, setRecipientId] = useState(\'\');\n  const [notificationTitle, setNotificationTitle] = useState(\'\');\n  const [notificationBody, setNotificationBody] = useState(\'\');\n  const [notificationType, setNotificationType] = useState<\'realtime\' | \'push\' | \'both\'>(\'both\');\n\n  const { connected, notifications, authenticate, sendNotification, clearNotifications } = useSocket(\n    process.env.NEXT_PUBLIC_BACKEND_URL || \'http://localhost:5000\',\n    userId\n  );\n\n  useEffect(() => {\n    // Request notification permission\n    if (\'Notification\' in window && Notification.permission === \'default\') {\n      Notification.requestPermission();\n    }\n\n    // Get FCM token\n    getFCMToken().then(setFcmToken);\n  }, []);\n\n  const handleLogin = () => {\n    if (userId.trim()) {\n      authenticate(fcmToken || undefined);\n    }\n  };\n\n  const handleSendNotification = () => {\n    if (recipientId && notificationTitle && notificationBody) {\n      sendNotification({\n        recipientId,\n        title: notificationTitle,\n        body: notificationBody,\n        type: notificationType,\n      });\n      \n      // Clear form\n      setRecipientId(\'\');\n      setNotificationTitle(\'\');\n      setNotificationBody(\'\');\n    }\n  };\n\n  return (\n    <div className="min-h-screen bg-gray-100 p-8">\n      <div className="max-w-4xl mx-auto">\n        <h1 className="text-3xl font-bold text-center mb-8">Real-time Notifications Demo</h1>\n        \n        {/* Connection Status */}\n        <div className="bg-white rounded-lg shadow p-6 mb-6">\n          <h2 className="text-xl font-semibold mb-4">Connection Status</h2>\n          <div className="flex items-center space-x-4">\n            <div className={`w-4 h-4 rounded-full ${connected ? \'bg-green-500\' : \'bg-red-500\'}`}></div>\n            <span>{connected ? \'Connected\' : \'Disconnected\'}</span>\n          </div>\n          {fcmToken && (\n            <div className="mt-4">\n              <p className="text-sm text-gray-600">FCM Token: {fcmToken.substring(0, 50)}...</p>\n            </div>\n          )}\n        </div>\n\n        {/* Login */}\n        {!connected && (\n          <div className="bg-white rounded-lg shadow p-6 mb-6">\n            <h2 className="text-xl font-semibold mb-4">Login</h2>\n            <div className="flex space-x-4">\n              <input\n                type="text"\n                placeholder="Enter your user ID"\n                value={userId}\n                onChange={(e) => setUserId(e.target.value)}\n                className="flex-1 px-4 py-2 border rounded-lg"\n              />\n              <button\n                onClick={handleLogin}\n                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"\n              >\n                Connect\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Send Notification */}\n        {connected && (\n          <div className="bg-white rounded-lg shadow p-6 mb-6">\n            <h2 className="text-xl font-semibold mb-4">Send Notification</h2>\n            <div className="space-y-4">\n              <input\n                type="text"\n                placeholder="Recipient User ID"\n                value={recipientId}\n                onChange={(e) => setRecipientId(e.target.value)}\n                className="w-full px-4 py-2 border rounded-lg"\n              />\n              <input\n                type="text"\n                placeholder="Notification Title"\n                value={notificationTitle}\n                onChange={(e) => setNotificationTitle(e.target.value)}\n                className="w-full px-4 py-2 border rounded-lg"\n              />\n              <textarea\n                placeholder="Notification Body"\n                value={notificationBody}\n                onChange={(e) => setNotificationBody(e.target.value)}\n                className="w-full px-4 py-2 border rounded-lg h-24"\n              />\n              <select\n                value={notificationType}\n                onChange={(e) => setNotificationType(e.target.value as any)}\n                className="w-full px-4 py-2 border rounded-lg"\n              >\n                <option value="realtime">Real-time Only</option>\n                <option value="push">Push Only</option>\n                <option value="both">Both</option>\n              </select>\n              <button\n                onClick={handleSendNotification}\n                className="w-full px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"\n              >\n                Send Notification\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Notifications */}\n        <div className="bg-white rounded-lg shadow p-6">\n          <div className="flex justify-between items-center mb-4">\n            <h2 className="text-xl font-semibold">Notifications ({notifications.length})</h2>\n            {notifications.length > 0 && (\n              <button\n                onClick={clearNotifications}\n                className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600"\n              >\n                Clear All\n              </button>\n            )}\n          </div>\n          <div className="space-y-4 max-h-96 overflow-y-auto">\n            {notifications.length === 0 ? (\n              <p className="text-gray-500 text-center py-8">No notifications yet</p>\n            ) : (\n              notifications.map((notification) => (\n                <div key={notification.id} className="border rounded-lg p-4 bg-gray-50">\n                  <h3 className="font-semibold">{notification.title}</h3>\n                  <p className="text-gray-700">{notification.body}</p>\n                  <p className="text-sm text-gray-500 mt-2">\n                    {new Date(notification.timestamp).toLocaleString()}\n                  </p>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"25-service-worker-for-fcm",children:"2.5 Service Worker for FCM"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"public/firebase-messaging-sw.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'importScripts(\'https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js\');\nimportScripts(\'https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js\');\n\nfirebase.initializeApp({\n  // Your Firebase config\n  apiKey: "your-api-key",\n  authDomain: "your-auth-domain",\n  projectId: "your-project-id",\n  storageBucket: "your-storage-bucket",\n  messagingSenderId: "your-messaging-sender-id",\n  appId: "your-app-id"\n});\n\nconst messaging = firebase.messaging();\n\nmessaging.onBackgroundMessage((payload) => {\n  console.log(\'Received background message \', payload);\n  \n  const notificationTitle = payload.notification.title;\n  const notificationOptions = {\n    body: payload.notification.body,\n    icon: \'/icon-192x192.png\',\n    badge: \'/badge-72x72.png\'\n  };\n\n  self.registration.showNotification(notificationTitle, notificationOptions);\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"part-3-containerization",children:"Part 3: Containerization"}),"\n",(0,s.jsx)(n.h3,{id:"31-backend-dockerfile",children:"3.1 Backend Dockerfile"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"backend/Dockerfile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Build TypeScript\nRUN npm run build\n\nEXPOSE 5000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"backend/package.json"})," scripts:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "start": "node dist/index.js",\n    "build": "tsc",\n    "dev": "nodemon src/index.ts"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"32-frontend-dockerfile",children:"3.2 Frontend Dockerfile"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"frontend/Dockerfile"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci\n\nCOPY . .\nRUN npm run build\n\nFROM node:18-alpine AS runner\n\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\nENV PORT 3000\n\nCMD ["node", "server.js"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"part-4-kubernetes-deployment-gke",children:"Part 4: Kubernetes Deployment (GKE)"}),"\n",(0,s.jsx)(n.h3,{id:"41-redis-deployment",children:"4.1 Redis Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/redis.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  labels:\n    app: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: "64Mi"\n            cpu: "50m"\n          limits:\n            memory: "128Mi"\n            cpu: "100m"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-service\nspec:\n  selector:\n    app: redis\n  ports:\n  - port: 6379\n    targetPort: 6379\n'})}),"\n",(0,s.jsx)(n.h3,{id:"42-backend-deployment",children:"4.2 Backend Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/backend.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\n  labels:\n    app: backend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: gcr.io/YOUR_PROJECT_ID/notifications-backend:latest\n        ports:\n        - containerPort: 5000\n        env:\n        - name: PORT\n          value: "5000"\n        - name: REDIS_HOST\n          value: "redis-service"\n        - name: REDIS_PORT\n          value: "6379"\n        - name: FIREBASE_PROJECT_ID\n          valueFrom:\n            secretKeyRef:\n              name: firebase-secrets\n              key: project-id\n        - name: FIREBASE_CLIENT_EMAIL\n          valueFrom:\n            secretKeyRef:\n              name: firebase-secrets\n              key: client-email\n        - name: FIREBASE_PRIVATE_KEY\n          valueFrom:\n            secretKeyRef:\n              name: firebase-secrets\n              key: private-key\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "100m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 5000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 5000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 80\n    targetPort: 5000\n  type: LoadBalancer\n'})}),"\n",(0,s.jsx)(n.h3,{id:"43-frontend-deployment",children:"4.3 Frontend Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/frontend.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: gcr.io/YOUR_PROJECT_ID/notifications-frontend:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NEXT_PUBLIC_BACKEND_URL\n          value: "http://BACKEND_EXTERNAL_IP"\n        - name: NEXT_PUBLIC_FIREBASE_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: firebase-frontend-secrets\n              key: api-key\n        - name: NEXT_PUBLIC_FIREBASE_PROJECT_ID\n          valueFrom:\n            secretKeyRef:\n              name: firebase-frontend-secrets\n              key: project-id\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "100m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: LoadBalancer\n'})}),"\n",(0,s.jsx)(n.h3,{id:"44-secrets-configuration",children:"4.4 Secrets Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/secrets.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: firebase-secrets\ntype: Opaque\ndata:\n  project-id: <base64-encoded-project-id>\n  client-email: <base64-encoded-client-email>\n  private-key: <base64-encoded-private-key>\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: firebase-frontend-secrets\ntype: Opaque\ndata:\n  api-key: <base64-encoded-api-key>\n  project-id: <base64-encoded-project-id>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"part-5-deployment-scripts",children:"Part 5: Deployment Scripts"}),"\n",(0,s.jsx)(n.h3,{id:"51-build-and-deploy-script",children:"5.1 Build and Deploy Script"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"deploy.sh"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Set variables\nPROJECT_ID="your-gcp-project-id"\nREGION="us-central1"\nCLUSTER_NAME="notifications-cluster"\n\n# Enable required APIs\ngcloud services enable container.googleapis.com\ngcloud services enable containerregistry.googleapis.com\n\n# Create GKE cluster\ngcloud container clusters create $CLUSTER_NAME \\\n  --project=$PROJECT_ID \\\n  --zone=$REGION-a \\\n  --num-nodes=3 \\\n  --enable-autoscaling \\\n  --min-nodes=1 \\\n  --max-nodes=5 \\\n  --machine-type=e2-medium\n\n# Get cluster credentials\ngcloud container clusters get-credentials $CLUSTER_NAME \\\n  --zone=$REGION-a \\\n  --project=$PROJECT_ID\n\n# Build and push Docker images\necho "Building backend image..."\ncd backend\ndocker build -t gcr.io/$PROJECT_ID/notifications-backend:latest .\ndocker push gcr.io/$PROJECT_ID/notifications-backend:latest\n\necho "Building frontend image..."\ncd ../frontend\ndocker build -t gcr.io/$PROJECT_ID/notifications-frontend:latest .\ndocker push gcr.io/$PROJECT_ID/notifications-frontend:latest\n\ncd ..\n\n# Deploy to Kubernetes\necho "Deploying to Kubernetes..."\nkubectl apply -f k8s/secrets.yaml\nkubectl apply -f k8s/redis.yaml\nkubectl apply -f k8s/backend.yaml\nkubectl apply -f k8s/frontend.yaml\n\n# Wait for deployments\nkubectl rollout status deployment/redis\nkubectl rollout status deployment/backend\nkubectl rollout status deployment/frontend\n\n# Get external IPs\necho "Getting external IPs..."\nkubectl get services\n'})}),"\n",(0,s.jsx)(n.h3,{id:"52-local-development-script",children:"5.2 Local Development Script"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"dev.sh"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Start Redis\ndocker run -d --name redis -p 6379:6379 redis:7-alpine\n\n# Start backend in development mode\ncd backend\nnpm run dev &\nBACKEND_PID=$!\n\n# Start frontend in development mode\ncd ../frontend\nnpm run dev &\nFRONTEND_PID=$!\n\necho "Backend PID: $BACKEND_PID"\necho "Frontend PID: $FRONTEND_PID"\n\n# Cleanup function\ncleanup() {\n  echo "Stopping services..."\n  kill $BACKEND_PID $FRONTEND_PID\n  docker stop redis\n  docker rm redis\n  exit\n}\n\n# Trap cleanup\ntrap cleanup SIGINT SIGTERM\n\n# Wait for processes\nwait\n'})}),"\n",(0,s.jsx)(n.h2,{id:"part-6-monitoring-and-scaling",children:"Part 6: Monitoring and Scaling"}),"\n",(0,s.jsx)(n.h3,{id:"61-horizontal-pod-autoscaler",children:"6.1 Horizontal Pod Autoscaler"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/hpa.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: backend-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: backend\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: frontend-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: frontend\n  minReplicas: 2\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n"})}),"\n",(0,s.jsx)(n.h3,{id:"62-monitoring-setup",children:"6.2 Monitoring Setup"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"k8s/monitoring.yaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n    scrape_configs:\n    - job_name: 'kubernetes-pods'\n      kubernetes_sd_configs:\n      - role: pod\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n    spec:\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        ports:\n        - containerPort: 9090\n        volumeMounts:\n        - name: config\n          mountPath: /etc/prometheus\n      volumes:\n      - name: config\n        configMap:\n          name: prometheus-config\n"})}),"\n",(0,s.jsx)(n.h2,{id:"part-7-testing-and-validation",children:"Part 7: Testing and Validation"}),"\n",(0,s.jsx)(n.h3,{id:"71-load-testing-script",children:"7.1 Load Testing Script"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"test/load-test.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const io = require('socket.io-client');\n\nconst BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:5000';\nconst NUM_CLIENTS = 100;\nconst TEST_DURATION = 60000; // 1 minute\n\nasync function runLoadTest() {\n  console.log(`Starting load test with ${NUM_CLIENTS} clients...`);\n  \n  const clients = [];\n  const startTime = Date.now();\n  \n  // Create clients\n  for (let i = 0; i < NUM_CLIENTS; i++) {\n    const client = io(BACKEND_URL);\n    clients.push(client);\n    \n    client.on('connect', () => {\n      client.emit('authenticate', { userId: `user-${i}` });\n    });\n    \n    client.on('notification', (data) => {\n      console.log(`Client ${i} received notification: ${data.title}`);\n    });\n  }\n  \n  // Send notifications periodically\n  const interval = setInterval(() => {\n    const sender = Math.floor(Math.random() * NUM_CLIENTS);\n    const recipient = Math.floor(Math.random() * NUM_CLIENTS);\n    \n    clients[sender].emit('sendNotification', {\n      recipientId: `user-${recipient}`,\n      title: 'Load Test Notification',\n      body: `Message from user-${sender} to user-${recipient}`,\n      type: 'realtime'\n    });\n  }, 100);\n  \n  // Stop after test duration\n  setTimeout(() => {\n    clearInterval(interval);\n    clients.forEach(client => client.disconnect());\n    console.log(`Load test completed in ${Date.now() - startTime}ms`);\n    process.exit(0);\n  }, TEST_DURATION);\n}\n\nrunLoadTest();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"72-health-check-script",children:"7.2 Health Check Script"}),"\n",(0,s.jsxs)(n.p,{children:["Create ",(0,s.jsx)(n.code,{children:"scripts/health-check.sh"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nBACKEND_URL="http://localhost:5000"\nFRONTEND_URL="http://localhost:3000"\n\n# Check backend health\necho "Checking backend health..."\nBACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL/health)\nif [ $BACKEND_STATUS -eq 200 ]; then\n  echo "\u2705 Backend is healthy"\nelse\n  echo "\u274c Backend is unhealthy (HTTP $BACKEND_STATUS)"\n  exit 1\nfi\n\n# Check frontend health\necho "Checking frontend health..."\nFRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)\nif [ $FRONTEND_STATUS -eq 200 ]; then\n  echo "\u2705 Frontend is healthy"\nelse\n  echo "\u274c Frontend is unhealthy (HTTP $FRONTEND_STATUS)"\n  exit 1\nfi\n\necho "\ud83c\udf89 All services are healthy!"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"This guide provides a complete implementation of a real-time notification system with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time capabilities"})," via Socket.IO WebSockets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Push notifications"})," via Firebase Cloud Messaging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalable architecture"})," with Redis for session management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production deployment"})," on Google Kubernetes Engine"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring and autoscaling"})," capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load testing"})," and health checking"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-features-implemented",children:"Key Features Implemented:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dual Notification Channels"}),": Both real-time WebSocket and push notifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalable Backend"}),": Multiple server instances with Redis for session sharing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern Frontend"}),": Next.js with TypeScript and Tailwind CSS"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container Orchestration"}),": Full Kubernetes deployment with autoscaling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production Ready"}),": Health checks, monitoring, and proper error handling"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"next-steps",children:"Next Steps:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add user authentication and authorization"}),"\n",(0,s.jsx)(n.li,{children:"Implement notification persistence with a database"}),"\n",(0,s.jsx)(n.li,{children:"Add analytics and notification tracking"}),"\n",(0,s.jsx)(n.li,{children:"Implement notification scheduling"}),"\n",(0,s.jsx)(n.li,{children:"Add support for notification templates"}),"\n",(0,s.jsx)(n.li,{children:"Implement rate limiting and spam protection"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This architecture can handle thousands of concurrent users and can be easily scaled horizontally based on demand."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7814:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(9729);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);