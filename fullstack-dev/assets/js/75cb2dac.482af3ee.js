"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[4250],{5741:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(9729);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},6329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"implementation-guide","title":"Practical Implementation Guide: NestJS + Next.js Microservices & Microfrontends","description":"Quick Start Project Setup","source":"@site/docs/implementation-guide.md","sourceDirName":".","slug":"/implementation-guide","permalink":"/fullstack-dev/docs/implementation-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/tamnk74/fullstack-dev/tree/main/docs-site/docs/implementation-guide.md","tags":[],"version":"current","frontMatter":{}}');var s=t(5813),i=t(5741);const a={},o="Practical Implementation Guide: NestJS + Next.js Microservices & Microfrontends",c={},l=[{value:"Quick Start Project Setup",id:"quick-start-project-setup",level:2},{value:"Project Structure Overview",id:"project-structure-overview",level:2},{value:"Phase 1: Foundation Setup (Week 1-2)",id:"phase-1-foundation-setup-week-1-2",level:2},{value:"Step 1: Initialize the Monorepo",id:"step-1-initialize-the-monorepo",level:3},{value:"Step 2: Setup Shared Libraries",id:"step-2-setup-shared-libraries",level:3},{value:"Phase 2: Microservices Implementation (Week 3-6)",id:"phase-2-microservices-implementation-week-3-6",level:2},{value:"Step 3: Create User Service",id:"step-3-create-user-service",level:3},{value:"Step 4: Create Product Service",id:"step-4-create-product-service",level:3},{value:"Phase 3: Microfrontend Implementation (Week 7-10)",id:"phase-3-microfrontend-implementation-week-7-10",level:2},{value:"Step 5: Create Shell Application",id:"step-5-create-shell-application",level:3},{value:"Step 6: Create User Microfrontend",id:"step-6-create-user-microfrontend",level:3},{value:"Phase 4: Infrastructure &amp; DevOps (Week 11-12)",id:"phase-4-infrastructure--devops-week-11-12",level:2},{value:"Step 7: Docker Configuration",id:"step-7-docker-configuration",level:3},{value:"Step 8: Kubernetes Deployment",id:"step-8-kubernetes-deployment",level:3},{value:"Phase 5: Testing &amp; Quality Assurance (Week 13-14)",id:"phase-5-testing--quality-assurance-week-13-14",level:2},{value:"Step 9: Testing Strategy Implementation",id:"step-9-testing-strategy-implementation",level:3},{value:"Step 10: End-to-End Testing",id:"step-10-end-to-end-testing",level:3},{value:"Implementation Timeline &amp; Milestones",id:"implementation-timeline--milestones",level:2},{value:"Week 1-2: Foundation",id:"week-1-2-foundation",level:3},{value:"Week 3-6: Microservices",id:"week-3-6-microservices",level:3},{value:"Week 7-10: Microfrontends",id:"week-7-10-microfrontends",level:3},{value:"Week 11-12: Infrastructure",id:"week-11-12-infrastructure",level:3},{value:"Week 13-14: Testing &amp; Quality",id:"week-13-14-testing--quality",level:3},{value:"Deployment Commands",id:"deployment-commands",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"practical-implementation-guide-nestjs--nextjs-microservices--microfrontends",children:"Practical Implementation Guide: NestJS + Next.js Microservices & Microfrontends"})}),"\n",(0,s.jsx)(n.h2,{id:"quick-start-project-setup",children:"Quick Start Project Setup"}),"\n",(0,s.jsx)(n.p,{children:"This guide provides step-by-step instructions to implement the architecture process template with a practical e-commerce example using NestJS microservices and Next.js microfrontends."}),"\n",(0,s.jsx)(n.h2,{id:"project-structure-overview",children:"Project Structure Overview"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ecommerce-platform/\n\u251c\u2500\u2500 services/                    # NestJS Microservices\n\u2502   \u251c\u2500\u2500 user-service/           # User management\n\u2502   \u251c\u2500\u2500 product-service/        # Product catalog\n\u2502   \u251c\u2500\u2500 order-service/          # Order processing\n\u2502   \u251c\u2500\u2500 payment-service/        # Payment handling\n\u2502   \u2514\u2500\u2500 notification-service/   # Notifications\n\u251c\u2500\u2500 microfrontends/             # Next.js Microfrontends\n\u2502   \u251c\u2500\u2500 shell-app/             # Main container app\n\u2502   \u251c\u2500\u2500 user-mfe/              # User dashboard\n\u2502   \u251c\u2500\u2500 product-mfe/           # Product catalog\n\u2502   \u251c\u2500\u2500 cart-mfe/              # Shopping cart\n\u2502   \u2514\u2500\u2500 checkout-mfe/          # Checkout process\n\u251c\u2500\u2500 shared/                     # Shared libraries\n\u2502   \u251c\u2500\u2500 types/                 # TypeScript definitions\n\u2502   \u251c\u2500\u2500 utils/                 # Utility functions\n\u2502   \u2514\u2500\u2500 configs/               # Shared configurations\n\u251c\u2500\u2500 infrastructure/             # Infrastructure as Code\n\u2502   \u251c\u2500\u2500 kubernetes/            # K8s manifests\n\u2502   \u251c\u2500\u2500 docker/                # Dockerfiles\n\u2502   \u251c\u2500\u2500 terraform/             # Infrastructure provisioning\n\u2502   \u2514\u2500\u2500 monitoring/            # Monitoring configs\n\u2514\u2500\u2500 docs/                      # Documentation\n"})}),"\n",(0,s.jsx)(n.h2,{id:"phase-1-foundation-setup-week-1-2",children:"Phase 1: Foundation Setup (Week 1-2)"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-initialize-the-monorepo",children:"Step 1: Initialize the Monorepo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Create project structure\nmkdir ecommerce-platform && cd ecommerce-platform\n\n# Initialize root package.json for workspace management\ncat > package.json << \'EOF\'\n{\n  "name": "ecommerce-platform",\n  "version": "1.0.0",\n  "private": true,\n  "workspaces": [\n    "services/*",\n    "microfrontends/*",\n    "shared/*"\n  ],\n  "scripts": {\n    "build": "npm run build --workspaces",\n    "test": "npm run test --workspaces",\n    "lint": "npm run lint --workspaces",\n    "dev:services": "concurrently \\"npm run dev -w user-service\\" \\"npm run dev -w product-service\\" \\"npm run dev -w order-service\\"",\n    "dev:frontend": "concurrently \\"npm run dev -w shell-app\\" \\"npm run dev -w user-mfe\\" \\"npm run dev -w product-mfe\\"",\n    "docker:build": "docker-compose build",\n    "docker:up": "docker-compose up -d",\n    "k8s:deploy": "kubectl apply -f infrastructure/kubernetes/"\n  },\n  "devDependencies": {\n    "concurrently": "^8.2.0",\n    "lerna": "^7.1.4"\n  }\n}\nEOF\n\n# Create workspace directories\nmkdir -p services microfrontends shared/{types,utils,configs} infrastructure/{kubernetes,docker,terraform,monitoring} docs\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-setup-shared-libraries",children:"Step 2: Setup Shared Libraries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Create shared types\ncd shared/types\nnpm init -y\n\ncat > package.json << \'EOF\'\n{\n  "name": "@ecommerce/types",\n  "version": "1.0.0",\n  "main": "dist/index.js",\n  "types": "dist/index.d.ts",\n  "scripts": {\n    "build": "tsc",\n    "dev": "tsc --watch"\n  },\n  "devDependencies": {\n    "typescript": "^5.1.6"\n  }\n}\nEOF\n\ncat > tsconfig.json << \'EOF\'\n{\n  "compilerOptions": {\n    "target": "ES2020",\n    "module": "commonjs",\n    "declaration": true,\n    "outDir": "./dist",\n    "rootDir": "./src",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "dist"]\n}\nEOF\n\nmkdir src && cat > src/index.ts << \'EOF\'\n// User types\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport enum UserRole {\n  CUSTOMER = \'customer\',\n  ADMIN = \'admin\',\n  MODERATOR = \'moderator\'\n}\n\n// Product types\nexport interface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  categoryId: string;\n  imageUrls: string[];\n  stock: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  description: string;\n  parentId?: string;\n}\n\n// Order types\nexport interface Order {\n  id: string;\n  userId: string;\n  items: OrderItem[];\n  totalAmount: number;\n  status: OrderStatus;\n  shippingAddress: Address;\n  billingAddress: Address;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface OrderItem {\n  productId: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\nexport enum OrderStatus {\n  PENDING = \'pending\',\n  CONFIRMED = \'confirmed\',\n  PROCESSING = \'processing\',\n  SHIPPED = \'shipped\',\n  DELIVERED = \'delivered\',\n  CANCELLED = \'cancelled\'\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n}\n\n// API Response types\nexport interface ApiResponse<T> {\n  data: T;\n  message: string;\n  success: boolean;\n  timestamp: Date;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n// Event types for microservice communication\nexport interface DomainEvent {\n  id: string;\n  type: string;\n  aggregateId: string;\n  version: number;\n  data: any;\n  timestamp: Date;\n}\n\nexport interface UserCreatedEvent extends DomainEvent {\n  type: \'USER_CREATED\';\n  data: {\n    userId: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport interface OrderCreatedEvent extends DomainEvent {\n  type: \'ORDER_CREATED\';\n  data: {\n    orderId: string;\n    userId: string;\n    totalAmount: number;\n    items: OrderItem[];\n  };\n}\nEOF\n\nnpm install\nnpm run build\n'})}),"\n",(0,s.jsx)(n.h2,{id:"phase-2-microservices-implementation-week-3-6",children:"Phase 2: Microservices Implementation (Week 3-6)"}),"\n",(0,s.jsx)(n.h3,{id:"step-3-create-user-service",children:"Step 3: Create User Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../../services\nnpx @nestjs/cli new user-service\ncd user-service\n\n# Install additional dependencies\nnpm install @nestjs/typeorm @nestjs/jwt @nestjs/passport @nestjs/swagger @nestjs/microservices @nestjs/bull\nnpm install typeorm pg redis passport passport-jwt passport-local bcryptjs class-validator class-transformer\nnpm install --save-dev @types/passport-jwt @types/passport-local @types/bcryptjs\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create the user service structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/user/entities/user.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn } from 'typeorm';\nimport { UserRole } from '@ecommerce/types';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  hashedPassword: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({\n    type: 'enum',\n    enum: UserRole,\n    default: UserRole.CUSTOMER,\n  })\n  role: UserRole;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/user/dto/create-user.dto.ts\nimport { IsEmail, IsString, MinLength, IsEnum, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { UserRole } from '@ecommerce/types';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'user@example.com' })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({ example: 'password123', minLength: 8 })\n  @IsString()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({ example: 'John' })\n  @IsString()\n  firstName: string;\n\n  @ApiProperty({ example: 'Doe' })\n  @IsString()\n  lastName: string;\n\n  @ApiProperty({ enum: UserRole, required: false })\n  @IsOptional()\n  @IsEnum(UserRole)\n  role?: UserRole;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/user/user.service.ts\nimport { Injectable, ConflictException, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\nimport { User } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository<User>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    const existingUser = await this.userRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ConflictException('User with this email already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 12);\n    \n    const user = this.userRepository.create({\n      ...createUserDto,\n      hashedPassword,\n    });\n\n    const savedUser = await this.userRepository.save(user);\n    \n    // Emit user created event\n    // this.eventEmitter.emit('user.created', new UserCreatedEvent(...));\n    \n    return savedUser;\n  }\n\n  async findAll(): Promise<User[]> {\n    return this.userRepository.find({\n      select: ['id', 'email', 'firstName', 'lastName', 'role', 'createdAt', 'updatedAt'],\n    });\n  }\n\n  async findOne(id: string): Promise<User> {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['id', 'email', 'firstName', 'lastName', 'role', 'createdAt', 'updatedAt'],\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  async findByEmail(email: string): Promise<User | null> {\n    return this.userRepository.findOne({ where: { email } });\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {\n    const user = await this.findOne(id);\n    \n    if (updateUserDto.password) {\n      updateUserDto.password = await bcrypt.hash(updateUserDto.password, 12);\n    }\n\n    await this.userRepository.update(id, updateUserDto);\n    return this.findOne(id);\n  }\n\n  async remove(id: string): Promise<void> {\n    const user = await this.findOne(id);\n    await this.userRepository.remove(user);\n  }\n\n  async validateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.findByEmail(email);\n    \n    if (user && await bcrypt.compare(password, user.hashedPassword)) {\n      const { hashedPassword, ...result } = user;\n      return result as User;\n    }\n    \n    return null;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/user/user.controller.ts\nimport { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { UserRole } from '@ecommerce/types';\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiResponse({ status: 409, description: 'User already exists' })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get user by ID' })\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user' })\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-create-product-service",children:"Step 4: Create Product Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../\nnpx @nestjs/cli new product-service\ncd product-service\n\n# Install dependencies\nnpm install @nestjs/typeorm @nestjs/swagger @nestjs/microservices @nestjs/bull\nnpm install typeorm pg redis class-validator class-transformer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create product service entities and DTOs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/product/entities/product.entity.ts\nimport { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, ManyToOne, JoinColumn } from 'typeorm';\n\n@Entity('products')\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column('decimal', { precision: 10, scale: 2 })\n  price: number;\n\n  @Column()\n  categoryId: string;\n\n  @Column('simple-array')\n  imageUrls: string[];\n\n  @Column('int', { default: 0 })\n  stock: number;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n@Entity('categories')\nexport class Category {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column({ nullable: true })\n  parentId: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"phase-3-microfrontend-implementation-week-7-10",children:"Phase 3: Microfrontend Implementation (Week 7-10)"}),"\n",(0,s.jsx)(n.h3,{id:"step-5-create-shell-application",children:"Step 5: Create Shell Application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../../microfrontends\nnpx create-next-app@latest shell-app --typescript --tailwind --eslint\ncd shell-app\n\n# Install module federation and state management\nnpm install @module-federation/nextjs-mf @reduxjs/toolkit react-redux swr axios\nnpm install --save-dev @types/node\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configure module federation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nconst NextFederationPlugin = require('@module-federation/nextjs-mf');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack(config, options) {\n    config.plugins.push(\n      new NextFederationPlugin({\n        name: 'shell',\n        filename: 'static/chunks/remoteEntry.js',\n        remotes: {\n          userMfe: `userMfe@${process.env.USER_MFE_URL || 'http://localhost:3001'}/_next/static/chunks/remoteEntry.js`,\n          productMfe: `productMfe@${process.env.PRODUCT_MFE_URL || 'http://localhost:3002'}/_next/static/chunks/remoteEntry.js`,\n          cartMfe: `cartMfe@${process.env.CART_MFE_URL || 'http://localhost:3003'}/_next/static/chunks/remoteEntry.js`,\n          checkoutMfe: `checkoutMfe@${process.env.CHECKOUT_MFE_URL || 'http://localhost:3004'}/_next/static/chunks/remoteEntry.js`,\n        },\n        shared: {\n          react: { singleton: true, eager: true },\n          'react-dom': { singleton: true, eager: true },\n          '@reduxjs/toolkit': { singleton: true },\n          'react-redux': { singleton: true },\n          'swr': { singleton: true },\n          'axios': { singleton: true },\n        },\n      })\n    );\n\n    return config;\n  },\n  experimental: {\n    esmExternals: false,\n  },\n};\n\nmodule.exports = nextConfig;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create the main layout and routing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/store/index.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport userSlice from './slices/userSlice';\nimport cartSlice from './slices/cartSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userSlice,\n    cart: cartSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/components/Layout.tsx\nimport React from \'react\';\nimport Link from \'next/link\';\nimport { useSelector } from \'react-redux\';\nimport { RootState } from \'../store\';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport const Layout: React.FC<LayoutProps> = ({ children }) => {\n  const user = useSelector((state: RootState) => state.user.currentUser);\n  const cartItems = useSelector((state: RootState) => state.cart.items);\n\n  return (\n    <div className="min-h-screen bg-gray-50">\n      <nav className="bg-white shadow-sm">\n        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">\n          <div className="flex justify-between items-center h-16">\n            <div className="flex items-center">\n              <Link href="/" className="text-xl font-bold text-gray-900">\n                E-Commerce\n              </Link>\n              <div className="ml-10 flex items-baseline space-x-4">\n                <Link href="/products" className="text-gray-700 hover:text-gray-900">\n                  Products\n                </Link>\n                {user && (\n                  <Link href="/orders" className="text-gray-700 hover:text-gray-900">\n                    Orders\n                  </Link>\n                )}\n              </div>\n            </div>\n            \n            <div className="flex items-center space-x-4">\n              <Link href="/cart" className="relative">\n                <span className="text-gray-700 hover:text-gray-900">Cart</span>\n                {cartItems.length > 0 && (\n                  <span className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full text-xs w-5 h-5 flex items-center justify-center">\n                    {cartItems.length}\n                  </span>\n                )}\n              </Link>\n              \n              {user ? (\n                <div className="flex items-center space-x-2">\n                  <Link href="/profile" className="text-gray-700 hover:text-gray-900">\n                    Profile\n                  </Link>\n                  <button className="text-gray-700 hover:text-gray-900">\n                    Logout\n                  </button>\n                </div>\n              ) : (\n                <div className="flex items-center space-x-2">\n                  <Link href="/login" className="text-gray-700 hover:text-gray-900">\n                    Login\n                  </Link>\n                  <Link href="/register" className="bg-blue-600 text-white px-4 py-2 rounded">\n                    Register\n                  </Link>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n      \n      <main>{children}</main>\n      \n      <footer className="bg-gray-800 text-white py-8 mt-16">\n        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">\n          <p className="text-center">\xa9 2024 E-Commerce Platform. All rights reserved.</p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-6-create-user-microfrontend",children:"Step 6: Create User Microfrontend"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../\nnpx create-next-app@latest user-mfe --typescript --tailwind --eslint\ncd user-mfe\n\nnpm install @module-federation/nextjs-mf @reduxjs/toolkit react-redux swr axios react-hook-form\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configure as a remote:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nconst NextFederationPlugin = require('@module-federation/nextjs-mf');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack(config, options) {\n    config.plugins.push(\n      new NextFederationPlugin({\n        name: 'userMfe',\n        filename: 'static/chunks/remoteEntry.js',\n        exposes: {\n          './UserProfile': './src/components/UserProfile',\n          './UserDashboard': './src/components/UserDashboard',\n          './LoginForm': './src/components/LoginForm',\n          './RegisterForm': './src/components/RegisterForm',\n        },\n        shared: {\n          react: { singleton: true },\n          'react-dom': { singleton: true },\n          '@reduxjs/toolkit': { singleton: true },\n          'react-redux': { singleton: true },\n          'swr': { singleton: true },\n          'axios': { singleton: true },\n        },\n      })\n    );\n\n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create user components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// src/components/UserProfile.tsx\nimport React from \'react\';\nimport { useForm } from \'react-hook-form\';\nimport { User } from \'@ecommerce/types\';\n\ninterface UserProfileProps {\n  user: User;\n  onUpdate: (data: Partial<User>) => void;\n}\n\nexport const UserProfile: React.FC<UserProfileProps> = ({ user, onUpdate }) => {\n  const { register, handleSubmit, formState: { errors } } = useForm({\n    defaultValues: {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    onUpdate(data);\n  };\n\n  return (\n    <div className="max-w-md mx-auto bg-white p-8 border border-gray-300 rounded-lg shadow-lg">\n      <h2 className="text-2xl font-bold mb-6 text-gray-800">Profile Settings</h2>\n      \n      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">\n        <div>\n          <label className="block text-sm font-medium text-gray-700">First Name</label>\n          <input\n            {...register(\'firstName\', { required: \'First name is required\' })}\n            type="text"\n            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"\n          />\n          {errors.firstName && (\n            <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className="block text-sm font-medium text-gray-700">Last Name</label>\n          <input\n            {...register(\'lastName\', { required: \'Last name is required\' })}\n            type="text"\n            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"\n          />\n          {errors.lastName && (\n            <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className="block text-sm font-medium text-gray-700">Email</label>\n          <input\n            {...register(\'email\', { \n              required: \'Email is required\',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: \'Invalid email address\',\n              },\n            })}\n            type="email"\n            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"\n          />\n          {errors.email && (\n            <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>\n          )}\n        </div>\n\n        <button\n          type="submit"\n          className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"\n        >\n          Update Profile\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default UserProfile;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"phase-4-infrastructure--devops-week-11-12",children:"Phase 4: Infrastructure & DevOps (Week 11-12)"}),"\n",(0,s.jsx)(n.h3,{id:"step-7-docker-configuration",children:"Step 7: Docker Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create Docker Compose for local development:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  # Databases\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: ecommerce\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - "5432:5432"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n\n  # Message Queue\n  rabbitmq:\n    image: rabbitmq:3-management\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: admin\n    ports:\n      - "5672:5672"\n      - "15672:15672"\n\n  # Microservices\n  user-service:\n    build: ./services/user-service\n    ports:\n      - "3001:3000"\n    environment:\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ecommerce\n      REDIS_URL: redis://redis:6379\n      JWT_SECRET: your-jwt-secret\n    depends_on:\n      - postgres\n      - redis\n\n  product-service:\n    build: ./services/product-service\n    ports:\n      - "3002:3000"\n    environment:\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ecommerce\n      REDIS_URL: redis://redis:6379\n    depends_on:\n      - postgres\n      - redis\n\n  order-service:\n    build: ./services/order-service\n    ports:\n      - "3003:3000"\n    environment:\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ecommerce\n      REDIS_URL: redis://redis:6379\n      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672\n    depends_on:\n      - postgres\n      - redis\n      - rabbitmq\n\n  # Frontend Applications\n  shell-app:\n    build: ./microfrontends/shell-app\n    ports:\n      - "3000:3000"\n    environment:\n      USER_MFE_URL: http://localhost:3004\n      PRODUCT_MFE_URL: http://localhost:3005\n      CART_MFE_URL: http://localhost:3006\n\n  user-mfe:\n    build: ./microfrontends/user-mfe\n    ports:\n      - "3004:3000"\n\n  product-mfe:\n    build: ./microfrontends/product-mfe\n    ports:\n      - "3005:3000"\n\n  # Monitoring\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - "9090:9090"\n    volumes:\n      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - "3001:3000"\n    environment:\n      GF_SECURITY_ADMIN_PASSWORD: admin\n\nvolumes:\n  postgres_data:\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-8-kubernetes-deployment",children:"Step 8: Kubernetes Deployment"}),"\n",(0,s.jsx)(n.p,{children:"Create Kubernetes manifests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# infrastructure/kubernetes/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ecommerce\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# infrastructure/kubernetes/user-service.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\n  namespace: ecommerce\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n    spec:\n      containers:\n      - name: user-service\n        image: user-service:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: jwt-secret\n              key: secret\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 10\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\n  namespace: ecommerce\nspec:\n  selector:\n    app: user-service\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: user-service-hpa\n  namespace: ecommerce\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: user-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n'})}),"\n",(0,s.jsx)(n.h2,{id:"phase-5-testing--quality-assurance-week-13-14",children:"Phase 5: Testing & Quality Assurance (Week 13-14)"}),"\n",(0,s.jsx)(n.h3,{id:"step-9-testing-strategy-implementation",children:"Step 9: Testing Strategy Implementation"}),"\n",(0,s.jsx)(n.p,{children:"Create comprehensive test suites:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// services/user-service/test/user.service.spec.ts\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\nimport { UserService } from '../src/user/user.service';\nimport { User } from '../src/user/entities/user.entity';\nimport { UserRole } from '@ecommerce/types';\n\ndescribe('UserService', () => {\n  let service: UserService;\n  let repository: Repository<User>;\n\n  const mockRepository = {\n    findOne: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UserService,\n        {\n          provide: getRepositoryToken(User),\n          useValue: mockRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<UserService>(UserService);\n    repository = module.get<Repository<User>>(getRepositoryToken(User));\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('create', () => {\n    it('should create a new user successfully', async () => {\n      const createUserDto = {\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe',\n      };\n\n      const expectedUser = {\n        id: '1',\n        ...createUserDto,\n        hashedPassword: 'hashedPassword',\n        role: UserRole.CUSTOMER,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockRepository.findOne.mockResolvedValue(null);\n      mockRepository.create.mockReturnValue(expectedUser);\n      mockRepository.save.mockResolvedValue(expectedUser);\n\n      const result = await service.create(createUserDto);\n\n      expect(result).toEqual(expectedUser);\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { email: createUserDto.email },\n      });\n      expect(mockRepository.save).toHaveBeenCalled();\n    });\n\n    it('should throw ConflictException if user already exists', async () => {\n      const createUserDto = {\n        email: 'test@example.com',\n        password: 'password123',\n        firstName: 'John',\n        lastName: 'Doe',\n      };\n\n      mockRepository.findOne.mockResolvedValue({ id: '1', email: 'test@example.com' });\n\n      await expect(service.create(createUserDto)).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('findOne', () => {\n    it('should return user if found', async () => {\n      const userId = '1';\n      const expectedUser = {\n        id: userId,\n        email: 'test@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: UserRole.CUSTOMER,\n      };\n\n      mockRepository.findOne.mockResolvedValue(expectedUser);\n\n      const result = await service.findOne(userId);\n\n      expect(result).toEqual(expectedUser);\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: userId },\n        select: ['id', 'email', 'firstName', 'lastName', 'role', 'createdAt', 'updatedAt'],\n      });\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      const userId = '1';\n      mockRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.findOne(userId)).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-10-end-to-end-testing",children:"Step 10: End-to-End Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// e2e/user-flow.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('User Flow', () => {\n  test('should allow user registration, login, and profile update', async ({ page }) => {\n    // Registration\n    await page.goto('/register');\n    await page.fill('[data-testid=firstName]', 'John');\n    await page.fill('[data-testid=lastName]', 'Doe');\n    await page.fill('[data-testid=email]', 'john.doe@example.com');\n    await page.fill('[data-testid=password]', 'password123');\n    await page.click('[data-testid=register-button]');\n    \n    await expect(page).toHaveURL('/login');\n    await expect(page.locator('[data-testid=success-message]')).toBeVisible();\n\n    // Login\n    await page.fill('[data-testid=email]', 'john.doe@example.com');\n    await page.fill('[data-testid=password]', 'password123');\n    await page.click('[data-testid=login-button]');\n    \n    await expect(page).toHaveURL('/dashboard');\n\n    // Profile Update\n    await page.goto('/profile');\n    await page.fill('[data-testid=firstName]', 'Jane');\n    await page.click('[data-testid=update-button]');\n    \n    await expect(page.locator('[data-testid=success-message]')).toBeVisible();\n    await expect(page.locator('[data-testid=firstName]')).toHaveValue('Jane');\n  });\n\n  test('should allow product browsing and cart management', async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.fill('[data-testid=email]', 'john.doe@example.com');\n    await page.fill('[data-testid=password]', 'password123');\n    await page.click('[data-testid=login-button]');\n\n    // Browse products\n    await page.goto('/products');\n    await expect(page.locator('[data-testid=product-list]')).toBeVisible();\n    \n    // Add product to cart\n    await page.click('[data-testid=product-card]:first-child [data-testid=add-to-cart]');\n    await expect(page.locator('[data-testid=cart-count]')).toHaveText('1');\n\n    // View cart\n    await page.click('[data-testid=cart-link]');\n    await expect(page).toHaveURL('/cart');\n    await expect(page.locator('[data-testid=cart-item]')).toBeVisible();\n\n    // Proceed to checkout\n    await page.click('[data-testid=checkout-button]');\n    await expect(page).toHaveURL('/checkout');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-timeline--milestones",children:"Implementation Timeline & Milestones"}),"\n",(0,s.jsx)(n.h3,{id:"week-1-2-foundation",children:"Week 1-2: Foundation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Project structure setup"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Shared libraries implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Development environment configuration"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"week-3-6-microservices",children:"Week 3-6: Microservices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 User service implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Product service implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Order service implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Payment service implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Service communication setup"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"week-7-10-microfrontends",children:"Week 7-10: Microfrontends"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Shell application setup"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 User microfrontend"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Product microfrontend"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Cart microfrontend"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Checkout microfrontend"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"week-11-12-infrastructure",children:"Week 11-12: Infrastructure"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Docker containerization"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Kubernetes deployment"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 CI/CD pipeline setup"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Monitoring implementation"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"week-13-14-testing--quality",children:"Week 13-14: Testing & Quality"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Unit testing implementation"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Integration testing"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 End-to-end testing"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Performance testing"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Security testing"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"deployment-commands",children:"Deployment Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Local development\nnpm run dev:services\nnpm run dev:frontend\n\n# Docker deployment\ndocker-compose up -d\n\n# Kubernetes deployment\nkubectl apply -f infrastructure/kubernetes/\n\n# Production deployment\nnpm run build\nnpm run docker:build\nkubectl set image deployment/user-service user-service=user-service:latest\n"})}),"\n",(0,s.jsx)(n.p,{children:"This implementation guide provides a practical, step-by-step approach to building a production-ready e-commerce platform using the architecture process template. Each phase builds upon the previous one, ensuring a solid foundation for scalable microservices and microfrontend architecture."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);